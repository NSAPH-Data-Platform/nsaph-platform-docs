Search.setIndex({"docnames": ["adding_data", "common/census/doc/CHANGELOG", "common/census/doc/about", "common/census/doc/cached_data", "common/census/doc/census_yaml", "common/census/doc/contact", "common/census/doc/contributing_checklist", "common/census/doc/env_set_up", "common/census/doc/faq", "common/census/doc/glossary", "common/census/doc/index", "common/census/doc/members/assemble_data", "common/census/doc/members/calculate_density", "common/census/doc/members/census_info", "common/census/doc/members/cli", "common/census/doc/members/do_qc", "common/census/doc/members/exceptions", "common/census/doc/members/interpolate_data", "common/census/doc/members/load_data", "common/census/doc/members/query", "common/census/doc/members/tigerweb", "common/census/doc/members/utils", "common/census/doc/members/write_data", "common/census/doc/modules", "common/census/doc/pipeline/census_assemble", "common/census/doc/pipeline/census_density", "common/census/doc/pipeline/census_ingest", "common/census/doc/pipeline/census_ingest_1", "common/census/doc/pipeline/census_interpolate", "common/census/doc/pipeline/census_qc", "common/census/doc/pipeline/census_workflow", "common/census/doc/pipeline/census_write", "common/census/doc/pipeline/index", "common/census/doc/pipeline/ingest", "common/census/doc/pipeline/vacuum", "common/census/doc/quick_start", "common/census/doc/start_guide", "common/cms/doc/CMSLibrary", "common/cms/doc/DataModellingExtensions", "common/cms/doc/LegacyMedicaid", "common/cms/doc/Medicaid", "common/cms/doc/Medicare", "common/cms/doc/QueringMedicaid", "common/cms/doc/UsingHLL", "common/cms/doc/index", "common/cms/doc/members/aggregates", "common/cms/doc/members/create_schema_config", "common/cms/doc/members/duplicates", "common/cms/doc/members/fts2yaml", "common/cms/doc/members/functions", "common/cms/doc/members/init_cms_db", "common/cms/doc/members/mcr_combine_tables", "common/cms/doc/members/mcr_create_test_data", "common/cms/doc/members/mcr_data_loader", "common/cms/doc/members/mcr_file", "common/cms/doc/members/mcr_fts2csv", "common/cms/doc/members/mcr_fts2db", "common/cms/doc/members/mcr_registry", "common/cms/doc/members/mcr_sas", "common/cms/doc/members/mcr_sas2db", "common/cms/doc/members/mcr_sas2yaml", "common/cms/doc/members/medicaid_yaml", "common/cms/doc/members/medicare_yaml", "common/cms/doc/members/medpar_converter", "common/cms/doc/members/procedures", "common/cms/doc/members/random_selector", "common/cms/doc/members/registry", "common/cms/doc/members/table_population", "common/cms/doc/pipeline/create", "common/cms/doc/pipeline/ensure_resource", "common/cms/doc/pipeline/grant", "common/cms/doc/pipeline/grant_read_access", "common/cms/doc/pipeline/index", "common/cms/doc/pipeline/ingest", "common/cms/doc/pipeline/initdb", "common/cms/doc/pipeline/load_raw_medicaid", "common/cms/doc/pipeline/load_raw_medicare", "common/cms/doc/pipeline/matview", "common/cms/doc/pipeline/mcr2015", "common/cms/doc/pipeline/medicaid", "common/cms/doc/pipeline/medicare", "common/cms/doc/pipeline/medicare_admissions", "common/cms/doc/pipeline/medicare_beneficiaries", "common/cms/doc/pipeline/medicare_combine_tables", "common/cms/doc/pipeline/medicare_qc", "common/cms/doc/pipeline/parse_fts", "common/cms/doc/pipeline/reset", "common/cms/doc/pipeline/test_medicaid", "common/cms/doc/pipeline/update_medicaid", "common/cms/doc/pipeline/vacuum", "common/cms/doc/pipeline/verify", "common/core-platform/doc/CoreLibrary", "common/core-platform/doc/DataLoader", "common/core-platform/doc/Datamodels", "common/core-platform/doc/ProjectLoader", "common/core-platform/doc/SQLDocumentation", "common/core-platform/doc/SampleQuery", "common/core-platform/doc/TerritorialCodes", "common/core-platform/doc/UserRequests", "common/core-platform/doc/index", "common/core-platform/doc/members/adi", "common/core-platform/doc/members/common", "common/core-platform/doc/members/create", "common/core-platform/doc/members/cwl_collect_outputs", "common/core-platform/doc/members/data_loader", "common/core-platform/doc/members/db", "common/core-platform/doc/members/domain", "common/core-platform/doc/members/example_request.yaml", "common/core-platform/doc/members/executors", "common/core-platform/doc/members/fips", "common/core-platform/doc/members/hdf5_export", "common/core-platform/doc/members/hud_zip2fips", "common/core-platform/doc/members/index_builder", "common/core-platform/doc/members/init_core_db", "common/core-platform/doc/members/inserter", "common/core-platform/doc/members/introspector", "common/core-platform/doc/members/link_gis", "common/core-platform/doc/members/loader", "common/core-platform/doc/members/loader_config", "common/core-platform/doc/members/map_to_foreign_database.ddl", "common/core-platform/doc/members/model", "common/core-platform/doc/members/monitor", "common/core-platform/doc/members/net", "common/core-platform/doc/members/nsaph", "common/core-platform/doc/members/pg_json_dump", "common/core-platform/doc/members/pg_keywords", "common/core-platform/doc/members/project_loader", "common/core-platform/doc/members/psql", "common/core-platform/doc/members/query", "common/core-platform/doc/members/rename_indices.sql", "common/core-platform/doc/members/resources", "common/core-platform/doc/members/sample_query", "common/core-platform/doc/members/sas_explorer", "common/core-platform/doc/members/shapes", "common/core-platform/doc/members/ssa2fips", "common/core-platform/doc/members/utils", "common/core-platform/doc/members/utils.sql", "common/core-platform/doc/members/vacuum", "common/core-platform/doc/members/zip2fips", "common/core-platform/doc/members/zip2fips.sql", "common/epa/doc/cwl_tools", "common/epa/doc/index", "common/epa/doc/members/airnow", "common/epa/doc/members/airnow_downloader", "common/epa/doc/members/airnow_ds_def", "common/epa/doc/members/airnow_setup", "common/epa/doc/members/airnow_shapes", "common/epa/doc/members/aqs", "common/epa/doc/members/aqs_ds_def", "common/epa/doc/members/aqs_expand", "common/epa/doc/members/aqs_tools", "common/epa/doc/members/registry", "common/epa/doc/pipeline/airnow", "common/epa/doc/pipeline/airnow_local_shapes", "common/epa/doc/pipeline/aqs", "common/epa/doc/pipeline/download_airnow", "common/epa/doc/pipeline/download_aqs", "common/epa/doc/pipeline/ensure_resource", "common/epa/doc/pipeline/expand_aqs", "common/epa/doc/pipeline/get_shapes", "common/epa/doc/pipeline/index", "common/epa/doc/pipeline/ingest", "common/epa/doc/pipeline/introspect", "common/epa/doc/pipeline/sample_airnow", "common/epa/doc/pipeline/sample_aqs", "common/epa/doc/pipeline/setup_airnow", "common/epa/doc/pipeline/vacuum", "common/epa/doc/python_components", "common/epa/doc/usage", "common/gis/doc/index", "common/gis/doc/members/annotator", "common/gis/doc/members/compute_shape", "common/gis/doc/members/constants", "common/gis/doc/members/downloader", "common/gis/doc/members/geometry", "common/gis/doc/python_components", "common/gridmet/doc/bands", "common/gridmet/doc/classes", "common/gridmet/doc/enums", "common/gridmet/doc/geo", "common/gridmet/doc/gridmet_ds_def", "common/gridmet/doc/gridmet_task", "common/gridmet/doc/gridmet_tools", "common/gridmet/doc/index", "common/gridmet/doc/members/aggregator", "common/gridmet/doc/members/config", "common/gridmet/doc/members/csv2hdf5", "common/gridmet/doc/members/exclude_csv", "common/gridmet/doc/members/geop", "common/gridmet/doc/members/gridmet_tools", "common/gridmet/doc/members/launcher", "common/gridmet/doc/members/registry", "common/gridmet/doc/members/shapes", "common/gridmet/doc/members/task", "common/gridmet/doc/members/test", "common/gridmet/doc/members/wustl_file_processor", "common/gridmet/doc/pipeline/add_data", "common/gridmet/doc/pipeline/download", "common/gridmet/doc/pipeline/get_shapes", "common/gridmet/doc/pipeline/gridmet", "common/gridmet/doc/pipeline/gridmet_1", "common/gridmet/doc/pipeline/gridmet_2", "common/gridmet/doc/pipeline/gridmet_dwnl_only", "common/gridmet/doc/pipeline/gridmet_dwnl_only_1", "common/gridmet/doc/pipeline/gridmet_humidity", "common/gridmet/doc/pipeline/gridmet_humidity_1", "common/gridmet/doc/pipeline/gridmet_humidity_2", "common/gridmet/doc/pipeline/gridmet_incremental", "common/gridmet/doc/pipeline/gridmet_incremental_1", "common/gridmet/doc/pipeline/gridmet_local_shapes", "common/gridmet/doc/pipeline/gridmet_local_shapes_1", "common/gridmet/doc/pipeline/index", "common/gridmet/doc/pipeline/ingest", "common/gridmet/doc/pipeline/process", "common/gridmet/doc/pipeline/rearrange", "common/gridmet/doc/pipeline/registry", "common/gridmet/doc/pipeline/reset", "common/gridmet/doc/pipeline/vacuum", "common/gridmet/doc/pipeline/wustl", "common/gridmet/doc/pipeline/wustl_aggregate", "common/gridmet/doc/pipeline/wustl_one_file", "common/gridmet/doc/pipeline/wustl_one_year", "common/gridmet/doc/python_components", "common/gridmet/doc/shapes", "common/gridmet/doc/strategy", "common/platform-deployment/doc/Configuration", "common/platform-deployment/doc/Glossary", "common/platform-deployment/doc/Guide", "common/platform-deployment/doc/Howto", "common/platform-deployment/doc/Introduction", "common/platform-deployment/doc/Testing", "common/platform-deployment/doc/UsefulCommands", "common/platform-deployment/doc/index", "common/platform-deployment/doc/members/conda_default.yml", "common/platform-deployment/doc/members/docker-compose-mapped-packages.yaml", "common/platform-deployment/doc/members/docker-compose.yaml", "common/platform-deployment/doc/members/env_example_nopostgres_conda", "common/platform-deployment/doc/members/env_example_nopostgres_noconda", "common/platform-deployment/doc/members/env_example_postgres_conda", "common/platform-deployment/doc/members/env_example_postgres_noconda", "common/platform-deployment/doc/members/install_conda.sh", "common/platform-deployment/doc/members/install_projects.sh", "common/platform-deployment/doc/members/r-github-packages.txt", "common/platform-deployment/doc/members/rebuild", "common/platform-deployment/doc/members/refresh", "common/platform-deployment/doc/members/requirements.txt", "common/utils/doc/index", "common/utils/doc/members/DataSet", "common/utils/doc/members/cli", "common/utils/doc/members/collector", "common/utils/doc/members/conf", "common/utils/doc/members/context", "common/utils/doc/members/copy_section", "common/utils/doc/members/cwl2md", "common/utils/doc/members/fwf", "common/utils/doc/members/interface", "common/utils/doc/members/interpolate_ma", "common/utils/doc/members/io_utils", "common/utils/doc/members/md_creator", "common/utils/doc/members/pyfst", "common/utils/doc/members/setup", "common/utils/doc/members/test_cli_context", "common/utils/doc/members/test_interpolation", "common/utils/doc/members/test_qc", "common/utils/doc/members/tester", "docindices", "domains", "fts", "glossary", "guts", "home", "index", "packages", "pipelines", "rationale"], "filenames": ["adding_data.md", "common/census/doc/CHANGELOG.md", "common/census/doc/about.rst", "common/census/doc/cached_data.rst", "common/census/doc/census_yaml.rst", "common/census/doc/contact.rst", "common/census/doc/contributing_checklist.rst", "common/census/doc/env_set_up.rst", "common/census/doc/faq.rst", "common/census/doc/glossary.rst", "common/census/doc/index.rst", "common/census/doc/members/assemble_data.rst", "common/census/doc/members/calculate_density.rst", "common/census/doc/members/census_info.rst", "common/census/doc/members/cli.rst", "common/census/doc/members/do_qc.rst", "common/census/doc/members/exceptions.rst", "common/census/doc/members/interpolate_data.rst", "common/census/doc/members/load_data.rst", "common/census/doc/members/query.rst", "common/census/doc/members/tigerweb.rst", "common/census/doc/members/utils.rst", "common/census/doc/members/write_data.rst", "common/census/doc/modules.rst", "common/census/doc/pipeline/census_assemble.md", "common/census/doc/pipeline/census_density.md", "common/census/doc/pipeline/census_ingest.md", "common/census/doc/pipeline/census_ingest_1.md", "common/census/doc/pipeline/census_interpolate.md", "common/census/doc/pipeline/census_qc.md", "common/census/doc/pipeline/census_workflow.md", "common/census/doc/pipeline/census_write.md", "common/census/doc/pipeline/index.md", "common/census/doc/pipeline/ingest.md", "common/census/doc/pipeline/vacuum.md", "common/census/doc/quick_start.rst", "common/census/doc/start_guide.rst", "common/cms/doc/CMSLibrary.md", "common/cms/doc/DataModellingExtensions.md", "common/cms/doc/LegacyMedicaid.md", "common/cms/doc/Medicaid.md", "common/cms/doc/Medicare.md", "common/cms/doc/QueringMedicaid.md", "common/cms/doc/UsingHLL.md", "common/cms/doc/index.md", "common/cms/doc/members/aggregates.rst", "common/cms/doc/members/create_schema_config.rst", "common/cms/doc/members/duplicates.rst", "common/cms/doc/members/fts2yaml.rst", "common/cms/doc/members/functions.md", "common/cms/doc/members/init_cms_db.rst", "common/cms/doc/members/mcr_combine_tables.rst", "common/cms/doc/members/mcr_create_test_data.rst", "common/cms/doc/members/mcr_data_loader.rst", "common/cms/doc/members/mcr_file.rst", "common/cms/doc/members/mcr_fts2csv.rst", "common/cms/doc/members/mcr_fts2db.rst", "common/cms/doc/members/mcr_registry.rst", "common/cms/doc/members/mcr_sas.rst", "common/cms/doc/members/mcr_sas2db.rst", "common/cms/doc/members/mcr_sas2yaml.rst", "common/cms/doc/members/medicaid_yaml.md", "common/cms/doc/members/medicare_yaml.md", "common/cms/doc/members/medpar_converter.rst", "common/cms/doc/members/procedures.md", "common/cms/doc/members/random_selector.rst", "common/cms/doc/members/registry.rst", "common/cms/doc/members/table_population.rst", "common/cms/doc/pipeline/create.md", "common/cms/doc/pipeline/ensure_resource.md", "common/cms/doc/pipeline/grant.md", "common/cms/doc/pipeline/grant_read_access.md", "common/cms/doc/pipeline/index.md", "common/cms/doc/pipeline/ingest.md", "common/cms/doc/pipeline/initdb.md", "common/cms/doc/pipeline/load_raw_medicaid.md", "common/cms/doc/pipeline/load_raw_medicare.md", "common/cms/doc/pipeline/matview.md", "common/cms/doc/pipeline/mcr2015.md", "common/cms/doc/pipeline/medicaid.md", "common/cms/doc/pipeline/medicare.md", "common/cms/doc/pipeline/medicare_admissions.md", "common/cms/doc/pipeline/medicare_beneficiaries.md", "common/cms/doc/pipeline/medicare_combine_tables.md", "common/cms/doc/pipeline/medicare_qc.md", "common/cms/doc/pipeline/parse_fts.md", "common/cms/doc/pipeline/reset.md", "common/cms/doc/pipeline/test_medicaid.md", "common/cms/doc/pipeline/update_medicaid.md", "common/cms/doc/pipeline/vacuum.md", "common/cms/doc/pipeline/verify.md", "common/core-platform/doc/CoreLibrary.md", "common/core-platform/doc/DataLoader.md", "common/core-platform/doc/Datamodels.md", "common/core-platform/doc/ProjectLoader.md", "common/core-platform/doc/SQLDocumentation.md", "common/core-platform/doc/SampleQuery.md", "common/core-platform/doc/TerritorialCodes.md", "common/core-platform/doc/UserRequests.md", "common/core-platform/doc/index.md", "common/core-platform/doc/members/adi.rst", "common/core-platform/doc/members/common.rst", "common/core-platform/doc/members/create.rst", "common/core-platform/doc/members/cwl_collect_outputs.rst", "common/core-platform/doc/members/data_loader.rst", "common/core-platform/doc/members/db.rst", "common/core-platform/doc/members/domain.rst", "common/core-platform/doc/members/example_request.yaml.rst", "common/core-platform/doc/members/executors.rst", "common/core-platform/doc/members/fips.rst", "common/core-platform/doc/members/hdf5_export.rst", "common/core-platform/doc/members/hud_zip2fips.rst", "common/core-platform/doc/members/index_builder.rst", "common/core-platform/doc/members/init_core_db.rst", "common/core-platform/doc/members/inserter.rst", "common/core-platform/doc/members/introspector.rst", "common/core-platform/doc/members/link_gis.rst", "common/core-platform/doc/members/loader.rst", "common/core-platform/doc/members/loader_config.rst", "common/core-platform/doc/members/map_to_foreign_database.ddl.md", "common/core-platform/doc/members/model.rst", "common/core-platform/doc/members/monitor.rst", "common/core-platform/doc/members/net.rst", "common/core-platform/doc/members/nsaph.rst", "common/core-platform/doc/members/pg_json_dump.rst", "common/core-platform/doc/members/pg_keywords.rst", "common/core-platform/doc/members/project_loader.rst", "common/core-platform/doc/members/psql.rst", "common/core-platform/doc/members/query.rst", "common/core-platform/doc/members/rename_indices.sql.md", "common/core-platform/doc/members/resources.rst", "common/core-platform/doc/members/sample_query.rst", "common/core-platform/doc/members/sas_explorer.rst", "common/core-platform/doc/members/shapes.rst", "common/core-platform/doc/members/ssa2fips.rst", "common/core-platform/doc/members/utils.rst", "common/core-platform/doc/members/utils.sql.md", "common/core-platform/doc/members/vacuum.rst", "common/core-platform/doc/members/zip2fips.rst", "common/core-platform/doc/members/zip2fips.sql.md", "common/epa/doc/cwl_tools.md", "common/epa/doc/index.md", "common/epa/doc/members/airnow.rst", "common/epa/doc/members/airnow_downloader.rst", "common/epa/doc/members/airnow_ds_def.rst", "common/epa/doc/members/airnow_setup.rst", "common/epa/doc/members/airnow_shapes.rst", "common/epa/doc/members/aqs.rst", "common/epa/doc/members/aqs_ds_def.rst", "common/epa/doc/members/aqs_expand.rst", "common/epa/doc/members/aqs_tools.rst", "common/epa/doc/members/registry.rst", "common/epa/doc/pipeline/airnow.md", "common/epa/doc/pipeline/airnow_local_shapes.md", "common/epa/doc/pipeline/aqs.md", "common/epa/doc/pipeline/download_airnow.md", "common/epa/doc/pipeline/download_aqs.md", "common/epa/doc/pipeline/ensure_resource.md", "common/epa/doc/pipeline/expand_aqs.md", "common/epa/doc/pipeline/get_shapes.md", "common/epa/doc/pipeline/index.md", "common/epa/doc/pipeline/ingest.md", "common/epa/doc/pipeline/introspect.md", "common/epa/doc/pipeline/sample_airnow.md", "common/epa/doc/pipeline/sample_aqs.md", "common/epa/doc/pipeline/setup_airnow.md", "common/epa/doc/pipeline/vacuum.md", "common/epa/doc/python_components.md", "common/epa/doc/usage.md", "common/gis/doc/index.md", "common/gis/doc/members/annotator.rst", "common/gis/doc/members/compute_shape.rst", "common/gis/doc/members/constants.rst", "common/gis/doc/members/downloader.rst", "common/gis/doc/members/geometry.rst", "common/gis/doc/python_components.md", "common/gridmet/doc/bands.rst", "common/gridmet/doc/classes.rst", "common/gridmet/doc/enums.rst", "common/gridmet/doc/geo.rst", "common/gridmet/doc/gridmet_ds_def.rst", "common/gridmet/doc/gridmet_task.rst", "common/gridmet/doc/gridmet_tools.rst", "common/gridmet/doc/index.md", "common/gridmet/doc/members/aggregator.rst", "common/gridmet/doc/members/config.rst", "common/gridmet/doc/members/csv2hdf5.rst", "common/gridmet/doc/members/exclude_csv.rst", "common/gridmet/doc/members/geop.rst", "common/gridmet/doc/members/gridmet_tools.rst", "common/gridmet/doc/members/launcher.rst", "common/gridmet/doc/members/registry.rst", "common/gridmet/doc/members/shapes.rst", "common/gridmet/doc/members/task.rst", "common/gridmet/doc/members/test.rst", "common/gridmet/doc/members/wustl_file_processor.rst", "common/gridmet/doc/pipeline/add_data.md", "common/gridmet/doc/pipeline/download.md", "common/gridmet/doc/pipeline/get_shapes.md", "common/gridmet/doc/pipeline/gridmet.md", "common/gridmet/doc/pipeline/gridmet_1.md", "common/gridmet/doc/pipeline/gridmet_2.md", "common/gridmet/doc/pipeline/gridmet_dwnl_only.md", "common/gridmet/doc/pipeline/gridmet_dwnl_only_1.md", "common/gridmet/doc/pipeline/gridmet_humidity.md", "common/gridmet/doc/pipeline/gridmet_humidity_1.md", "common/gridmet/doc/pipeline/gridmet_humidity_2.md", "common/gridmet/doc/pipeline/gridmet_incremental.md", "common/gridmet/doc/pipeline/gridmet_incremental_1.md", "common/gridmet/doc/pipeline/gridmet_local_shapes.md", "common/gridmet/doc/pipeline/gridmet_local_shapes_1.md", "common/gridmet/doc/pipeline/index.md", "common/gridmet/doc/pipeline/ingest.md", "common/gridmet/doc/pipeline/process.md", "common/gridmet/doc/pipeline/rearrange.md", "common/gridmet/doc/pipeline/registry.md", "common/gridmet/doc/pipeline/reset.md", "common/gridmet/doc/pipeline/vacuum.md", "common/gridmet/doc/pipeline/wustl.md", "common/gridmet/doc/pipeline/wustl_aggregate.md", "common/gridmet/doc/pipeline/wustl_one_file.md", "common/gridmet/doc/pipeline/wustl_one_year.md", "common/gridmet/doc/python_components.md", "common/gridmet/doc/shapes.rst", "common/gridmet/doc/strategy.rst", "common/platform-deployment/doc/Configuration.md", "common/platform-deployment/doc/Glossary.md", "common/platform-deployment/doc/Guide.md", "common/platform-deployment/doc/Howto.md", "common/platform-deployment/doc/Introduction.md", "common/platform-deployment/doc/Testing.md", "common/platform-deployment/doc/UsefulCommands.md", "common/platform-deployment/doc/index.md", "common/platform-deployment/doc/members/conda_default.yml.md", "common/platform-deployment/doc/members/docker-compose-mapped-packages.yaml.md", "common/platform-deployment/doc/members/docker-compose.yaml.md", "common/platform-deployment/doc/members/env_example_nopostgres_conda.md", "common/platform-deployment/doc/members/env_example_nopostgres_noconda.md", "common/platform-deployment/doc/members/env_example_postgres_conda.md", "common/platform-deployment/doc/members/env_example_postgres_noconda.md", "common/platform-deployment/doc/members/install_conda.sh.md", "common/platform-deployment/doc/members/install_projects.sh.md", "common/platform-deployment/doc/members/r-github-packages.txt.md", "common/platform-deployment/doc/members/rebuild.md", "common/platform-deployment/doc/members/refresh.md", "common/platform-deployment/doc/members/requirements.txt.md", "common/utils/doc/index.md", "common/utils/doc/members/DataSet.rst", "common/utils/doc/members/cli.rst", "common/utils/doc/members/collector.rst", "common/utils/doc/members/conf.rst", "common/utils/doc/members/context.rst", "common/utils/doc/members/copy_section.rst", "common/utils/doc/members/cwl2md.rst", "common/utils/doc/members/fwf.rst", "common/utils/doc/members/interface.rst", "common/utils/doc/members/interpolate_ma.rst", "common/utils/doc/members/io_utils.rst", "common/utils/doc/members/md_creator.rst", "common/utils/doc/members/pyfst.rst", "common/utils/doc/members/setup.rst", "common/utils/doc/members/test_cli_context.rst", "common/utils/doc/members/test_interpolation.rst", "common/utils/doc/members/test_qc.rst", "common/utils/doc/members/tester.rst", "docindices.md", "domains.md", "fts.md", "glossary.md", "guts.md", "home.md", "index.md", "packages.md", "pipelines.md", "rationale.md"], "titles": ["How to add data to the database", "Changelog", "About", "Stored Data Files", "Census Variable File Structure", "Contant", "Contributing Checklist", "Setting Up Environment", "Frequently Asked Questions", "Glossary", "NSAPH Census Pipelines", "The assemble_data Module", "The calculate_density Module", "The census_info Module", "The cli Module", "The do_qc Module", "The exceptions Module", "The interpolate_data Module", "The load_data Module", "The query Module", "The tigerweb Module", "The utils Module", "The write_data Module", "Modules", "census_assemble.cwl", "census_density.cwl", "census_ingest.cwl", "Sub-workflow <em>store</em> from census_ingest.cwl", "census_interpolate.cwl", "census_qc.cwl", "census_workflow.cwl", "census_write.cwl", "Index Builder", "Uploader of the gridMET Data to the database", "Table tuner tool (running VACUUM)", "Quick Start", "Working with the <code class=\"docutils literal notranslate\"><span class=\"pre\">census</span></code> Package", "Python package to manipulate health (CMS) data", "Extensions used for creating federated view of different years", "Importing Medicaid Data Processed by the Legacy Pipeline", "Handling Medicaid data", "Medicare Files Handling", "Querying Medicaid Data", "Using HyperLogLog (HLL) hashes for count approximations", "Health Data", "The aggregates Module", "The create_schema_config Module", "The duplicates Module", "Parser for FTS files that accompany CMS data from ResDac", "Functions", "The init_cms_db Module", "The mcr_combine_tables Module", "The mcr_create_test_data Module", "The mcr_data_loader Module", "The mcr_file Module", "The mcr_fts2csv Module", "The mcr_fts2db Module", "The mcr_registry Module", "The mcr_sas Module", "The mcr_sas2db Module", "The mcr_sas2yaml Module", "Medicaid.yaml", "Medicare.yaml", "The medpar_converter Module", "Procedures", "The random_selector Module", "The registry Module", "The table_population Module", "Table/View Initializer", "Resource Loader", "Workflow to grant read (SELECT) privilege to all users in NSAPH admin role", "Utility to grant read (SELECT) privilege to all users in NSAPH admin role", "Index Builder", "Workflow to load Medicaid data from files", "Database initializer", "Patient Summary Loader", "Loader for raw CMS Medicare data", "Materialized View Creator", "Materialized View Creator", "Full Medicaid Processing Pipeline", "Medicare data ingestion and processing pipeline", "Process Medicare inpatient admissions data inside the database", "Medicare Beneficiaries data in-database processing pipeline", "Medicare raw data federation tool", "Creates helper tables for Medicare QC", "FTS Parser", "Generic Table (View/Materialized View) Initializer", "Full Medicaid Processing Pipeline", "Full Medicaid Processing Pipeline", "Table tuner tool (running VACUUM)", "Index Builder", "Python Core Platform Components", "NSAPH Data Loader", "Data Modelling for NSAPH Data Platform", "Project (Directory) Loading Utility", "SQL Documentation", "How to query the database", "Mapping between different territorial codes", "Preliminary Considerations for Handling User Requests", "NSAPH Core Data Platform", "The adi Module", "The common Module", "The create Module", "The cwl_collect_outputs Module", "The data_loader Module", "Database connection API", "The Domain Class", "Example request", "The executors Module", "The fips Module", "The hdf5_export Module", "DDL for HUD ZIP to FIPS mappings", "The index_builder Module", "The init_core_db Module", "The inserter Module", "The introspector Module", "The link_gis Module", "Data loader base abstract API", "The loader_config Module", "Set of SQL statements to map tables from another database", "The model Module", "The monitor Module", "The net Module", "NSAPH Core Package-wide utilities", "The pg_json_dump Module", "The pg_keywords Module", "The project_loader Module", "The psql Module", "The query Module", "A procedure to rename indices", "The resources Module", "Sample query", "The sas_explorer Module", "The shapes Module", "The ssa2fips Module", "The utils Module", "Utility functions", "The vacuum Module", "The zip2fips Module", "SQL to create direct ZIP =&gt; FIPS lookup table and helper functions", "CWL Tools and Common Workflows", "NSAPH EPA Package Description", "Main Class for EPA AirNow Package", "Downloader for AirNow", "Configuration Options for EPA AirNow Package", "The airnow_setup Module", "The airnow_shapes Module", "Main Class for EPA AQS Package", "Configuration Options for EPA AQS Package", "The aqs_expand Module", "Internal scripts used for download tasks", "The registry Module", "Full EPA AirNow Processing Pipeline (including downloading shapefiles)", "Full AirNowProcessing Pipeline (with shapefiles on local file system)", "Full EPA AQS Processing Pipeline", "Downloader of AirNow Data", "Downloader of AQS Data", "Resource Loader", "Downloader of AQS Data", "Tool retrieving county or zip shapefiles from Census website", "Index Builder", "Uploader of the EPA Data to the database", "Introspector for downloaded data file", "Sample arguments to AirNow pipeline", "Sample arguments to AQS pipeline", "Prepare environment for AirNow", "Table tuner tool (running VACUUM)", "Python Components", "EPA Toolkit Usage", "NSAPH GIS python package", "GIS Annotator", "Observation values aggregation over shapes", "GIS Related Enums", "Shapefiles downloader", "A point in a raster class", "GIS Python Modules", "Bands (Gridmet Variables)", "Main Classes", "Parameters (Enums)", "Types of Geography", "Configuration Object", "Task Object", "Tools and Utilities", "Gridmet Computational Utilities", "The aggregator Module", "The config Module", "The csv2hdf5 Module", "The exclude_csv Module", "The geop Module", "The gridmet_tools Module", "The launcher Module", "The registry Module", "The shapes Module", "The task Module", "The test Module", "The wustl_file_processor Module", "Uploader of the gridMET Data to the database", "Downloader of gridMET Data", "Downloader of AirNow Data", "gridMET Pipeline", "Sub-workflow <em>init_tables</em> from gridmet.cwl", "Sub-workflow <em>process</em> from gridmet.cwl", "gridMET Pipeline", "Sub-workflow <em>process</em> from gridmet_dwnl_only.cwl", "gridMET Pipeline", "Sub-workflow <em>init_tables</em> from gridmet_humidity.cwl", "Sub-workflow <em>process</em> from gridmet_humidity.cwl", "gridMET Pipeline", "Sub-workflow <em>process</em> from gridmet_incremental.cwl", "gridMET Pipeline", "Sub-workflow <em>process</em> from gridmet_local_shapes.cwl", "Index Builder", "Uploader of the gridMET Data to the database", "Downloader of gridMET Data", "File rearranger", "Model YAML Writer", "Generic Table (View/Materialized View) Initializer", "Table tuner tool (running VACUUM)", "Pipeline to ingest Pollution downloaded from WashU Box", "Aggregates data in NetCDF file over given geographies", "Workflow to aggregate and ingest one file in NetCDF format", "Workflow to aggregate and ingest NetCDF files for one year", "gridMET Python Modules", "Types of Shape", "Rasterization Strategy", "Configuration Guide", "Airflow/CWL Glossary and FAQ", "CWL-Airflow Deployment Guide", "Howto", "Introduction to Deployment of NSAPH Data Platform", "Testing the installation", "Some useful commands", "NSAPH Data Platform Deployment", "Default Conda config", "Docker-compose file with Python Package mapping", "Docker-compose file", "Environment example with conda and existing PostgreSQL", "Environment example without conda and with existing PostgreSQL", "Environment example with conda and with new container with PostgreSQL", "Environment example without conda and with new container with PostgreSQL", "Install Conda script", "Install projects script", "R packages", "Script to rebuild docker containers with latest Python packages", "Script to refresh Python packages in the running docker containers", "List of Python requirements", "NSAPH Utils python package", "The DataSet Module", "The cli Module", "The collector Module", "The conf Module", "The context Module", "The copy_section Module", "The cwl2md Module", "The fwf Module", "The interface Module", "The interpolate_ma Module", "The io_utils Module", "The md_creator Module", "The pyfst Module", "The setup Module", "The test_cli_context Module", "The test_interpolation Module", "The test_qc Module", "The tester Module", "Indices", "Data Domains", "File Transfer Summary", "Terms and acronyms used in this documentation", "Data Platform Internals", "NSAPH Data Platform: Documentation Home", "NSAPH Data Platform", "Python Packages Included in the Platform", "Data Processing Pipelines", "Why Data Platform and what does it do?"], "terms": {"There": [0, 35, 40, 41, 93, 225, 232, 246], "mani": [0, 6, 40, 93, 225, 229, 270, 274], "wai": [0, 11, 23, 35, 80, 98, 99, 185, 225, 226, 229, 254, 274], "we": [0, 6, 11, 13, 19, 23, 35, 36, 40, 41, 42, 43, 44, 47, 58, 80, 81, 82, 85, 93, 94, 96, 97, 98, 99, 100, 141, 180, 183, 185, 198, 199, 204, 207, 218, 225, 226, 229, 232, 246, 256, 270, 271], "review": [0, 6, 35, 246], "follow": [0, 4, 7, 35, 36, 38, 40, 41, 42, 44, 93, 94, 96, 99, 141, 144, 148, 168, 180, 183, 185, 190, 225, 228, 230, 231, 232, 251, 270], "option": [0, 4, 11, 12, 13, 14, 15, 17, 19, 22, 23, 37, 45, 46, 48, 51, 53, 54, 62, 63, 66, 67, 91, 92, 93, 100, 101, 102, 104, 106, 108, 112, 115, 116, 117, 118, 119, 120, 121, 126, 134, 137, 141, 142, 143, 147, 149, 150, 151, 167, 168, 170, 171, 173, 174, 180, 183, 184, 185, 189, 190, 195, 225, 227, 228, 229, 236, 237, 238, 239, 251, 252, 257, 259, 261, 270, 274], "its": [0, 36, 40, 48, 93, 99, 108, 144, 148, 174, 180, 182, 185, 189, 227, 228, 251, 270], "own": [0, 93, 225, 228, 270, 274], "pipelin": [0, 44, 56, 98, 99, 140, 141, 145, 180, 181, 185, 190, 193, 229, 246, 271, 274], "softwar": [0, 44, 49, 64, 96, 98, 119, 129, 131, 136, 139, 181, 193, 226, 234, 235, 240, 241, 268], "tool": [0, 6, 24, 25, 28, 29, 31, 32, 33, 38, 41, 44, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 85, 86, 90, 91, 94, 103, 104, 117, 118, 126, 132, 141, 147, 150, 155, 156, 157, 158, 160, 161, 162, 165, 196, 197, 198, 211, 212, 213, 214, 215, 216, 219, 225, 226, 227, 229, 230, 267, 268, 270, 271, 272], "written": [0, 36, 37, 60, 93, 123, 150, 225, 257, 270, 274], "program": [0, 9, 42, 62, 94, 96, 229, 230, 271], "languag": [0, 49, 64, 96, 99, 119, 129, 131, 136, 139, 226, 229, 234, 235, 240, 241, 268, 270, 271], "like": [0, 4, 36, 37, 42, 62, 93, 94, 96, 99, 126, 150, 225, 257, 259], "python": [0, 10, 14, 23, 39, 40, 41, 42, 92, 93, 94, 106, 108, 109, 121, 141, 142, 146, 147, 150, 168, 233, 240, 256, 265, 269, 270, 271, 274], "java": [0, 270, 274], "r": [0, 39, 47, 96, 97, 99, 110, 150, 182, 189, 229, 231, 232, 240, 241, 246, 256, 257, 268, 270, 274], "pl": [0, 67, 99, 270, 274], "pgsql": [0, 67, 99, 270, 274], "etc": [0, 40, 42, 91, 93, 94, 98, 126, 144, 148, 174, 181, 182, 183, 189, 190, 193, 240, 244, 246], "remot": [0, 240], "sourc": [0, 1, 4, 7, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 35, 40, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 65, 66, 67, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 126, 127, 128, 130, 132, 133, 134, 135, 137, 138, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 170, 171, 172, 173, 174, 176, 179, 180, 181, 182, 183, 184, 185, 189, 190, 191, 192, 193, 195, 214, 223, 224, 225, 234, 235, 240, 244, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 268, 270, 274], "bulk": 0, "csv": [0, 11, 23, 31, 33, 36, 37, 39, 40, 48, 52, 54, 55, 63, 65, 91, 92, 93, 94, 99, 104, 118, 126, 135, 143, 150, 180, 181, 183, 185, 193, 196, 212, 213, 219, 254, 257, 259, 267, 268], "support": [0, 14, 20, 23, 35, 42, 99, 100, 105, 112, 225, 254, 270, 271], "format": [0, 4, 20, 23, 35, 37, 40, 41, 44, 51, 55, 58, 60, 79, 83, 91, 94, 98, 99, 104, 107, 110, 118, 129, 131, 136, 143, 144, 147, 148, 150, 152, 153, 155, 159, 180, 181, 183, 190, 193, 218, 251, 257, 267, 268, 270], "local": [0, 6, 93, 96, 140, 141, 147, 241, 274], "lightweight": [0, 7], "For": [0, 4, 6, 8, 13, 19, 23, 35, 36, 38, 40, 41, 47, 58, 80, 93, 94, 99, 126, 140, 141, 144, 148, 150, 168, 180, 183, 190, 192, 225, 228, 232, 251, 270], "i": [0, 4, 6, 7, 8, 9, 11, 12, 13, 14, 15, 17, 19, 20, 22, 23, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 51, 54, 60, 62, 64, 67, 68, 70, 73, 75, 77, 78, 79, 80, 81, 82, 85, 92, 93, 94, 96, 97, 98, 99, 101, 104, 106, 108, 112, 118, 119, 121, 123, 126, 128, 129, 131, 135, 136, 139, 141, 142, 143, 144, 146, 147, 148, 150, 151, 165, 171, 172, 174, 180, 181, 182, 189, 190, 193, 195, 224, 225, 228, 229, 230, 232, 234, 235, 240, 241, 246, 251, 254, 255, 256, 257, 261, 268, 271, 274], "choic": 0, "between": [0, 8, 40, 41, 42, 74, 79, 91, 93, 99, 134, 139, 154, 174, 185, 225, 270], "manual": [0, 7, 94, 225], "requir": [0, 4, 6, 7, 11, 19, 20, 23, 42, 44, 48, 49, 54, 56, 64, 69, 93, 98, 99, 106, 119, 129, 131, 136, 139, 144, 148, 150, 152, 153, 154, 155, 157, 159, 168, 180, 181, 183, 190, 193, 197, 198, 199, 202, 204, 207, 209, 213, 218, 221, 226, 227, 228, 229, 230, 232, 234, 235, 240, 241, 251, 270, 274], "convers": [0, 48, 54, 62], "transform": [0, 38, 62, 83, 150, 171, 172, 182, 189, 224, 257, 268], "infer": [0, 41, 91, 97, 99, 104, 115, 118, 152, 153, 154], "structur": [0, 10, 11, 23, 35, 36, 37, 41, 53, 93, 94, 126, 135, 143, 183, 190, 246, 267, 268], "base": [0, 7, 11, 23, 35, 36, 40, 41, 42, 48, 81, 91, 93, 94, 98, 101, 104, 126, 128, 135, 150, 228, 232, 240, 246, 257, 270, 274], "sampl": [0, 4, 9, 35, 42, 96, 99, 140, 228, 270], "discuss": [0, 40, 41, 270], "nsaph": [0, 32, 33, 34, 40, 41, 44, 47, 68, 69, 72, 75, 79, 80, 86, 89, 94, 102, 104, 105, 118, 119, 131, 134, 157, 160, 161, 163, 164, 166, 182, 183, 196, 211, 212, 216, 217, 234, 244, 267, 269], "platform": [0, 39, 96, 104, 169, 226, 246, 267], "exampl": [0, 6, 9, 10, 35, 36, 38, 40, 41, 80, 93, 94, 96, 98, 105, 108, 135, 144, 148, 150, 152, 154, 168, 180, 185, 190, 228, 231, 232, 251, 257], "medicar": [0, 37, 40, 46, 47, 51, 52, 53, 55, 56, 57, 58, 61, 79, 134, 235, 267, 268, 270, 271, 273], "medicaid": [0, 37, 41, 45, 46, 47, 49, 64, 68, 77, 93, 267, 268, 270, 271, 273], "actual": [0, 40, 41, 51, 54, 94, 98, 99, 183, 190, 225, 232, 270, 274], "defin": [0, 4, 11, 12, 14, 15, 17, 20, 22, 23, 38, 40, 41, 44, 46, 51, 67, 68, 75, 93, 96, 98, 99, 101, 104, 105, 112, 118, 121, 144, 147, 148, 151, 180, 181, 183, 185, 190, 193, 225, 226, 230, 251, 256, 261, 274], "respect": 0, "yaml": [0, 4, 11, 23, 35, 36, 37, 40, 44, 46, 51, 57, 60, 66, 85, 91, 92, 93, 94, 101, 104, 110, 118, 128, 135, 143, 151, 183, 191, 199, 204, 207, 209, 225, 228, 230, 232, 240], "To": [0, 4, 13, 23, 40, 41, 42, 47, 93, 94, 96, 143, 225, 228, 229, 230, 254, 274], "analyz": [0, 44, 47, 120, 137], "gener": [0, 6, 7, 36, 37, 41, 42, 44, 51, 53, 54, 56, 60, 61, 62, 91, 94, 98, 99, 101, 104, 106, 128, 135, 144, 147, 148, 150, 162, 180, 183, 229, 232, 246, 251, 255, 256, 264, 265, 267, 271, 272], "correspond": [0, 36, 38, 41, 48, 56, 99, 181, 182, 183, 185, 189, 190, 193, 225], "one": [0, 6, 7, 11, 12, 14, 15, 17, 22, 23, 35, 36, 38, 40, 41, 42, 44, 46, 51, 54, 67, 81, 82, 85, 93, 94, 96, 99, 101, 104, 112, 117, 118, 121, 143, 144, 148, 151, 168, 180, 183, 185, 190, 199, 204, 218, 225, 229, 234, 235, 240, 241, 251, 254, 255, 256, 261, 274], "can": [0, 4, 6, 7, 8, 11, 13, 14, 17, 23, 35, 36, 38, 39, 40, 41, 42, 44, 48, 62, 66, 91, 92, 93, 94, 96, 97, 98, 99, 104, 108, 109, 118, 123, 126, 135, 144, 148, 150, 151, 180, 181, 183, 185, 190, 193, 226, 228, 230, 232, 246, 251, 254, 261, 264, 270, 271], "us": [0, 1, 3, 4, 7, 8, 9, 11, 12, 14, 15, 17, 19, 20, 22, 23, 32, 33, 34, 35, 36, 37, 39, 40, 41, 42, 44, 46, 47, 49, 50, 51, 54, 56, 59, 62, 64, 67, 68, 71, 72, 73, 75, 76, 77, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 92, 93, 94, 98, 99, 101, 102, 104, 105, 108, 109, 111, 112, 118, 119, 120, 121, 123, 129, 131, 134, 135, 136, 139, 141, 142, 143, 146, 151, 160, 161, 162, 166, 167, 168, 170, 171, 172, 174, 177, 181, 182, 184, 185, 189, 190, 193, 196, 211, 212, 217, 224, 226, 227, 228, 229, 232, 234, 235, 240, 241, 246, 251, 255, 256, 257, 261, 262, 263, 274], "introspector": [0, 37, 60, 91, 140, 141], "It": [0, 6, 36, 38, 41, 42, 51, 52, 56, 66, 74, 75, 79, 85, 93, 94, 96, 98, 99, 104, 144, 148, 151, 154, 165, 213, 219, 225, 226, 228, 230, 232, 270, 274], "run": [0, 6, 7, 10, 11, 13, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 40, 44, 47, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 96, 98, 99, 101, 104, 112, 121, 126, 137, 140, 141, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 180, 183, 185, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 226, 228, 229, 230, 232, 234, 235, 240, 264, 270, 274], "standalon": [0, 44], "command": [0, 7, 10, 14, 17, 23, 37, 40, 41, 46, 52, 56, 65, 66, 91, 93, 96, 103, 104, 109, 118, 124, 126, 127, 137, 144, 147, 148, 180, 185, 190, 192, 195, 225, 227, 232, 234, 235, 240, 251, 261, 270, 274], "line": [0, 10, 14, 17, 23, 37, 41, 46, 48, 52, 54, 56, 65, 66, 91, 92, 93, 99, 103, 104, 109, 115, 118, 120, 124, 126, 127, 144, 147, 148, 150, 172, 180, 185, 190, 192, 195, 213, 219, 224, 225, 232, 251, 252, 257, 261, 270], "via": [0, 94, 105, 270, 274], "api": [0, 4, 9, 10, 13, 19, 20, 21, 23, 35, 36, 91, 128, 135, 142, 143, 144, 146, 152, 153, 155, 163, 165, 168, 184, 246, 270], "found": [0, 4, 36, 38, 41, 85, 94, 183, 241, 270], "epa": [0, 93, 119, 131, 140, 146, 150, 151, 155, 156, 158, 159, 162, 163, 164, 165, 167, 198, 234, 244, 268, 270, 271, 272, 273], "project": [0, 6, 7, 23, 40, 87, 91, 126, 152, 154, 183, 228, 234, 235, 236, 237, 238, 239, 240, 244, 252, 274], "loader": [0, 32, 33, 34, 35, 37, 40, 41, 53, 56, 59, 68, 72, 73, 86, 89, 93, 94, 102, 104, 118, 140, 141, 160, 161, 166, 196, 211, 212, 216, 217, 267], "also": [0, 7, 10, 13, 23, 36, 39, 40, 41, 42, 44, 47, 48, 52, 65, 74, 92, 93, 94, 99, 104, 109, 118, 147, 174, 183, 225, 226, 232, 270, 274], "repositori": [0, 7, 99, 228, 271], "github": [0, 1, 39, 47, 62, 96, 169, 182, 189, 225, 228, 232, 240, 256, 270], "other": [0, 11, 23, 36, 38, 40, 41, 47, 93, 99, 126, 150, 170, 225, 226, 232, 246, 270, 274], "control": [0, 226, 270, 274], "The": [0, 3, 4, 6, 7, 8, 9, 10, 23, 26, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 48, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 93, 94, 96, 99, 105, 141, 143, 147, 150, 152, 153, 154, 157, 160, 161, 166, 167, 172, 180, 181, 182, 183, 196, 199, 204, 207, 209, 211, 212, 213, 216, 217, 218, 219, 222, 224, 225, 228, 230, 232, 234, 235, 240, 241, 246, 267, 268, 270, 274], "process": [0, 6, 33, 36, 37, 38, 44, 47, 56, 58, 59, 60, 62, 69, 75, 76, 78, 93, 97, 99, 108, 117, 121, 123, 134, 140, 141, 143, 157, 161, 167, 171, 172, 175, 180, 181, 183, 185, 190, 193, 196, 197, 199, 202, 204, 207, 209, 212, 213, 218, 229, 230, 232, 271, 274], "an": [0, 4, 6, 9, 10, 11, 13, 23, 35, 36, 37, 38, 39, 40, 41, 42, 47, 48, 49, 58, 64, 70, 71, 91, 92, 93, 94, 96, 98, 99, 101, 104, 108, 118, 119, 129, 131, 135, 136, 139, 144, 147, 148, 150, 168, 171, 174, 181, 182, 189, 190, 193, 195, 225, 226, 228, 229, 230, 234, 235, 240, 241, 246, 254, 256, 257, 261, 262, 263, 264, 268, 270, 274], "describ": [0, 4, 11, 23, 37, 41, 44, 54, 63, 76, 93, 94, 96, 98, 144, 147, 148, 180, 181, 182, 189, 190, 193, 225, 226, 227, 232, 251, 254, 256, 267, 274], "In": [0, 4, 6, 7, 9, 35, 36, 38, 41, 47, 94, 97, 98, 99, 126, 143, 145, 150, 225, 228, 232, 240, 257, 274], "case": [0, 40, 41, 61, 62, 139, 150, 225, 229, 257], "mean": [0, 41, 93, 171, 172, 175, 176, 182, 185, 189, 190, 199, 204, 207, 213, 219, 224, 232, 256], "first": [0, 35, 40, 62, 81, 82, 93, 96, 105, 143, 144, 150, 168, 181, 190, 193, 225, 228, 230, 232, 257, 274], "json": [0, 35, 91, 94, 99, 104, 109, 118, 124, 126, 131, 135, 143], "fst": [0, 39, 91, 92, 93, 94, 99, 104, 118, 126, 135, 246, 259, 268, 270], "some": [0, 4, 10, 35, 36, 40, 41, 62, 67, 94, 98, 99, 108, 147, 150, 174, 225, 227, 228, 229, 232, 256, 257, 270], "howev": [0, 6, 36, 40, 41, 85, 93, 99, 225, 229, 232, 254], "simpl": [0, 37, 38, 40, 55, 190, 228, 232], "either": [0, 4, 7, 19, 23, 38, 41, 42, 44, 48, 49, 64, 66, 93, 96, 104, 118, 119, 129, 131, 136, 139, 150, 151, 152, 153, 154, 155, 156, 158, 159, 225, 234, 235, 240, 241, 254, 256, 274], "just": [0, 42, 67, 94, 97, 99, 135, 225, 232], "done": [0, 39, 40, 42, 96, 225, 232, 240, 241, 244, 246, 274], "dryrun": [0, 94, 101, 104], "argument": [0, 12, 14, 15, 17, 22, 23, 46, 47, 52, 65, 67, 92, 93, 94, 101, 104, 108, 112, 118, 121, 126, 127, 140, 141, 147, 151, 167, 168, 183, 185, 190, 195, 225, 251, 261], "see": [0, 6, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 47, 48, 49, 52, 62, 64, 65, 79, 80, 88, 93, 94, 96, 99, 106, 119, 129, 131, 136, 139, 141, 143, 144, 147, 148, 152, 153, 154, 155, 156, 158, 159, 172, 174, 182, 183, 189, 192, 224, 225, 227, 228, 234, 235, 240, 241, 246, 255, 264, 270], "detail": [0, 4, 6, 36, 40, 41, 44, 47, 48, 79, 80, 88, 93, 99, 105, 109, 182, 189, 192, 225, 227, 228, 232, 268, 270], "glossari": [1, 10, 227, 270], "show_api_kei": [1, 10, 21, 23], "public": [1, 9, 35, 38, 49, 61, 62, 64, 70, 71, 96, 97, 99, 111, 129, 136, 138, 139, 225, 274], "folder": [1, 7, 44, 80, 150, 183, 225, 241, 257], "hold": [1, 99, 246, 270], "webpag": 1, "document": [1, 6, 7, 10, 11, 12, 14, 15, 17, 22, 23, 35, 36, 37, 40, 41, 42, 46, 47, 61, 67, 79, 88, 93, 96, 98, 101, 104, 112, 118, 121, 141, 144, 148, 150, 151, 180, 183, 185, 232, 251, 257, 261, 267], "gitlab": [1, 6, 7, 39, 61], "doc": [1, 6, 14, 23, 44, 46, 67, 99, 101, 104, 108, 112, 118, 121, 141, 142, 143, 144, 146, 148, 151, 180, 185, 249], "set": [1, 4, 10, 11, 13, 19, 23, 35, 36, 37, 47, 80, 93, 94, 95, 96, 98, 99, 104, 118, 126, 128, 181, 193, 228, 229, 236, 237, 238, 239, 240, 256, 270, 274], "up": [1, 10, 11, 23, 35, 62, 96, 119, 141, 142, 146, 147, 228, 229, 232], "environ": [1, 10, 13, 23, 35, 36, 99, 140, 141, 226, 228, 229, 230, 232, 234, 235, 240, 246, 270, 274], "page": [1, 6, 33, 39, 40, 75, 76, 92, 93, 94, 104, 118, 132, 161, 196, 212, 227, 270], "get_censu": [1, 4, 7], "censu": [1, 3, 9, 11, 13, 14, 16, 19, 20, 21, 23, 24, 25, 28, 29, 31, 35, 62, 93, 96, 131, 140, 141, 169, 173, 221, 234, 244, 270, 271, 272], "reorgan": 1, "import": [1, 6, 35, 91, 99, 100, 108, 119, 124, 131, 225, 274], "docsourc": 1, "move": [1, 36, 40, 41, 99, 246, 255], "makefil": 1, "action": [1, 61, 62, 68, 93, 104, 106, 118], "make": [1, 4, 6, 7, 11, 23, 34, 36, 41, 89, 166, 217, 225, 226, 246, 274], "tbd": [2, 5], "packag": [3, 4, 6, 7, 8, 10, 14, 23, 35, 39, 44, 50, 98, 107, 167, 182, 183, 189, 225, 227, 229, 240, 269, 271, 274], "contain": [3, 11, 12, 13, 14, 15, 17, 19, 22, 23, 36, 37, 38, 40, 41, 44, 46, 54, 67, 69, 73, 75, 76, 79, 80, 85, 92, 93, 94, 98, 99, 101, 104, 105, 108, 110, 112, 118, 121, 123, 126, 135, 141, 142, 144, 146, 147, 148, 150, 151, 154, 157, 169, 170, 171, 172, 180, 181, 182, 183, 184, 185, 189, 190, 193, 213, 218, 219, 226, 229, 230, 236, 237, 251, 255, 256, 261, 264, 267, 270, 274], "frame": [3, 11, 18, 20, 23, 36, 170, 255, 264], "list": [3, 4, 6, 11, 13, 18, 19, 23, 35, 40, 41, 48, 51, 52, 53, 54, 60, 62, 63, 93, 98, 104, 106, 110, 114, 115, 117, 120, 121, 128, 133, 134, 135, 143, 144, 145, 147, 148, 149, 150, 152, 153, 154, 155, 156, 158, 159, 168, 170, 180, 181, 182, 183, 184, 185, 189, 190, 193, 232, 240, 241, 246, 251, 252, 254, 255, 257, 259, 264], "all": [3, 4, 6, 9, 11, 13, 18, 23, 32, 35, 36, 38, 39, 40, 41, 42, 44, 47, 60, 62, 72, 77, 78, 85, 86, 91, 93, 94, 97, 99, 117, 126, 136, 144, 147, 148, 150, 160, 168, 172, 180, 181, 190, 193, 211, 216, 224, 225, 226, 230, 241, 251, 256, 270, 274], "state": [3, 9, 11, 18, 19, 23, 24, 30, 35, 38, 40, 41, 42, 44, 47, 49, 51, 61, 62, 64, 79, 81, 82, 91, 97, 98, 99, 107, 109, 120, 121, 134, 139, 143, 154, 226, 229], "counti": [3, 9, 11, 18, 19, 23, 24, 30, 36, 38, 40, 51, 62, 79, 93, 97, 99, 111, 131, 134, 140, 141, 143, 145, 154, 165, 170, 171, 172, 175, 181, 182, 183, 189, 190, 193, 198, 199, 202, 204, 207, 209, 213, 218, 219, 220, 221], "fip": [3, 11, 18, 19, 23, 38, 40, 62, 74, 79, 91, 93, 95, 97, 99, 134, 138, 154, 170, 190, 213, 219], "code": [3, 4, 6, 7, 11, 18, 19, 20, 23, 35, 37, 38, 40, 42, 44, 47, 51, 61, 62, 74, 79, 91, 93, 94, 99, 109, 120, 134, 139, 143, 144, 145, 147, 148, 150, 152, 153, 154, 155, 156, 158, 159, 168, 170, 171, 181, 182, 183, 189, 190, 193, 199, 202, 204, 207, 209, 213, 218, 219, 220, 221, 225, 230, 232, 246, 270, 274], "primarili": [3, 67, 174, 185], "intern": [3, 35, 39, 40, 44, 47, 62, 79, 88, 141, 143, 167, 177, 225, 257, 271], "creat": [4, 7, 9, 11, 12, 14, 15, 17, 20, 22, 23, 33, 35, 36, 37, 39, 40, 44, 46, 47, 48, 49, 52, 61, 62, 64, 66, 67, 68, 70, 73, 75, 77, 78, 79, 80, 81, 82, 83, 85, 88, 91, 94, 95, 97, 99, 101, 104, 106, 109, 111, 112, 118, 119, 120, 121, 126, 129, 134, 136, 144, 147, 148, 150, 151, 152, 153, 154, 155, 161, 162, 170, 180, 190, 191, 195, 196, 199, 204, 212, 218, 228, 229, 240, 241, 251, 255, 256, 257, 261, 262, 263, 268, 270, 271], "data": [4, 9, 10, 11, 13, 18, 19, 20, 23, 27, 30, 31, 32, 34, 35, 36, 38, 46, 47, 49, 51, 52, 53, 54, 56, 57, 59, 60, 61, 62, 64, 65, 66, 72, 75, 78, 79, 84, 85, 86, 87, 88, 89, 90, 91, 94, 96, 98, 101, 104, 106, 108, 115, 118, 119, 120, 126, 134, 135, 140, 142, 143, 144, 146, 147, 148, 150, 151, 152, 153, 154, 159, 160, 166, 167, 168, 169, 170, 171, 180, 181, 182, 183, 184, 185, 189, 190, 191, 193, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 220, 221, 226, 234, 235, 246, 255, 256, 257, 258, 264, 267, 268, 272], "must": [4, 11, 12, 14, 15, 17, 22, 23, 42, 46, 56, 67, 68, 80, 93, 98, 99, 101, 104, 112, 118, 121, 143, 144, 148, 151, 180, 183, 190, 225, 228, 229, 230, 251, 261], "formal": [4, 41], "each": [4, 9, 11, 23, 35, 36, 37, 40, 41, 44, 58, 60, 80, 81, 82, 85, 93, 94, 96, 98, 126, 143, 185, 199, 204, 207, 213, 218, 219, 225, 229, 230, 254, 255, 256, 267, 274], "top": [4, 44, 99, 225], "level": [4, 40, 44, 94, 99, 123, 126, 227, 258], "entri": [4, 93, 115, 120, 126, 135, 150, 257], "thi": [4, 6, 7, 9, 10, 11, 13, 14, 17, 20, 23, 32, 33, 34, 35, 36, 37, 40, 41, 42, 44, 47, 49, 51, 52, 56, 62, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 96, 97, 98, 99, 104, 105, 108, 112, 115, 118, 119, 123, 126, 129, 131, 135, 136, 137, 139, 143, 144, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 169, 171, 172, 174, 180, 181, 183, 185, 190, 191, 193, 196, 197, 198, 199, 204, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 225, 227, 228, 229, 230, 231, 232, 234, 235, 240, 241, 246, 251, 255, 257, 261, 270, 274], "var_nam": 4, "num": [4, 11, 23, 35, 254, 257], "numerator_variable_1": 4, "numerator_variable_2": 4, "den": [4, 11, 23, 35], "denominator_variable_1": 4, "denominator_variable_2": 4, "These": [4, 35, 37, 40, 41, 44, 58, 225, 226, 229, 267], "descript": [4, 12, 14, 15, 17, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 38, 44, 46, 48, 61, 62, 67, 93, 94, 101, 104, 112, 118, 121, 140, 144, 148, 151, 180, 183, 200, 201, 203, 205, 206, 208, 210, 227, 251, 261, 268, 270], "provid": [4, 9, 10, 13, 23, 35, 37, 40, 44, 62, 73, 75, 76, 79, 80, 93, 94, 97, 99, 104, 126, 128, 135, 141, 150, 154, 165, 170, 219, 226, 227, 229, 232, 254, 257, 259, 267, 270, 274], "instruct": [4, 93, 147, 228, 232], "which": [4, 7, 11, 13, 23, 41, 54, 93, 144, 148, 150, 174, 180, 182, 183, 185, 189, 190, 198, 225, 232, 270, 274], "ask": [4, 10], "from": [4, 6, 7, 11, 12, 14, 15, 17, 19, 22, 23, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 49, 54, 56, 58, 61, 62, 64, 65, 67, 70, 75, 76, 81, 82, 86, 91, 93, 95, 96, 97, 99, 101, 103, 104, 108, 109, 112, 118, 121, 126, 127, 128, 129, 131, 134, 135, 136, 138, 139, 140, 141, 143, 144, 147, 148, 150, 151, 152, 153, 154, 155, 156, 158, 163, 168, 170, 173, 176, 180, 182, 183, 185, 189, 190, 195, 197, 198, 216, 221, 225, 226, 228, 229, 230, 240, 246, 251, 256, 257, 261, 267, 270, 271, 273, 274], "how": [4, 11, 23, 36, 42, 93, 98, 114, 119, 129, 144, 147, 148, 227, 228, 232, 246], "calcul": [4, 11, 23, 36, 41, 62, 120, 172, 185, 199, 204, 207, 224, 230, 256], "desir": [4, 11, 23, 36, 150, 257], "inform": [4, 6, 9, 11, 12, 14, 15, 17, 20, 22, 23, 33, 35, 36, 37, 38, 39, 40, 41, 46, 47, 62, 67, 75, 76, 79, 88, 93, 97, 99, 101, 104, 112, 118, 121, 134, 143, 144, 148, 151, 161, 172, 180, 196, 212, 232, 234, 235, 240, 241, 251, 255, 261, 267, 268, 270], "avail": [4, 7, 9, 13, 23, 35, 36, 39, 41, 62, 97, 99, 104, 118, 181, 182, 189, 193, 229, 236, 237, 238, 239, 270], "user": [4, 7, 9, 35, 47, 91, 94, 96, 105, 110, 119, 128, 143, 144, 147, 148, 150, 226, 228, 232, 234, 235, 270, 274], "chosen": [4, 270], "name": [4, 7, 9, 11, 12, 14, 15, 17, 19, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 41, 46, 48, 53, 54, 56, 61, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 99, 101, 103, 104, 106, 107, 108, 110, 112, 114, 115, 117, 118, 120, 121, 123, 126, 129, 130, 135, 143, 144, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 170, 180, 181, 182, 183, 185, 189, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 225, 230, 231, 233, 234, 235, 240, 249, 251, 254, 255, 257, 261, 262, 263, 264], "specif": [4, 6, 40, 49, 64, 91, 93, 94, 98, 99, 110, 119, 128, 129, 131, 136, 139, 148, 150, 176, 181, 185, 193, 225, 232, 234, 235, 240, 241, 246, 257, 270, 274], "should": [4, 6, 11, 20, 23, 42, 44, 75, 80, 93, 96, 98, 99, 150, 181, 193, 225, 227, 230, 232, 255, 257], "closest": [4, 181, 182, 189, 193], "input": [4, 11, 19, 23, 41, 46, 52, 65, 93, 104, 118, 140, 141, 150, 170, 183, 256, 257, 264], "current": [4, 6, 7, 9, 11, 20, 23, 35, 41, 93, 94, 98, 99, 121, 259], "after": [4, 7, 11, 23, 33, 35, 36, 40, 47, 48, 75, 76, 99, 135, 161, 196, 212, 228, 232], "ac": [4, 9, 11, 23, 35, 36], "If": [4, 7, 8, 11, 12, 14, 15, 17, 22, 23, 35, 38, 40, 41, 42, 46, 47, 67, 85, 93, 94, 96, 98, 101, 104, 112, 118, 121, 143, 144, 148, 150, 151, 180, 190, 225, 228, 231, 232, 251, 254, 255, 256, 257, 261], "know": [4, 11, 23, 35, 40, 225], "call": [4, 11, 23, 36, 38, 40, 41, 47, 70, 71, 91, 93, 94, 103, 108, 143, 150, 181, 193, 225, 241, 255], "decenni": [4, 9, 11, 13, 23, 35, 36], "5": [4, 6, 9, 11, 23, 40, 41, 61, 62, 111, 143, 172, 182, 185, 189, 218, 224, 234, 235], "As": [4, 7, 40, 41, 62], "remind": 4, "2000": [4, 11, 13, 19, 23, 35, 36, 62, 199, 204, 207, 218], "2010": [4, 11, 23, 37, 58, 59, 62, 139, 185, 199, 204, 218], "2009": [4, 11, 23, 36, 185, 199, 204, 218], "2018": [4, 9, 11, 23, 41, 56, 134, 163, 199, 204, 207, 218], "present": [4, 93, 274], "ar": [4, 6, 7, 8, 9, 11, 19, 23, 35, 36, 37, 39, 40, 41, 42, 44, 58, 67, 69, 74, 75, 80, 81, 85, 93, 94, 96, 97, 99, 105, 108, 117, 126, 144, 147, 148, 150, 157, 180, 181, 182, 183, 189, 193, 198, 225, 228, 246, 251, 254, 255, 256, 257, 267, 270, 271, 274], "alwai": [4, 41, 61, 62, 93, 225, 234, 235], "sum": [4, 41], "divid": [4, 11, 23], "valu": [4, 11, 12, 14, 15, 17, 22, 23, 38, 40, 41, 46, 47, 49, 52, 54, 64, 65, 67, 93, 98, 101, 104, 112, 118, 121, 134, 141, 143, 144, 148, 150, 151, 169, 172, 174, 175, 176, 179, 180, 184, 185, 190, 193, 199, 204, 207, 213, 218, 219, 223, 224, 225, 236, 237, 238, 239, 251, 254, 255, 256, 257, 261, 264, 268], "report": [4, 47, 54, 61, 62, 85, 91], "here": [4, 6, 7, 9, 19, 23, 35, 42, 44, 47, 93, 96, 99, 182, 189, 225], "numer": [4, 11, 23, 35, 37, 38, 40, 41, 48, 62, 93, 123, 141, 152, 153, 154, 155, 156, 158, 159, 256, 267], "produc": [4, 40, 96, 135, 144, 148, 168, 180, 183, 213, 219, 251, 254], "final": [4, 230], "popul": [4, 9, 11, 23, 25, 35, 36, 44, 62, 67, 75, 93], "black": 4, "blk_pct": 4, "p007003": 4, "p007001": 4, "b02001_003": 4, "b02001_001": 4, "p006003": 4, "p006001": 4, "back": [4, 232], "Then": [4, 56, 98, 181, 193, 225], "2011": [4, 11, 23, 35, 56, 80, 134, 144, 148, 168, 180, 183, 199, 202, 204, 207, 218, 251], "median": 4, "household": [4, 9], "incom": [4, 39, 40, 52, 65, 87, 93, 94, 126, 131, 170, 235], "median_household_incom": [4, 131], "p053001": 4, "b19013_001": 4, "note": [4, 11, 20, 23, 35, 36, 40, 41, 56, 96, 141, 230], "lack": 4, "denomin": [4, 11, 23, 41, 58], "wa": [4, 37, 39, 40, 41, 62, 99], "miss": [4, 11, 23, 36, 40, 41, 47, 62, 97, 141, 255, 256], "so": [4, 85, 91], "instead": [4, 19, 23, 42, 96, 229, 230, 274], "sometim": [4, 8, 40, 41, 225], "you": [4, 6, 7, 8, 11, 13, 19, 23, 35, 36, 42, 49, 64, 96, 119, 129, 131, 136, 139, 183, 227, 228, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 271], "mai": [4, 7, 11, 23, 35, 36, 49, 64, 119, 129, 131, 136, 139, 225, 234, 235, 240, 241], "want": [4, 7, 11, 13, 19, 23, 35, 42, 96, 225, 228], "get": [4, 6, 7, 20, 23, 35, 36, 42, 96, 106, 232], "given": [4, 13, 19, 23, 40, 41, 47, 52, 54, 59, 60, 62, 80, 94, 96, 97, 98, 99, 104, 105, 108, 117, 118, 121, 126, 135, 150, 171, 173, 174, 181, 182, 183, 185, 189, 190, 193, 199, 204, 207, 213, 218, 220, 221, 254], "most": [4, 6, 39, 40, 41, 51, 92, 93, 94, 96, 99, 104, 118, 144, 148, 190, 225, 228, 229, 232, 274], "common": [4, 37, 51, 57, 60, 83, 91, 104, 141, 144, 148, 226, 228, 268, 270, 274], "reason": [4, 41, 62, 225, 232], "do": [4, 6, 7, 8, 36, 39, 40, 41, 42, 51, 55, 93, 94, 96, 98, 99, 100, 101, 104, 118, 183, 199, 204, 207, 218, 225, 232, 236, 237, 238, 239, 240, 241, 244, 246], "when": [4, 6, 35, 36, 38, 40, 41, 44, 47, 61, 62, 93, 94, 96, 99, 108, 139, 150, 232, 254, 255, 257, 261, 262, 263, 264, 274], "work": [4, 6, 10, 35, 42, 44, 91, 143, 169, 174, 225, 228, 230, 232, 234, 235, 240, 241, 270, 274], "zcta": [4, 9, 19, 23, 141], "acs5": [4, 9, 11, 13, 19, 23], "despit": [4, 36], "being": [4, 40, 41, 75, 86, 94, 126, 150, 216, 256, 257, 270, 274], "those": [4, 6, 40, 42, 47, 150, 232, 246, 257], "further": [4, 214], "complic": 4, "thing": [4, 93], "handl": [4, 13, 14, 17, 23, 44, 56, 58, 59, 60, 80, 91, 93, 99, 104, 118, 141, 144, 148, 180, 185, 251, 261], "try": [4, 8, 37, 96, 183, 228], "queri": [4, 10, 11, 20, 34, 36, 40, 41, 43, 44, 45, 62, 89, 91, 99, 110, 150, 166, 217, 257, 268, 270], "hit": 4, "error": [4, 32, 33, 34, 40, 68, 69, 72, 75, 83, 85, 86, 89, 90, 96, 98, 99, 108, 143, 161, 162, 166, 196, 197, 211, 212, 213, 214, 215, 216, 217, 219, 231, 264, 268], "fail": [4, 41, 230, 232, 234, 235, 254], "specifi": [4, 11, 12, 13, 14, 15, 17, 19, 22, 23, 32, 33, 36, 42, 46, 48, 52, 65, 67, 72, 75, 76, 92, 93, 94, 98, 101, 104, 105, 110, 112, 118, 121, 141, 143, 144, 147, 148, 150, 151, 160, 161, 180, 185, 190, 195, 196, 211, 212, 225, 241, 251, 257, 261, 262, 263, 274], "your": [4, 6, 7, 11, 13, 19, 23, 35, 36, 42, 96, 225, 228, 230, 232], "write": [4, 11, 23, 33, 36, 42, 49, 64, 66, 75, 76, 92, 93, 94, 96, 104, 118, 119, 129, 131, 136, 139, 143, 150, 151, 161, 196, 199, 204, 207, 209, 212, 215, 225, 234, 235, 240, 241, 257], "poverti": 4, "rate": 4, "might": [4, 13, 23, 40, 42, 94, 96, 225, 230, 232, 274], "look": [4, 35, 36, 37, 38, 56, 58, 59, 60, 73, 75, 76, 79, 80, 85, 91, 150, 225, 230, 232, 257, 270], "someth": [4, 42], "p001001": [4, 35], "b01001_001": 4, "p087002": 4, "p087001": 4, "b17001_002": 4, "b17001_001": 4, "onli": [4, 6, 7, 11, 20, 23, 36, 40, 41, 93, 121, 150, 180, 183, 185, 190, 199, 204, 207, 209, 213, 225, 228, 230, 232, 255, 256, 270], "assembl": [4, 11, 23, 30, 36], "read": [4, 9, 18, 23, 35, 41, 44, 48, 54, 56, 60, 80, 93, 96, 99, 108, 134, 135, 150, 232, 240, 241, 246, 254, 257, 267, 270], "through": [4, 6, 7, 9, 20, 23, 36, 42, 62, 190, 225, 274], "quit": 4, "tediou": 4, "especi": [4, 225, 229, 232], "figur": [4, 41, 98], "out": [4, 11, 21, 23, 36, 41, 52, 65, 93, 98, 99, 108, 268, 274], "more": [4, 6, 9, 34, 35, 36, 40, 41, 44, 47, 48, 89, 94, 96, 99, 143, 144, 148, 152, 153, 154, 155, 156, 158, 159, 166, 180, 182, 189, 190, 217, 225, 234, 235, 240, 241, 251, 255, 268, 270, 271], "complex": [4, 270], "estim": [4, 9, 35], "link": [4, 35, 96, 99, 104, 270], "sf1": [4, 9, 13, 19, 23], "whole": [4, 99, 104, 118, 147, 190, 232], "u": [4, 7, 9, 10, 18, 23, 36, 39, 40, 41, 42, 61, 62, 91, 92, 94, 96, 98, 99, 109, 120, 173, 183, 221, 225, 234, 235, 240, 268], "question": [4, 10, 36, 246], "http": [4, 6, 9, 35, 38, 39, 47, 49, 61, 62, 64, 93, 96, 108, 109, 119, 120, 129, 131, 134, 136, 138, 139, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 155, 159, 163, 164, 169, 173, 174, 181, 182, 189, 193, 197, 198, 199, 202, 204, 207, 209, 213, 218, 221, 225, 228, 230, 232, 234, 235, 236, 237, 238, 239, 240, 241, 256, 257], "gov": [4, 9, 35, 62, 93, 109, 138, 141, 147, 148, 150, 173], "html": [4, 9, 62, 99, 108, 138, 147, 150, 174, 182, 189], "sf3": [4, 9, 13, 19, 23], "smaller": 4, "www": [4, 9, 38, 49, 62, 64, 93, 109, 119, 129, 131, 134, 136, 138, 139, 141, 147, 148, 150, 173, 181, 182, 189, 193, 234, 235, 240, 241], "develop": [4, 7, 8, 40, 47, 49, 64, 97, 99, 119, 129, 131, 136, 139, 227, 232, 244, 255, 270, 271], "becaus": [4, 62, 67, 84, 99, 143, 225, 231], "cours": 4, "thei": [4, 9, 35, 41, 44, 92, 93, 94, 99, 104, 117, 118, 225, 232, 274], "re": [4, 19, 23, 246], "consist": [4, 40, 41, 47, 54, 62, 93, 135, 190, 229, 246, 270], "dec": [4, 9, 11, 13, 19, 23, 35], "5year": 4, "ani": [6, 7, 32, 33, 36, 40, 41, 47, 49, 53, 55, 64, 85, 92, 93, 94, 96, 104, 108, 118, 119, 126, 129, 131, 135, 136, 139, 144, 148, 190, 196, 201, 206, 208, 211, 212, 220, 221, 225, 232, 234, 235, 240, 241, 270, 274], "kind": [6, 40, 49, 64, 93, 119, 129, 131, 136, 139, 234, 235, 240, 241], "welcom": 6, "test": [6, 7, 11, 23, 37, 52, 115, 143, 185, 199, 204, 207, 209, 213, 225, 227, 228, 234, 235, 261, 262, 263, 264, 270], "improv": [6, 8], "add": [6, 7, 11, 23, 41, 49, 61, 64, 120, 147, 150, 170, 225, 264], "new": [6, 10, 11, 12, 14, 15, 17, 22, 23, 36, 38, 39, 40, 41, 46, 47, 67, 94, 101, 104, 108, 112, 118, 120, 121, 129, 144, 147, 148, 151, 180, 190, 195, 225, 229, 251, 256, 261, 271], "featur": [6, 7, 20, 23, 106, 246, 274], "fix": [6, 41, 48, 55, 108, 225, 254, 267], "bug": 6, "request": [6, 19, 23, 35, 62, 110, 128], "pleas": [6, 7, 35, 36, 41, 44, 56, 225, 232, 270], "refer": [6, 38, 40, 47, 61, 62, 93, 150, 170, 176, 185, 232, 257, 268], "issu": [6, 62, 84, 264], "step": [6, 7, 40, 44, 69, 103, 140, 141, 157, 183, 225, 227, 229, 232, 270, 274], "consid": [6, 40], "1": [6, 9, 35, 40, 41, 45, 49, 61, 62, 64, 92, 93, 94, 99, 107, 119, 131, 136, 138, 139, 141, 174, 182, 183, 189, 193, 218, 225, 228, 231, 236, 237, 243, 245, 246, 259, 274], "copi": [6, 36, 41, 49, 56, 64, 91, 96, 103, 119, 123, 129, 131, 136, 139, 225, 232, 234, 235, 240, 241, 274], "updat": [6, 10, 11, 23, 37, 66, 70, 74, 80, 93, 94, 96, 104, 118, 141, 151, 167, 191, 225, 228, 244, 246, 255, 274], "repo": [6, 225, 240], "start": [6, 10, 12, 14, 15, 17, 22, 23, 36, 37, 40, 46, 48, 54, 67, 94, 101, 104, 112, 118, 121, 144, 148, 151, 152, 153, 155, 159, 168, 180, 225, 227, 228, 251, 254, 259, 261, 267], "branch": 6, "git": [6, 96, 169, 228, 232, 244, 274], "clone": [6, 225, 228, 232], "int": [6, 13, 19, 23, 33, 41, 45, 48, 49, 54, 58, 59, 60, 61, 62, 64, 75, 76, 93, 97, 105, 106, 108, 114, 115, 117, 120, 121, 131, 134, 136, 138, 139, 149, 150, 161, 173, 181, 182, 189, 193, 196, 212, 218, 220, 221, 252, 254, 255, 256, 257, 258, 259], "rc": [6, 7, 39, 49, 61, 64, 119, 129, 131, 136, 139, 183, 232, 270, 274], "fa": [6, 39, 49, 61, 64, 119, 129, 131, 136, 139, 183, 232, 270, 274], "harvard": [6, 39, 49, 61, 64, 119, 129, 131, 136, 139, 183, 232, 270, 274], "edu": [6, 39, 61, 96, 105, 181, 183, 193], "rse": [6, 61], "francesca_dominici": [6, 61], "getcensu": 6, "alreadi": [6, 39, 41, 75, 81, 82, 88, 92, 93, 94, 99, 104, 118, 150, 181, 193, 225, 229, 246, 257], "have": [6, 7, 9, 35, 36, 38, 40, 41, 44, 47, 58, 75, 92, 93, 94, 96, 97, 104, 118, 126, 143, 150, 183, 190, 225, 228, 230, 231, 232, 246, 254, 256, 261, 262, 263, 270, 274], "directori": [6, 20, 23, 41, 44, 46, 52, 56, 65, 73, 75, 76, 79, 80, 85, 87, 91, 92, 93, 96, 99, 101, 104, 118, 126, 143, 144, 148, 150, 162, 165, 168, 180, 181, 182, 183, 185, 189, 190, 193, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 218, 219, 220, 221, 225, 228, 257], "veri": [6, 8, 40, 93, 98, 274], "keep": [6, 225, 228, 230, 232], "dev": [6, 240], "fetch": [6, 228, 274], "checkout": [6, 244], "origin": [6, 9, 35, 40, 41, 47, 51, 52, 54, 56, 61, 93, 182, 189, 193, 232], "pull": [6, 232, 244], "b": [6, 49, 51, 62, 64, 80, 150, 182, 189, 240, 257], "new_branch": 6, "2": [6, 11, 19, 23, 39, 40, 45, 49, 61, 62, 64, 79, 93, 99, 100, 102, 105, 111, 119, 120, 129, 131, 136, 138, 139, 141, 154, 174, 176, 185, 218, 228, 234, 235, 240, 241, 243, 245, 246, 256], "modif": [6, 94, 101, 104], "choos": 6, "topic": [6, 9, 41, 182, 189], "sure": [6, 7, 225], "polish": 6, "expect": [6, 45, 79, 80, 94, 99, 147, 181, 183, 184, 193, 264], "chang": [6, 9, 35, 40, 41, 47, 183, 228, 232], "codebas": 6, "mix": 6, "extrem": 6, "time": [6, 32, 35, 36, 40, 44, 72, 141, 142, 146, 148, 150, 160, 199, 204, 207, 211, 213, 218, 225, 228, 232, 255], "consum": 6, "accept": [6, 93, 108, 185], "modifi": [6, 94, 150], "ad": [6, 7, 40, 41, 62, 93, 96, 123, 150, 170, 271], "function": [6, 7, 10, 11, 13, 14, 19, 21, 23, 36, 38, 42, 44, 47, 50, 62, 74, 93, 94, 95, 99, 113, 126, 135, 150, 174, 182, 189, 225, 255, 256, 257, 274], "relat": [6, 41, 93, 169, 175, 229, 231], "3": [6, 11, 19, 23, 40, 42, 45, 61, 62, 93, 108, 111, 121, 138, 139, 182, 184, 185, 189, 190, 218, 233, 234, 235, 240, 245, 255], "unit": [6, 36, 97, 141, 174], "pass": [6, 19, 23, 36, 41, 93, 108, 144, 148, 180, 251, 264], "todo": [6, 9], "need": [6, 7, 9, 11, 13, 19, 23, 35, 36, 42, 93, 96, 141, 199, 204, 207, 218, 226, 228, 230, 271], "4": [6, 33, 39, 40, 41, 45, 61, 62, 75, 76, 94, 96, 138, 161, 181, 182, 183, 189, 190, 193, 196, 212, 218, 225, 234, 235, 255], "changelog": [6, 10], "md": [6, 62], "file": [6, 7, 9, 10, 11, 18, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 42, 44, 46, 47, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 101, 104, 105, 108, 110, 115, 117, 118, 119, 123, 124, 126, 129, 131, 132, 135, 136, 139, 140, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 168, 169, 170, 173, 180, 181, 182, 183, 184, 185, 189, 190, 193, 196, 197, 198, 199, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 217, 218, 228, 230, 232, 240, 241, 243, 246, 254, 257, 259, 268, 270, 271, 274], "understand": [6, 42, 47, 96], "what": [6, 8, 11, 23, 35, 48, 93, 96, 117, 129, 144, 148, 171, 180, 185, 246, 271], "ha": [6, 35, 38, 40, 41, 42, 47, 54, 67, 93, 98, 106, 134, 143, 150, 181, 183, 190, 193, 225, 229, 230, 256, 257, 274], "happen": [6, 41, 96, 105], "submit": [6, 108], "merg": [6, 36], "recent": 6, "implement": [6, 11, 14, 17, 23, 35, 41, 91, 93, 98, 104, 108, 118, 126, 144, 148, 180, 181, 182, 185, 189, 193, 225, 226, 246, 251, 256, 261, 274], "ey": 6, "accordingli": 6, "earlier": 6, "befor": [6, 67, 94, 96, 99, 181, 182, 189, 193, 221, 274], "complet": [6, 36, 41, 228], "finish": 6, "help": [6, 36, 92, 93, 94, 135, 144, 148, 168, 180, 183, 229, 251], "feedback": 6, "group": [6, 9, 20, 23, 40, 41, 42, 61, 62, 70, 71, 80, 93, 98, 107, 110, 131, 139, 141, 182, 189, 197], "ci": 6, "ensur": [6, 69, 74, 79, 80, 96, 124, 154, 157, 225, 274], "right": [6, 36, 230, 258], "path": [6, 11, 23, 26, 30, 32, 33, 34, 36, 40, 41, 46, 48, 56, 59, 60, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 101, 103, 104, 110, 115, 118, 126, 135, 144, 150, 151, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 166, 168, 170, 171, 172, 180, 181, 182, 183, 185, 189, 193, 196, 199, 204, 207, 209, 211, 212, 213, 215, 216, 217, 218, 219, 220, 224, 228, 232, 240, 254, 257, 259], "anaconda": [7, 229, 234, 240, 244], "system": [7, 96, 128, 135, 140, 141, 150, 170, 225, 229, 231, 232, 243, 254, 268, 271, 274], "miniconda": 7, "version": [7, 49, 64, 74, 80, 99, 100, 102, 105, 119, 121, 129, 131, 136, 139, 174, 181, 182, 189, 193, 229, 232, 234, 235, 240, 241, 246, 270, 274], "On": [7, 36, 94, 225, 274], "hpc": [7, 226, 274], "systm": 7, "load": [7, 35, 39, 47, 56, 59, 67, 69, 74, 75, 76, 78, 79, 80, 91, 92, 93, 97, 99, 101, 104, 117, 118, 126, 135, 157, 270], "modul": [7, 10, 37, 38, 40, 44, 91, 93, 97, 98, 105, 106, 141, 142, 144, 147, 148, 150, 167, 169, 171, 172, 246, 265, 271], "extra": [7, 105, 131], "librari": [7, 62, 108, 121, 150, 228, 232, 270, 274], "surpport": 7, "research": [7, 35, 38, 40, 41, 49, 62, 64, 79, 93, 97, 119, 129, 131, 134, 136, 139, 232, 274], "yml": [7, 29, 31, 35, 36, 61, 93, 99, 152, 154, 225, 240], "environment_dev": 7, "exmapl": 7, "env": [7, 228, 232, 234, 240, 243], "your_env_nam": 7, "latest": [7, 40, 41, 74, 80, 181, 182, 189, 193, 225, 232], "navig": [7, 268], "pip3": [7, 240, 241], "e": [7, 11, 19, 23, 41, 42, 44, 49, 56, 64, 80, 91, 92, 93, 94, 97, 98, 104, 118, 126, 136, 144, 148, 152, 153, 154, 155, 156, 158, 159, 171, 172, 174, 180, 181, 182, 185, 189, 190, 193, 224, 225, 228, 231, 232, 240, 246, 254], "flag": [7, 40, 41, 106, 120], "mode": [7, 143, 150, 181, 184, 193, 225, 228, 232, 257, 271], "result": [7, 35, 40, 41, 44, 54, 56, 85, 91, 93, 99, 109, 110, 128, 144, 148, 150, 168, 172, 180, 181, 183, 184, 193, 215, 224, 230, 246, 251, 268, 274], "reintal": 7, "chane": 7, "depend": [7, 32, 33, 34, 68, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 89, 90, 160, 161, 162, 166, 196, 211, 212, 217, 225, 230, 232, 233, 240, 241, 270, 274], "cran": [7, 240, 242], "pypi": 7, "similar": [7, 40, 42, 93, 225, 232, 254], "skip": [7, 10, 41, 75, 92, 93, 94, 104, 106, 118], "while": [7, 40, 41, 61, 105, 232, 240, 241, 274], "insid": [7, 40, 41, 74, 93, 94, 225, 229, 230, 236, 237, 238, 239, 270, 274], "order": [7, 32, 33, 34, 40, 41, 42, 45, 48, 49, 62, 64, 68, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 89, 90, 129, 131, 139, 141, 160, 161, 162, 166, 196, 211, 212, 217, 228, 229, 254], "interact": [7, 20, 23, 36, 40, 226], "scale": [7, 115, 254], "ll": 7, "onc": [7, 40, 41, 47, 230], "config": [7, 94, 144, 168, 183, 222, 228, 234, 235, 240], "var": [7, 183, 234, 235], "census_api_kei": [7, 13, 19, 23], "directli": [7, 93, 105, 225], "set_api_kei": [7, 10, 13, 19, 23], "affect": [7, 232, 274], "session": [7, 13, 23], "isn": 7, "t": [7, 20, 23, 39, 40, 49, 64, 92, 93, 94, 110, 128, 131, 136, 150, 182, 189, 256, 257, 264], "perman": [7, 13, 23], "plan": [7, 9, 11, 23, 35, 36, 62, 96], "onn": 7, "jupyt": 7, "notebook": 7, "activ": [7, 35, 91, 96, 121, 183, 225, 240, 244], "python3": [7, 96, 121, 234], "m": [7, 39, 40, 61, 62, 92, 93, 94, 96, 168, 176, 183, 185, 228, 230, 232, 243], "ipykernel": 7, "export": [7, 40, 54, 91, 98, 99, 110, 124, 225, 228, 232, 240, 243, 267], "remov": [7, 47, 52, 108, 147], "prefix": [7, 108], "section": [7, 23, 26, 30, 32, 33, 34, 35, 40, 47, 48, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 93, 94, 98, 99, 100, 101, 102, 104, 105, 110, 116, 152, 153, 154, 157, 160, 161, 166, 196, 199, 204, 207, 209, 211, 212, 216, 217, 218, 225, 228, 232, 252, 270], "well": 7, "q": 8, "slow": [8, 40], "about": [8, 9, 10, 35, 37, 39, 40, 41, 44, 47, 48, 54, 121, 225, 232, 246, 267, 270], "A": [8, 11, 12, 14, 15, 17, 22, 23, 32, 33, 34, 40, 41, 46, 48, 49, 52, 62, 64, 65, 67, 72, 73, 75, 76, 79, 80, 85, 86, 89, 91, 93, 95, 98, 99, 101, 104, 108, 110, 112, 118, 119, 121, 123, 124, 131, 132, 136, 139, 144, 148, 150, 151, 158, 160, 161, 162, 166, 169, 170, 171, 172, 175, 180, 181, 182, 189, 191, 192, 193, 196, 204, 211, 212, 215, 216, 217, 224, 251, 254, 255, 257, 259, 261, 268, 270, 274], "vpn": 8, "turn": 8, "off": 8, "switch": [8, 225], "ipv4": 8, "ipv6": 8, "perform": [8, 40, 41, 42, 44, 54, 91, 93, 94, 99, 144, 150, 168, 226, 227, 228, 232, 257, 274], "american": [9, 35], "commun": [9, 35, 274], "survei": [9, 35], "ongo": 9, "everi": [9, 13, 23, 33, 41, 42, 62, 75, 76, 92, 93, 94, 104, 118, 161, 185, 196, 212, 232], "year": [9, 10, 11, 13, 19, 20, 23, 24, 30, 35, 36, 39, 40, 42, 44, 47, 49, 51, 54, 56, 58, 59, 60, 61, 62, 64, 80, 81, 82, 85, 97, 98, 99, 107, 111, 131, 134, 136, 138, 139, 141, 144, 147, 148, 150, 154, 156, 164, 167, 168, 173, 180, 181, 182, 183, 185, 189, 190, 192, 193, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 218, 220, 251], "give": [9, 94, 108, 225], "invest": 9, "servic": [9, 40, 44, 79, 97, 225, 234, 235, 267, 268, 270], "cover": [9, 183, 232], "broad": 9, "rang": [9, 13, 23, 93, 143, 144, 168, 185, 256], "social": [9, 38, 41, 62, 97], "econom": [9, 97, 134], "demograph": [9, 47, 266, 270, 271], "hous": [9, 97], "characterist": 9, "": [9, 11, 20, 23, 35, 41, 48, 49, 54, 60, 61, 62, 64, 91, 92, 93, 94, 104, 106, 115, 118, 120, 131, 136, 139, 143, 144, 148, 168, 174, 176, 180, 182, 183, 185, 189, 193, 225, 251, 268, 274], "much": [9, 40, 44, 108], "bureau": [9, 97, 134], "web": 9, "site": [9, 10, 91, 138, 234, 270], "separ": [9, 40, 41, 42, 80, 81, 82, 93, 94, 104, 118, 126, 143, 225, 255, 268, 274], "ag": [9, 41, 42, 62], "race": [9, 41, 62], "hispan": [9, 35], "sex": [9, 40, 41, 61, 62], "summari": [9, 37, 40, 44, 46, 48, 51, 58, 62, 66, 79, 80, 81, 82, 85, 151, 254, 268, 270], "subject": 9, "tabl": [9, 11, 23, 27, 30, 32, 33, 35, 37, 38, 40, 44, 45, 49, 51, 58, 59, 60, 61, 62, 64, 67, 69, 70, 72, 73, 75, 77, 79, 80, 81, 82, 83, 88, 91, 92, 94, 95, 98, 99, 100, 101, 102, 104, 106, 111, 112, 113, 114, 116, 118, 120, 124, 126, 128, 129, 134, 135, 136, 138, 140, 141, 151, 152, 153, 154, 155, 157, 160, 161, 162, 163, 164, 167, 182, 183, 189, 191, 196, 199, 200, 201, 204, 205, 206, 208, 210, 211, 212, 218, 220, 221, 270, 271], "profil": [9, 232, 234, 235, 236, 237, 238, 239, 240, 244], "comparison": 9, "nation": [9, 93, 97, 109, 134], "50": [9, 234, 235, 264], "district": 9, "columbia": 9, "puerto": 9, "rico": 9, "congression": 9, "metropolitan": 9, "area": [9, 11, 20, 23, 36, 180, 183, 185, 190], "place": [9, 36, 97, 98, 144, 148, 150, 183, 190, 225, 255, 257, 274], "65": 9, "000": [9, 20, 23, 139], "acs1": [9, 11, 13, 19, 23, 35], "indic": [9, 11, 23, 32, 40, 41, 61, 62, 72, 73, 77, 78, 81, 91, 94, 95, 96, 98, 104, 112, 141, 160, 211, 256], "collect": [9, 35, 40, 103, 150, 181, 183, 190, 193, 249, 257, 268], "over": [9, 42, 92, 93, 94, 99, 104, 118, 169, 175, 180, 181, 183, 184, 185, 193, 199, 204, 207, 213, 218, 220, 221, 270], "decad": 9, "1790": 9, "head": [9, 35], "famili": 9, "number": [9, 20, 23, 33, 35, 37, 40, 41, 48, 54, 61, 62, 75, 76, 81, 92, 93, 94, 104, 108, 118, 161, 196, 212, 230, 254, 256, 267, 268, 270], "person": [9, 48, 270], "five": 9, "categori": [9, 141], "pum": [9, 11, 13, 19, 23, 35], "microdata": [9, 35], "enabl": [9, 10, 225, 230, 274], "custom": [9, 14, 17, 23, 38, 104, 118, 144, 148, 172, 175, 180, 183, 185, 190, 225, 227, 228, 232, 251, 261, 270, 274], "free": 9, "charg": 9, "pretabul": 9, "product": [9, 225, 274], "zipcod": [9, 41, 93, 242], "tabul": 9, "interfac": [10, 14, 23, 99, 104, 135, 225, 226, 254, 259, 270, 274], "includ": [10, 11, 19, 23, 35, 36, 40, 41, 44, 56, 62, 93, 94, 98, 99, 111, 120, 126, 139, 140, 141, 143, 150, 172, 190, 224, 225, 227, 229, 232, 246, 255, 256, 267, 268, 270, 271, 273, 274], "main": [10, 40, 93, 99, 141, 143, 150, 167, 183, 190, 222, 227, 232, 249, 252, 253], "tigerweb": [10, 36], "ftp": 10, "tiger": [10, 173], "shapefil": [10, 140, 141, 169, 171, 175, 181, 182, 184, 189, 192, 193, 271, 273], "download": [10, 20, 23, 33, 35, 42, 91, 97, 138, 140, 141, 142, 144, 146, 147, 148, 151, 153, 154, 159, 161, 165, 167, 168, 169, 175, 180, 182, 183, 185, 189, 190, 192, 193, 196, 199, 201, 202, 203, 204, 206, 207, 208, 209, 212, 214, 219, 220, 221, 251, 257, 271, 273], "quick": [10, 225, 227, 228], "standard": [10, 11, 23, 44, 54, 93, 97, 123, 182, 189, 226, 254, 268, 274], "workflow": [10, 26, 30, 40, 44, 77, 78, 79, 80, 81, 82, 84, 87, 88, 91, 99, 103, 141, 152, 153, 154, 183, 199, 202, 204, 207, 209, 218, 226, 228, 229, 268, 270, 274], "exist": [10, 11, 23, 41, 49, 64, 92, 93, 94, 104, 118, 119, 120, 136, 139, 144, 150, 168, 181, 182, 189, 193, 225, 229, 231, 257, 271], "instal": [10, 36, 133, 145, 165, 228, 229, 244, 274], "nsaph_util": [10, 11, 23, 36, 144, 148, 180, 234, 244, 246, 251, 270], "kei": [10, 11, 13, 19, 21, 23, 49, 64, 93, 105, 106, 143, 144, 147, 150, 152, 153, 155, 163, 165, 168, 254], "regist": [10, 40, 41], "conda": [10, 99, 229, 230, 232, 234, 235, 244, 270, 274], "kernal": 10, "recip": 10, "variabl": [10, 11, 13, 19, 23, 35, 36, 41, 47, 61, 62, 93, 98, 107, 128, 144, 148, 178, 180, 181, 182, 183, 184, 185, 189, 190, 193, 204, 213, 218, 219, 220, 228, 230, 236, 237, 238, 239, 255, 264], "field": [10, 32, 33, 34, 68, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 89, 90, 160, 161, 162, 166, 196, 211, 212, 217], "definit": [10, 36, 54, 92, 93, 94, 99, 101, 104, 106, 135, 268], "store": [10, 11, 23, 26, 44, 61, 62, 93, 96, 99, 110, 128, 134, 226, 229, 270, 274], "contribut": 10, "checklist": 10, "py": [10, 36, 93, 96, 99, 121, 183, 225, 241, 249], "get_census_data": [10, 19, 23], "api_geographi": [10, 19, 23], "assemble_data": [10, 35, 36], "dataplan": [10, 11, 23, 35, 36], "get_var_nam": [10, 11, 23], "add_geoid": [10, 11, 23], "adjust_geo_field": [10, 11, 23], "create_missing": [10, 11, 23], "write_data": [10, 11, 23, 31, 36], "calculate_dens": [10, 11, 23, 25, 36], "interpol": [10, 11, 23, 28, 30, 36, 174, 246, 255, 256, 270], "quality_check": [10, 11, 23], "write_schema": [10, 11, 23], "variabledef": [10, 11, 23], "get_var": [10, 11, 23], "do_queri": [10, 11, 23, 35], "calculate_var": [10, 11, 23], "census_info": [10, 35], "get_endpoint": [10, 13, 23], "get_varlist": [10, 13, 23, 35], "census_year": [10, 11, 13, 23, 35, 36], "get_area": [10, 20, 23], "download_geometri": [10, 20, 23], "cli": [10, 24, 36, 246, 270], "censuscontext": [10, 14, 23], "valid": [10, 14, 17, 23, 41, 54, 55, 62, 84, 97, 104, 118, 135, 141, 144, 148, 167, 180, 185, 199, 204, 207, 218, 241, 251, 254, 255, 261, 264], "except": [10, 38, 40, 47, 49, 54, 64, 93, 115, 119, 129, 131, 136, 139, 150, 234, 235, 240, 241, 254, 257, 264], "censusexcept": [10, 16, 23], "load_county_cod": [10, 18, 23], "load_state_cod": [10, 18, 23], "util": [10, 36, 41, 44, 51, 56, 69, 80, 95, 96, 97, 103, 110, 121, 124, 127, 128, 129, 134, 138, 144, 147, 148, 150, 157, 173, 174, 180, 191, 192, 225, 232, 251, 254, 257, 267, 269, 271, 272, 274], "frequent": 10, "contant": 10, "unreleas": 10, "index": [10, 27, 30, 37, 42, 44, 61, 62, 73, 77, 78, 81, 88, 91, 94, 99, 104, 111, 112, 120, 121, 129, 139, 140, 141, 152, 153, 154, 176, 182, 183, 185, 189, 200, 205, 210, 218, 246, 256, 265, 270, 271], "core": [11, 13, 23, 96, 113, 269, 271], "class": [11, 12, 14, 15, 17, 22, 23, 24, 25, 28, 29, 31, 35, 37, 45, 46, 47, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 66, 67, 87, 91, 93, 99, 101, 104, 105, 108, 110, 112, 114, 115, 117, 118, 120, 121, 126, 128, 134, 135, 137, 138, 141, 143, 150, 151, 163, 164, 167, 169, 170, 171, 172, 173, 175, 176, 179, 181, 183, 184, 185, 190, 191, 193, 195, 222, 223, 224, 230, 249, 251, 253, 254, 257, 258, 259, 261, 262, 263, 264], "yaml_path": [11, 23], "geometri": [11, 20, 23, 24, 30, 35, 172, 224], "2012": [11, 23, 39, 134, 199, 204, 207, 218], "2013": [11, 23, 80, 134, 199, 204, 207, 218], "2014": [11, 23, 41, 134, 199, 204, 207, 218], "2015": [11, 23, 37, 41, 78, 134, 144, 148, 168, 180, 183, 199, 204, 207, 218, 251], "2016": [11, 23, 41, 107, 134, 144, 148, 168, 180, 183, 199, 204, 207, 218, 251], "2017": [11, 23, 80, 134, 144, 148, 168, 180, 183, 199, 204, 207, 218, 251], "2019": [11, 13, 20, 23, 24, 28, 36, 164, 199, 204, 207], "none": [11, 13, 14, 19, 20, 23, 41, 45, 46, 48, 51, 53, 54, 62, 63, 66, 67, 92, 93, 94, 100, 102, 103, 104, 105, 106, 108, 112, 114, 115, 116, 117, 118, 120, 121, 123, 124, 126, 128, 134, 135, 137, 142, 143, 144, 147, 148, 150, 151, 168, 173, 180, 181, 182, 184, 185, 189, 190, 193, 195, 234, 235, 251, 252, 254, 255, 257, 259, 264], "initi": [11, 23, 40, 50, 73, 81, 82, 91, 108, 113, 123, 144, 148, 180, 183, 228, 246, 251], "object": [11, 12, 14, 15, 17, 22, 23, 36, 46, 48, 67, 93, 94, 101, 104, 112, 118, 121, 134, 144, 147, 148, 150, 151, 177, 182, 189, 190, 193, 195, 246, 251, 254, 256, 257, 261, 264], "census_yaml": 11, "geographi": [11, 19, 23, 36, 171, 172, 175, 178, 180, 181, 182, 183, 184, 185, 189, 190, 192, 193, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 218, 220, 221], "timefram": [11, 23], "interest": [11, 23, 42, 256, 270], "appli": [11, 23, 40, 48, 171], "That": [11, 23], "futur": [11, 13, 23, 99, 108], "now": [11, 23, 35, 36, 42, 44, 49, 64, 99, 121], "besid": [11, 23, 93, 99, 225, 229, 270, 274], "default": [11, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 92, 93, 94, 101, 104, 114, 123, 144, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 168, 172, 175, 180, 183, 190, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 224, 229, 230, 236, 237, 238, 239, 251, 255, 257, 274], "left": [11, 23, 38, 258], "exercis": [11, 23], "reader": [11, 23, 41, 48, 114, 115, 135, 150, 254, 257, 259, 267], "digit": [11, 19, 23, 38, 40, 41, 48, 62], "limit": [11, 19, 20, 23, 33, 36, 41, 49, 62, 64, 68, 75, 76, 81, 92, 93, 94, 104, 106, 114, 118, 119, 129, 131, 136, 139, 143, 161, 196, 212, 225, 234, 235, 240, 241], "06": [11, 19, 23, 35, 62, 138, 163], "ca": [11, 19, 23, 107], "member": [11, 23, 70, 80, 128, 144, 148, 180, 249, 251], "dict": [11, 23, 45, 47, 51, 106, 115, 120, 121, 124, 128, 130, 135, 143, 150, 151, 257, 259], "panda": [11, 18, 19, 20, 23, 255, 264], "method": [11, 14, 17, 23, 35, 36, 99, 104, 118, 120, 143, 144, 148, 150, 180, 181, 182, 185, 189, 193, 251, 255, 256, 257, 261, 262, 263], "paramet": [11, 12, 13, 14, 15, 17, 19, 20, 22, 23, 41, 46, 48, 54, 61, 67, 68, 80, 92, 93, 94, 96, 99, 101, 104, 110, 112, 117, 118, 120, 121, 123, 126, 129, 135, 141, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 167, 168, 170, 171, 174, 180, 181, 182, 183, 184, 185, 189, 190, 193, 195, 199, 204, 207, 218, 222, 236, 237, 238, 239, 251, 255, 256, 257, 261, 264, 268, 270, 274], "supported_out_format": 11, "geoid": [11, 20, 23, 131], "return": [11, 13, 14, 17, 18, 19, 20, 23, 48, 52, 54, 65, 97, 104, 108, 110, 117, 118, 120, 123, 126, 128, 131, 135, 136, 139, 143, 144, 147, 148, 150, 170, 171, 174, 180, 181, 182, 184, 185, 189, 190, 193, 251, 254, 255, 256, 257, 261, 264], "self": [11, 23], "string": [11, 13, 19, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 41, 48, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 94, 123, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 230, 255, 257], "singl": [11, 23, 37, 38, 40, 44, 47, 51, 54, 62, 81, 82, 83, 92, 93, 94, 99, 104, 118, 144, 148, 150, 180, 181, 193, 220, 225, 246, 251, 255, 257, 271], "column": [11, 23, 35, 36, 37, 42, 51, 54, 61, 62, 81, 82, 83, 91, 94, 98, 99, 104, 106, 115, 118, 120, 128, 134, 135, 136, 143, 147, 150, 170, 180, 181, 182, 183, 185, 189, 190, 193, 254, 255, 267], "combin": [11, 23, 37, 40, 44, 51, 61, 62, 81, 82, 83, 97, 150, 172, 175, 183, 224, 225, 257, 270, 274], "portion": [11, 23, 246, 270], "geograph": [11, 19, 23, 36, 143, 170, 171, 173, 180, 183, 185], "identifi": [11, 23, 40, 47, 61, 62, 106, 123, 171, 255, 268], "geo": [11, 19, 23, 173, 198, 213, 219], "min_year": [11, 13, 23, 36], "max_year": [11, 13, 23, 36], "row": [11, 23, 37, 40, 99, 110, 114, 115, 120, 124, 131, 135, 143, 150, 174, 193, 254, 257, 267], "geospati": [11, 23, 255], "id": [11, 23, 41, 47, 61, 79, 121, 123, 154, 213, 219, 255], "file_typ": [11, 23, 58, 59, 60], "output": [11, 23, 46, 52, 54, 65, 91, 94, 101, 103, 104, 123, 140, 141, 143, 147, 150, 151, 167, 181, 183, 190, 193, 228, 240, 257], "disk": [11, 20, 23, 36], "sq_mi": [11, 20, 23, 36], "true": [11, 20, 23, 36, 38, 41, 61, 62, 63, 73, 93, 94, 97, 112, 115, 117, 120, 123, 124, 126, 131, 139, 144, 147, 148, 150, 168, 180, 183, 225, 234, 235, 236, 237, 238, 239, 251, 257, 258], "param": [11, 23, 105, 147, 150, 225, 254, 257], "_sphinx_paramlinks_censu": [11, 23], "densiti": [11, 23, 25, 36], "denisti": [11, 23], "per": [11, 20, 23, 35, 36, 41, 44, 51, 81, 82], "squar": [11, 20, 23, 36, 174], "mile": [11, 20, 23, 36], "fals": [11, 23, 46, 61, 62, 92, 93, 94, 97, 102, 105, 120, 123, 126, 135, 139, 147, 150, 168, 173, 193, 225, 234, 235, 236, 237, 238, 239, 240, 254, 257, 259], "meter": [11, 23], "ma": [11, 23, 41, 107, 255], "fill": [11, 23, 38, 40], "minimum": [11, 13, 23, 93, 141, 148, 176, 185, 256], "maximum": [11, 23, 41, 108, 141, 148, 176, 185], "test_fil": [11, 23, 94], "str": [11, 12, 13, 15, 17, 19, 22, 23, 45, 46, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 100, 102, 103, 104, 106, 110, 112, 113, 114, 115, 116, 117, 118, 120, 121, 123, 124, 126, 128, 130, 131, 132, 133, 134, 135, 143, 144, 145, 148, 149, 150, 170, 171, 173, 180, 181, 182, 184, 185, 189, 191, 193, 249, 251, 252, 253, 254, 255, 257, 258, 259], "check": [11, 23, 35, 54, 84, 117, 147, 150, 165, 246, 257, 264], "qualiti": [11, 23, 41, 44, 84, 264, 268], "paradigm": [11, 23], "qc": [11, 23, 44, 62, 80, 141, 143, 144, 167, 168, 246, 270], "filenam": [11, 23, 105, 150, 257], "table_nam": [11, 23, 31, 129, 136], "schema": [11, 23, 27, 31, 44, 46, 51, 54, 61, 62, 94, 97, 99, 104, 112, 118, 119, 126, 129, 135, 136, 151, 152, 153, 154, 191], "var_dict": [11, 23], "log": [11, 12, 15, 17, 22, 23, 24, 25, 28, 29, 30, 31, 32, 33, 34, 39, 40, 54, 68, 69, 71, 72, 74, 75, 76, 83, 85, 86, 89, 90, 91, 92, 93, 94, 104, 118, 123, 150, 155, 157, 158, 160, 161, 162, 165, 166, 196, 197, 211, 212, 213, 215, 216, 217, 219, 225, 228, 230, 232, 234, 235, 236, 237, 238, 239, 243, 257], "logger": [11, 23, 123, 264], "repres": [11, 23, 40, 41, 44, 54, 91, 93, 108, 109, 143, 174, 226], "dataset": [11, 13, 19, 23, 35, 36, 63, 99, 100, 110, 138, 182, 183, 184, 189, 193, 268], "has_den": [11, 23], "boolean": [11, 23, 40, 41, 68, 72, 73, 75, 77, 93, 254, 264], "whether": [11, 23, 41, 144, 148, 150, 168, 180, 228, 229, 251, 254, 257], "union": [11, 23, 41, 45, 62, 84, 143], "calcualt": [11, 23], "censusdensitycontext": 12, "subclass": [12, 14, 15, 17, 22, 23, 37, 46, 53, 67, 101, 104, 112, 118, 121, 144, 148, 151, 180, 181, 185, 193, 251, 261], "concret": [12, 14, 15, 17, 22, 23, 46, 67, 101, 104, 112, 118, 121, 144, 148, 151, 180, 251, 261], "configur": [12, 14, 15, 17, 22, 23, 46, 67, 91, 99, 101, 112, 118, 121, 126, 141, 147, 151, 167, 172, 177, 181, 185, 190, 193, 227, 228, 229, 232, 251, 261], "memeb": [12, 14, 15, 17, 22, 23, 46, 67, 101, 104, 112, 118, 121, 144, 148, 151, 180, 251, 261], "_": [12, 14, 15, 17, 22, 23, 46, 67, 94, 101, 104, 108, 112, 118, 121, 126, 144, 148, 151, 180, 251, 261], "charact": [12, 14, 15, 17, 22, 23, 37, 38, 40, 41, 46, 62, 67, 101, 104, 112, 118, 121, 136, 144, 148, 150, 151, 180, 251, 257, 261, 267], "instanc": [12, 14, 15, 17, 22, 23, 46, 67, 93, 96, 101, 104, 108, 112, 118, 121, 144, 147, 148, 150, 151, 180, 181, 182, 189, 190, 193, 195, 251, 254, 257, 261, 262, 263, 270], "text": [12, 14, 15, 17, 22, 23, 37, 40, 41, 46, 67, 101, 104, 108, 112, 118, 121, 136, 139, 141, 144, 148, 150, 151, 180, 228, 251, 257, 258, 261, 267], "extract": [12, 14, 15, 17, 22, 23, 37, 40, 41, 42, 46, 48, 56, 61, 62, 67, 79, 101, 104, 112, 118, 121, 131, 136, 141, 144, 148, 150, 151, 180, 182, 189, 251, 257, 261, 267, 268, 270], "initialize_log": [12, 15, 17, 22], "metadata": [13, 23, 41, 48, 54, 56, 60, 76, 91, 132, 150, 180, 181, 183, 185, 190, 193, 254, 257], "sum_fil": [13, 19, 23], "url": [13, 23, 93, 134, 150, 181, 182, 189, 193, 225, 228, 257], "endpoint": [13, 23], "datafram": [13, 19, 23, 138, 170, 171, 255, 257, 259, 264], "avoid": [13, 23, 91, 185], "noth": [13, 23, 48, 126, 147, 150, 181, 193, 225, 257], "construct": [13, 23, 40, 47, 94, 123, 126, 147, 150, 181, 182, 189, 190, 193, 195], "At": [13, 23, 41, 93, 190, 274], "point": [13, 23, 36, 40, 41, 48, 169, 172, 175, 180, 181, 182, 183, 185, 189, 190, 193, 223, 224, 230, 254, 256, 274], "assum": [13, 23, 68, 80, 81, 82, 93, 104, 118, 225, 229, 270, 274], "expand": [13, 23, 154], "allow": [13, 23, 40, 41, 144, 148, 168, 180, 228, 251, 270, 274], "vari": [13, 23, 38, 41, 47, 62, 136], "max": [13, 23, 39, 40, 47, 61, 62, 79, 87, 90, 141, 268, 270], "inclus": [13, 23, 143, 144, 168], "context": [14, 23, 45, 51, 53, 56, 66, 67, 104, 112, 114, 117, 121, 126, 134, 135, 137, 141, 142, 143, 147, 150, 151, 167, 181, 185, 190, 193, 195, 234, 235, 246], "attr": [14, 17, 23, 104, 110, 118, 144, 148, 180, 185, 251, 261], "overrid": [14, 17, 23, 91, 93, 94, 104, 118, 144, 148, 180, 185, 236, 237, 238, 239, 251, 261], "argpars": [14, 17, 23, 104, 118, 144, 148, 180, 185, 251, 261], "census_cli": 14, "censusqccontext": 15, "qc_log": [15, 29], "censusinterpolatecontext": 17, "resolut": [19, 23, 183, 268], "recommend": [19, 23], "environment": [19, 23, 268, 270], "go": [19, 23, 225, 230], "shorthand": [19, 23], "type": [19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 38, 40, 41, 46, 48, 51, 54, 61, 62, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 97, 104, 115, 118, 120, 121, 128, 135, 141, 144, 148, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 171, 172, 178, 180, 181, 182, 183, 185, 189, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 234, 235, 240, 251, 254, 257], "correct": [19, 23, 35, 90], "shape": [20, 23, 36, 141, 144, 145, 153, 155, 159, 165, 167, 168, 169, 170, 173, 175, 178, 180, 181, 182, 183, 184, 185, 189, 190, 193, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 218, 219, 220, 221, 222, 270], "due": [20, 23, 36], "100": [20, 23, 36, 41, 62, 132, 176, 185], "block": [20, 23, 38, 91, 105, 108, 135, 150, 254, 257], "aren": [20, 23], "wrapper": [20, 23, 70, 119, 144, 148, 150, 174, 180, 182, 246, 251, 257, 270, 274], "convert": [20, 23, 37, 40, 41, 54, 55, 63, 91, 92, 93, 94, 99, 104, 118, 267], "out_dir": [20, 23], "spatial": [20, 23, 183, 255, 268], "geojson": [20, 23], "save": [20, 23, 36, 47, 57, 99, 120, 138, 143, 150, 258], "multipl": [20, 23, 40, 41, 47, 62, 91, 93, 148, 180, 226, 229, 246, 251, 270, 271, 274], "tract": [20, 23, 36], "print": [21, 23, 35, 54, 91, 118, 121, 131, 132, 134, 135, 144, 148, 180, 185, 190], "censuswritecontext": 22, "http_proxi": [24, 25, 30, 152, 154], "api_kei": [24, 30, 141, 143, 144, 167, 168], "var_fil": [24, 30, 36], "1999": [24, 28, 36, 37, 39, 49, 58, 59, 64, 144, 148, 168, 180, 183, 199, 202, 204, 207, 251], "locat": [24, 25, 28, 29, 31, 87, 99, 190, 225, 230, 256], "pkl_file": 24, "pkl": [24, 25, 28, 29, 31], "in_pkl": [25, 28, 29, 31], "out_pkl": [25, 28], "databas": [26, 27, 30, 32, 34, 37, 39, 40, 44, 50, 54, 56, 59, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 101, 104, 108, 110, 113, 118, 120, 123, 124, 126, 134, 139, 140, 141, 152, 153, 154, 157, 160, 163, 164, 166, 183, 191, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 214, 216, 217, 218, 220, 221, 228, 229, 268, 274], "connect": [26, 27, 30, 32, 33, 34, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 101, 104, 106, 110, 112, 114, 117, 124, 128, 131, 152, 153, 154, 156, 157, 160, 161, 166, 196, 199, 204, 207, 209, 211, 212, 216, 217, 218, 225, 228, 232, 274], "usual": [26, 30, 32, 33, 34, 35, 41, 48, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 94, 108, 126, 135, 152, 153, 154, 157, 160, 161, 166, 196, 199, 204, 207, 209, 211, 212, 216, 217, 218, 254, 274], "ini": [26, 30, 32, 33, 34, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 92, 94, 96, 99, 105, 110, 152, 153, 154, 157, 160, 161, 163, 164, 166, 196, 199, 204, 207, 209, 211, 212, 216, 217, 218], "connection_nam": [26, 30, 32, 33, 34, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 110, 152, 153, 154, 157, 160, 161, 163, 164, 166, 196, 199, 200, 201, 204, 205, 206, 207, 208, 209, 210, 211, 212, 216, 217, 218, 220, 221], "registri": [26, 32, 33, 34, 37, 60, 68, 72, 73, 75, 76, 80, 85, 86, 88, 89, 92, 94, 101, 104, 117, 141, 160, 161, 162, 166, 167, 196, 199, 200, 204, 205, 207, 209, 211, 212, 215, 216, 217], "data_fil": [26, 104, 115, 120], "ingest_log": [26, 27, 30, 152, 153, 154, 199, 201, 204, 206, 207, 208, 209, 210, 218, 220, 221], "index_log": [26, 27, 30, 73, 77, 78, 152, 153, 154, 199, 200, 204, 205, 209, 210, 218], "vacuum_log": [26, 27, 30, 73, 77, 78, 152, 199, 201, 204, 206, 207, 208, 209, 210, 218], "ingest_error": [26, 30], "index_error": [26, 30], "vacuum_error": [26, 30], "sub": [26, 41, 91, 98, 103, 183, 199, 202, 204, 207, 209, 220, 221], "db": [27, 91, 92, 93, 94, 99, 100, 101, 102, 104, 110, 116, 131, 231, 234, 235], "index_err": [27, 73, 77, 78, 199, 200, 204, 205, 209, 210, 218], "ingest_err": [27, 154, 199, 201, 204, 206, 207, 208, 209, 210, 218, 220, 221], "vacuum_err": [27, 73, 77, 78, 199, 201, 204, 206, 207, 208, 209, 210, 218], "ingest": [27, 30, 33, 40, 44, 56, 73, 75, 76, 79, 87, 88, 92, 94, 97, 104, 108, 118, 126, 152, 153, 154, 161, 183, 196, 199, 201, 202, 204, 206, 207, 208, 209, 210, 212, 214, 271, 273], "upload": [27, 30, 140, 141, 152, 153, 154, 183, 201, 206, 208, 210], "vacuum": [27, 30, 73, 77, 78, 81, 88, 91, 140, 141, 152, 183, 201, 206, 208, 210, 218], "interpolate_data": 28, "do_qc": 29, "qc_file": [29, 30], "interpolate_year": 30, "density_var": 30, "assemble_pkl": 30, "interpolate_pkl": 30, "density_interp_pkl": 30, "density_no_interp_pkl": 30, "interp_out": 30, "interp_tablenam": 30, "interp_schema": 30, "no_interp_out": 30, "no_interp_tablenam": 30, "no_interp_schema": 30, "interp_qc_log": 30, "no_interp_qc_log": 30, "interp_pkl": 30, "interp_data": 30, "no_interp_data": 30, "make_log": 30, "touch": [30, 172, 224, 241], "census_assembl": 30, "census_interpol": [30, 36], "no_interp_dens": 30, "census_dens": 30, "interp_dens": 30, "no_interp_qc": 30, "census_qc": 30, "interp_qc": 30, "write_interp": 30, "census_writ": 30, "write_no_interp": 30, "out_fil": 31, "schema_nam": [31, 129, 136], "census_schema": 31, "index_build": [32, 72, 99, 160, 211], "build": [32, 40, 41, 72, 73, 77, 78, 80, 81, 91, 93, 94, 98, 99, 112, 144, 148, 160, 180, 211, 229, 232, 234, 235, 243, 251, 271, 274], "displai": [32, 72, 121, 160, 211], "real": [32, 41, 72, 141, 142, 146, 160, 211], "progress": [32, 72, 91, 99, 112, 150, 160, 183, 211, 228, 257], "model": [32, 33, 34, 36, 37, 38, 41, 46, 51, 56, 57, 60, 61, 62, 66, 72, 73, 75, 85, 86, 89, 91, 135, 151, 152, 153, 154, 160, 161, 162, 166, 183, 191, 196, 199, 201, 204, 206, 207, 208, 209, 210, 211, 212, 216, 217, 271], "domain": [32, 34, 40, 68, 72, 73, 75, 77, 86, 89, 91, 92, 94, 99, 101, 104, 112, 114, 117, 118, 166, 196, 211, 216, 217, 271], "depends_on": [32, 33, 34, 68, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 89, 90, 160, 161, 162, 166, 196, 201, 206, 208, 211, 212, 217, 220, 221, 234, 235], "special": [32, 33, 34, 41, 68, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 89, 90, 93, 150, 160, 161, 162, 166, 196, 211, 212, 217, 225, 257, 267, 274], "enforc": [32, 33, 34, 68, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 89, 90, 160, 161, 162, 166, 196, 211, 212, 217], "execut": [32, 33, 34, 40, 51, 67, 68, 70, 71, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 89, 90, 91, 94, 108, 110, 112, 113, 127, 128, 129, 131, 136, 137, 147, 160, 161, 162, 166, 181, 183, 184, 190, 193, 195, 196, 211, 212, 217, 228, 230, 231, 232, 246, 261, 262, 263, 270, 274], "stderr": [32, 33, 34, 68, 69, 71, 72, 74, 75, 76, 83, 85, 86, 89, 90, 161, 162, 166, 196, 197, 211, 212, 213, 214, 215, 216, 217, 219], "data_load": [33, 40, 68, 75, 86, 91, 92, 99, 102, 161, 196, 212, 216], "pattern": [33, 35, 38, 40, 41, 48, 52, 54, 56, 58, 59, 60, 65, 73, 75, 76, 79, 80, 92, 93, 94, 104, 118, 126, 135, 170, 196, 212, 249], "thread": [33, 39, 40, 75, 76, 92, 93, 94, 104, 108, 118, 123, 161, 196, 212], "concurr": [33, 75, 76, 108, 161, 196, 212], "page_s": [33, 75, 76, 114, 161, 196, 212], "1000": [33, 40, 75, 76, 93, 114, 161, 176, 185, 196, 212, 230], "explicit": [33, 75, 76, 92, 93, 94, 104, 118, 161, 196, 212], "size": [33, 37, 40, 75, 76, 92, 93, 94, 104, 105, 118, 150, 161, 196, 212, 254, 255, 257, 267], "log_frequ": [33, 75, 76, 161, 196, 212], "long": [33, 75, 76, 91, 99, 161, 185, 193, 196, 212], "100000": [33, 40, 62, 75, 76, 161, 196, 212], "occur": [33, 75, 76, 143, 161, 196, 212], "record": [33, 40, 41, 42, 47, 48, 54, 56, 61, 62, 75, 76, 81, 84, 92, 94, 96, 104, 114, 118, 141, 161, 171, 175, 196, 212, 254], "stop": [33, 75, 76, 108, 161, 196, 212], "aanalyz": [34, 89, 166, 217], "subsequ": [34, 40, 89, 94, 166, 217], "effici": [34, 40, 41, 44, 62, 89, 166, 217], "come": [35, 41, 170, 218], "differ": [35, 40, 41, 51, 68, 85, 93, 99, 135, 225, 229, 274], "resourc": [35, 36, 91, 140, 141, 229, 274], "been": [35, 41, 47, 54, 75, 92, 93, 94, 104, 118, 134, 143, 150, 181, 193, 230, 232, 256, 257, 274], "familiar": 35, "varlist": 35, "f": [35, 39, 58, 115, 120, 135, 182, 189, 193, 228, 231, 240, 241, 255, 257], "len": 35, "10": [35, 42, 61, 62, 123, 143, 163, 164, 218, 234, 235, 264], "accord": [35, 73, 75, 76, 79, 80], "34450": 35, "b19001b_014e": 35, "c02014_002e": 35, "b23023_070e": 35, "b07007pr_019e": 35, "b19101a_004": 35, "b24022_061e": 35, "b19001b_013e": 35, "c02014_003e": 35, "b07007pr_018e": 35, "googl": 35, "variable_nam": 35, "And": 35, "total": [35, 48, 176, 185], "femal": 35, "disabl": [35, 150, 257], "past": [35, 232], "12": [35, 61, 62, 138, 185, 218], "month": [35, 40, 41, 49, 61, 62, 64, 98, 107, 111, 138, 139, 141, 185, 218, 220, 221], "14": [35, 185], "hour": [35, 40, 176, 185, 232], "week": [35, 96], "48": 35, "49": 35, "select": [35, 37, 41, 42, 45, 47, 49, 52, 56, 61, 62, 64, 65, 90, 93, 99, 129, 131, 136, 139, 141, 144, 148, 270, 274], "beyond": 35, "scope": 35, "best": [35, 36, 40, 44, 47, 232, 246, 274], "decid": [35, 96], "census_var": [35, 36], "hispanic_count": 35, "p004002": 35, "let": 35, "sai": [35, 40], "open": [35, 53, 135, 150, 181, 184, 193, 226, 246, 254, 257, 259, 274], "yaml_dict": 35, "fullload": 35, "my_var": 35, "variabledev": 35, "count_hispan": 35, "becom": [35, 42], "same": [35, 38, 40, 62, 93, 94, 97, 150, 254, 257, 259, 274], "conduct": 35, "analys": 35, "filter": [35, 41, 42, 62, 98, 150, 180, 185, 257], "census_myvar_test": 35, "take": [35, 36, 40, 41, 51, 96, 232, 270, 274], "rather": [35, 38, 40, 93, 94, 274], "than": [35, 38, 40, 41, 93, 94, 108, 141, 142, 143, 146, 150, 190, 225, 255, 257, 274], "01": [35, 62, 152, 163, 185], "75830": 35, "02": [35, 62], "25852": 35, "04": [35, 62], "1295617": 35, "05": [35, 62, 240], "86866": 35, "10966556": 35, "comput": [35, 40, 49, 61, 64, 114, 119, 129, 131, 136, 139, 184, 193, 226, 274], "percentag": 35, "hispanic_pct": 35, "rerun": [35, 232], "0": [35, 41, 49, 61, 62, 64, 93, 100, 102, 105, 114, 119, 129, 131, 136, 139, 141, 150, 174, 182, 189, 225, 234, 235, 240, 241, 256, 257], "017052": 35, "041236": 35, "252526": 35, "032493": 35, "323768": 35, "old": [36, 41, 129], "prepar": [36, 40, 79, 114, 128, 140, 141, 145, 184, 193, 195], "ben": [36, 246], "find": [36, 63, 99, 106, 181, 182, 189, 193, 231], "automat": [36, 41, 44, 46, 93, 100, 105, 225, 232, 271, 274], "made": [36, 270], "access": [36, 41, 70, 80, 225, 270, 274], "would": [36, 42, 93, 94, 123, 225, 246], "y": [36, 49, 61, 64, 93, 134, 136, 139, 144, 148, 168, 170, 174, 175, 180, 182, 183, 189, 228, 232, 240, 243, 251], "geom": 36, "d": [36, 51, 61, 80, 93, 131, 168, 174, 182, 183, 189, 228, 232, 234, 235, 240, 243, 244, 254], "x": [36, 124, 136, 139, 170, 174, 175, 182, 189, 234, 235, 240], "census_tract_2009_2019": 36, "them": [36, 38, 56, 93, 94, 96, 97, 99, 108, 144, 148, 180, 225, 226, 251, 274], "within": [36, 47, 80, 99, 135, 172, 224, 225, 229, 246], "creation": [36, 40, 79, 99, 104, 246, 270], "seri": [36, 38, 62, 93, 134], "tell": 36, "comb": 36, "usabl": 36, "analysi": [36, 44, 182, 189, 197, 226, 268], "still": 36, "practic": [36, 143, 144, 148, 180, 232, 251], "reproducu": 36, "census_uninterpol": 36, "begin": [36, 41, 49, 64, 129, 136, 139], "weight": [36, 256], "averag": [36, 143, 246, 255, 256], "sinc": [36, 41, 100, 102, 105], "onward": 36, "2001": [36, 183, 199, 204, 207, 218], "2008": [36, 199, 202, 204, 207, 218], "seen": 36, "addit": [36, 40, 41, 62, 93, 120, 225, 229, 234, 235, 240, 241, 255, 274], "fts2yaml": 37, "parser": [37, 41, 251, 254, 267], "both": [37, 40, 41, 96, 99, 104, 150, 172, 224, 225, 230, 232, 274], "create_schema_config": [37, 40], "interpret": [37, 181, 193], "introspect": [37, 91, 99, 104, 115, 118, 126, 151, 152, 153, 154, 271], "raw": [37, 39, 44, 53, 54, 56, 66, 73, 79, 80, 81, 82, 85, 143, 180, 183, 185, 199, 204, 207, 218], "random_selector": 37, "random": [37, 47, 52, 56, 65, 87, 90, 267], "awar": [37, 53, 227, 232], "match": [37, 38, 40, 47, 53, 59, 60, 93, 94, 106, 126, 170, 175, 246], "dat": [37, 48, 53, 54, 56, 63, 76, 80], "mcr_combine_t": [37, 38, 83], "dispar": [37, 81, 82, 83], "consolid": 37, "view": [37, 40, 44, 51, 61, 62, 67, 73, 79, 81, 82, 83, 84, 88, 93, 97, 99, 104, 118, 139, 183], "medpar_convert": 37, "mcr_file": 37, "mcr_fts2csv": 37, "fwf": [37, 41, 48, 55, 91, 246], "mcr_fts2db": [37, 76], "mcr_registri": 37, "content": [37, 46, 57, 99, 143, 150, 225, 257], "mcr_sa": 37, "abstract": [37, 58, 91, 99, 101, 104, 135, 141, 167, 181, 193, 257], "mcr_sas2db": 37, "sa": [37, 40, 41, 44, 58, 59, 60, 80, 91, 94, 126, 132, 254, 267, 268], "7bdat": [37, 41, 58, 59, 60], "mcr_sas2yaml": 37, "corrupt": [37, 93], "ultim": 37, "attempt": [37, 38, 39, 40, 47, 91], "unsuccess": 37, "transfer": [37, 40, 41, 46, 66, 79, 85, 91, 99, 141, 150, 151, 167, 254, 268], "plain": [37, 40, 228, 232, 243, 267], "posit": [37, 40, 48, 150, 254, 257, 267], "length": [37, 40, 62, 254, 267], "date": [37, 38, 39, 40, 41, 42, 44, 47, 61, 62, 93, 98, 107, 142, 143, 144, 146, 147, 152, 153, 155, 159, 168, 173, 180, 185, 190, 193, 199, 201, 204, 206, 207, 208, 209, 210, 213, 219, 228, 232, 243, 254, 267], "arrai": [38, 41, 42, 61, 62, 109, 135, 174, 175, 199, 202, 204, 207, 209, 218, 256], "ssa3": [38, 41, 62, 134, 139], "cnty_cd": [38, 62], "bene_county_cd": [38, 62], "ssa_counti": [38, 62], "map": [38, 40, 74, 79, 91, 95, 99, 134, 138, 139, 154, 225, 236, 237, 238, 239], "neither": 38, "three": [38, 41, 62, 93, 232], "null": [38, 40, 41, 47, 62, 136, 139, 141, 150, 236, 237, 238, 239, 240, 257], "without": [38, 42, 49, 64, 94, 108, 119, 129, 131, 136, 139, 150, 190, 225, 234, 235, 240, 241, 257, 274], "appropri": [38, 41, 98, 99, 225, 229, 274], "rais": [38, 49, 54, 64, 93, 150, 254, 257, 261, 262, 263], "secur": [38, 41, 62, 97, 99, 225, 274], "administr": [38, 41, 62, 97, 225, 232], "ssa": [38, 41, 62, 74, 91, 93, 97, 134, 139], "nber": [38, 62, 93, 97, 134], "org": [38, 47, 49, 61, 62, 64, 93, 108, 119, 129, 131, 134, 136, 139, 141, 142, 143, 144, 146, 174, 182, 189, 234, 235, 240, 241], "crosswalk": [38, 62, 93, 97, 134], "certain": [38, 40, 42, 62, 80, 93, 94, 106, 126, 150, 171, 257], "patern": 38, "teh": [38, 70], "cm": [38, 39, 40, 41, 44, 45, 47, 50, 53, 54, 55, 61, 62, 63, 65, 66, 73, 74, 75, 79, 80, 83, 85, 86, 90, 244, 267, 268, 270], "mbsf_ab": [38, 41, 62], "mcr_bene_": [38, 41, 62], "mbsf_ab_2015": [38, 62], "p": [38, 40, 41, 44, 45, 47, 48, 51, 61, 62, 82, 86, 126, 131, 168, 216, 228, 232, 240, 270], "possibl": [38, 41, 44, 93, 98, 104, 118, 143, 150, 225, 228, 246, 257, 270, 274], "anoth": [38, 41, 85, 93, 95, 98, 99, 117, 126, 229], "dob": [38, 40, 41, 42, 47, 61, 62], "parse_d": [38, 62], "column_nam": [38, 62, 136, 141, 254], "to_dat": [38, 62, 193], "to_char": [38, 62, 136, 139], "00000000": [38, 62], "yyyymmdd": [38, 62], "postgresql": [38, 39, 40, 41, 43, 62, 79, 91, 93, 96, 99, 104, 105, 118, 119, 137, 228, 229, 232, 234, 235, 270, 274], "abandon": 39, "favor": 39, "reproduc": [39, 274], "deliv": 39, "resdac": [39, 41, 47, 56, 61, 62, 267, 270], "com": [39, 47, 62, 96, 119, 120, 169, 182, 189, 228, 231, 232, 240, 256], "data_model": [39, 47, 93, 99], "maxdata_demograph": 39, "ci3_d_medicaid": [39, 40], "processed_data": [39, 47], "cms_medicaid": [39, 40], "data_cms_medicaid": 39, "demographics_pati": 39, "nf": 39, "nsaph_ci3": 39, "obtain": [39, 49, 64, 98, 119, 129, 131, 136, 139, 234, 235, 240, 241], "script": [39, 47, 141, 167, 225, 232, 270, 274], "1_create_demographics_data": [39, 47], "medicaid_mortality_": 39, "ps_patient": 39, "2_process_enrollment_data": 39, "cvd_admissions_": 39, "ci3_health_data": 39, "cvd": 39, "1999_2012": 39, "desouza": 39, "claim": [39, 134, 270], "2_create_cvd_data": 39, "sandbox01": [39, 183], "model2": [39, 93], "gz": [39, 92, 93, 94, 99, 104, 118, 181, 193], "nohup": [39, 40], "medicaid_mortality_2005": 39, "enrollments_year": 39, "5000": 39, "ip_pati": 39, "maxdata_": [39, 40, 92, 93, 94, 104, 118], "_ip_": 39, "echo": [39, 230, 240, 241], "10000": [39, 62, 94, 105, 257, 259], "center": [40, 44, 79, 172, 174, 224, 256, 258, 267, 268, 270], "analyt": [40, 79, 235, 268, 270], "excel": [40, 270, 274], "semant": 40, "put": [40, 93, 99, 225], "framework": [40, 121, 226, 246, 270], "wrap": 40, "cwl": [40, 70, 73, 77, 78, 79, 80, 81, 82, 84, 87, 88, 91, 103, 141, 152, 153, 154, 199, 204, 207, 209, 218, 220, 221, 225, 228, 229, 231, 232, 234, 235, 240, 268, 270, 271, 273, 274], "parse_ft": [40, 79], "pyhton": 40, "univers": [40, 49, 64, 93, 99, 119, 129, 131, 136, 139, 182, 189, 254, 274], "increment": [40, 41, 72, 73, 75, 77, 92, 93, 94, 104, 118], "rce": [40, 41], "original_data": 40, "_ps_": [40, 92, 93, 94, 104, 118], "2021": [40, 119, 139, 164, 202, 240, 246], "09": [40, 62, 138], "25": [40, 62], "21": 40, "37": 40, "four": [40, 41, 225, 274], "fulfil": [40, 99], "monthli": [40, 41, 44, 61, 79, 88], "abov": [40, 41, 42, 94, 97, 225], "expos": 40, "thu": [40, 93, 99, 225], "hundr": [40, 96], "transpos": 40, "One": [40, 41, 42, 93, 183, 228, 274], "henc": [40, 41, 96, 225, 226, 274], "transposit": 40, "physic": [40, 226, 254], "think": 40, "virtual": [40, 93, 99, 104, 225, 274], "materi": [40, 41, 61, 62, 68, 82, 93, 97, 99, 104, 139, 183], "world": [40, 182, 189, 268], "term": [40, 271], "built": [40, 42, 66, 92, 94, 99, 101, 104, 151, 225, 274], "even": [40, 41, 199, 204, 207, 218, 232], "vast": 40, "amount": [40, 108, 176, 185], "non": [40, 41, 44, 254, 256], "instantan": 40, "oper": [40, 41, 42, 62, 96, 174, 274], "technic": [40, 41, 42, 93, 109], "quiri": 40, "often": [40, 267, 268, 274], "faster": [40, 108], "uniqu": [40, 147, 150, 255], "encrypt": [40, 47, 61], "agreement": [40, 234, 235, 240, 241, 270, 274], "dua": 40, "chronic": [40, 268], "condit": [40, 42, 49, 62, 64, 93, 119, 129, 131, 136, 139, 141, 185, 234, 235, 240, 241, 264, 268], "warehous": [40, 44, 268], "ccw": [40, 47, 61, 268], "protect": [40, 268, 270], "ident": [40, 117, 274], "unreli": 40, "7": [40, 47, 48, 61, 218, 274], "conflict": [40, 229], "birth": [40, 41, 62], "death": [40, 41, 47, 62], "ethnic": 40, "80": 40, "eighti": 40, "offici": [40, 47], "assign": [40, 47, 181, 193], "team": [40, 47], "cross": [40, 47], "histor": [40, 47], "enterpris": [40, 47], "ecr": [40, 47, 49, 64], "receiv": [40, 47, 56, 62, 143], "msis_id": [40, 47, 61], "state_cd": [40, 41, 47, 61], "ssn": [40, 47], "gender": [40, 47], "compar": [40, 47, 51, 96, 264], "against": [40, 47, 264], "exhaust": [40, 47], "stringent": [40, 47], "approxim": [40, 41, 47, 268], "8": [40, 47, 61, 96, 218, 233, 234, 240], "particular": [40, 47, 97, 145], "reassign": [40, 47], "patient": [40, 44, 51, 58, 62, 79, 80, 81, 82], "exclud": [40, 41, 61, 62, 93, 94, 150, 257, 264], "inconsist": [40, 41, 47, 93], "BY": [40, 41, 42, 45, 49, 62, 64, 93, 129, 131, 139, 141], "sql": [40, 41, 48, 70, 71, 74, 91, 96, 104, 106, 112, 114, 120, 127, 128, 131, 137, 190, 225, 268], "claus": [40, 42, 93], "rule": 40, "clearli": 40, "mark": 40, "duplic": [40, 41, 61, 62, 93], "count": [40, 41, 42, 45, 54, 61, 62, 87, 90, 99, 131, 136, 139, 141, 150, 257], "distinct": [40, 41, 49, 61, 62, 64, 136, 139, 268], "where": [40, 41, 42, 49, 61, 62, 64, 93, 94, 129, 136, 139, 141, 143, 144, 148, 172, 224, 225, 226, 228, 232, 254, 256, 271], "our": [40, 98, 108, 274], "dod": [40, 41, 61, 62], "race_ethnicity_cod": [40, 61], "earliest": [40, 41], "comma": [40, 41, 143, 268], "comm": 40, "dob_latest": [40, 41, 61, 62], "dod_earliest": [40, 41, 61, 62], "curat": 40, "variou": [40, 99, 106, 150, 246, 257, 270, 274], "strategi": [40, 171, 172, 178, 180, 181, 183, 184, 185, 193, 213, 218, 219, 220, 221], "establish": [40, 105], "later": [40, 56, 93, 270], "sop": 40, "systemat": 40, "neighbourhood": 40, "summar": [40, 270], "dure": [40, 41, 62, 93, 99, 228, 232, 274], "compris": 40, "conveni": [40, 99], "state_iso": [40, 41, 61, 62], "iso": [40, 41, 79, 120, 139, 154], "residence_counti": [40, 41, 61, 62, 93], "resid": [40, 41, 274], "alphabet": [40, 41], "fips5": [40, 41, 61, 62, 93, 134, 139, 141], "zip": [40, 41, 42, 51, 61, 62, 74, 79, 91, 92, 93, 94, 95, 97, 99, 104, 107, 118, 136, 138, 140, 141, 143, 145, 150, 154, 165, 170, 171, 172, 173, 175, 181, 182, 183, 189, 190, 193, 198, 199, 202, 204, 207, 209, 213, 218, 219, 220, 221, 257], "months_elig": [40, 61], "months_dual_elig": [40, 61], "state_count": [40, 41, 61, 62], "di": [40, 41, 61, 62], "quot": [40, 61, 62, 93, 94, 124, 135, 193, 230], "fact": 40, "signal": 40, "could": 40, "detal": 40, "bill": [40, 41], "discharg": [40, 41], "icd": [40, 41, 42], "intermedi": [40, 62], "ip": [40, 48, 51, 61, 62, 81, 270], "jenni": 40, "lee": 40, "februari": 40, "grant": [41, 80, 99, 119, 136], "privileg": [41, 99], "newli": [41, 70, 80], "drop": [41, 49, 64, 68, 86, 94, 104, 106, 112, 118, 120, 139, 216], "delet": [41, 86, 94, 216, 228], "replac": [41, 49, 64, 93, 94, 124, 126, 129, 136, 139, 150, 225, 255, 256, 257], "tupl": [41, 48, 51, 53, 104, 106, 108, 135, 150, 182, 184, 189, 254, 257], "empti": [41, 81, 93, 150], "part": [41, 62, 93, 96, 144, 148, 225, 229, 232], "taken": [41, 93, 97, 127, 134, 190], "ft": [41, 44, 46, 53, 54, 56, 63, 75, 76, 79, 80, 254, 267, 268], "accompani": [41, 76, 80, 99, 267], "deliver": 41, "posess": 41, "organ": [41, 80, 99, 182, 189], "therefor": [41, 141, 225, 229, 232, 254, 274], "unabl": 41, "ones": 41, "scratch": [41, 235], "two": [41, 42, 62, 79, 80, 93, 97, 99, 154, 181, 193, 225, 230, 232, 256, 274], "aka": [41, 62, 80, 81, 104, 118, 190, 230], "unfortun": [41, 96], "almost": 41, "pair": 41, "mbsf_ab_summari": 41, "mbsf_d_cmpnt": 41, "mbsf_abcd_summari": 41, "medpar_all_fil": 41, "similarli": 41, "insult": 41, "injuri": 41, "prior": 41, "preprocess": [41, 141, 213], "easier": 41, "join": [41, 42, 62, 84, 131, 143, 170, 175], "uniform": [41, 81, 82, 83, 99], "bene_id": [41, 42, 47, 49, 61, 62, 64], "intbid": 41, "qid": 41, "bid_5333": 41, "ssa_stat": 41, "state_cod": [41, 131, 139, 141], "bene_rsdnc_ssa_state_cd": 41, "medpar_bene_rsdnc_ssa_state_cd": 41, "bene_zip_cd": 41, "bene_zip": 41, "bene_mlg_cntct_zip_cd": 41, "medpar_bene_mlg_cntct_zip_cd": 41, "enrolyr": 41, "bene_enrollmt_ref_yr": 41, "rfrnc_yr": 41, "natur": [41, 42, 62], "sno": 41, "trace": 41, "sas7bdat": [41, 91, 115, 132, 135], "width": [41, 48, 54, 55, 254, 267], "intend": [41, 99, 104, 118, 246, 270], "human": 41, "difficult": 41, "pars": [41, 44, 46, 48, 52, 54, 56, 65, 66, 79, 108, 151, 253, 254], "partial": 41, "reli": 41, "known": [41, 183, 256], "extarct": 41, "mbsf": [41, 62], "hospit": [41, 42], "medpar": [41, 62, 80, 81], "below": [41, 96, 99, 105, 182, 189, 225, 228, 232], "visual": [41, 44, 94, 226], "extens": [41, 43, 94, 119, 136, 150, 257], "full": [41, 56, 140, 141, 150, 232, 257, 271, 273], "though": [41, 274], "divis": [41, 255], "pure": 41, "readabl": 41, "statement": [41, 70, 71, 95, 96, 99, 127], "integ": [41, 62, 111, 150, 168, 257], "form": [41, 51, 93], "last": [41, 135, 143, 144, 168], "dai": [41, 98, 143, 181, 182, 185, 189, 193], "rti_rac": 41, "triangl": [41, 62], "institut": [41, 62, 274], "hmo_ind": [41, 62], "advantag": [41, 270, 274], "hmo_cvg_count": [41, 62], "yob": [41, 62], "ssa2": [41, 62, 134, 139], "fips2": [41, 61, 62, 97, 111, 134, 139], "9": [41, 61, 121, 131, 218, 234, 235], "split": [41, 44, 135], "zip4": [41, 62], "respons": [41, 93, 99, 104, 117, 139, 150, 257], "_p": [41, 44, 62, 82], "latter": [41, 99, 143], "fips3": [41, 62, 97, 111, 134, 139], "absent": [41, 147], "essenti": [41, 232, 270], "care": [41, 51, 61, 62], "discrep": 41, "race_rti": [41, 62], "duplciat": 41, "show": [41, 92, 93, 94, 96, 124, 168, 183, 225], "greater": [41, 150, 257], "hll": [41, 62, 99, 136, 268], "hash": [41, 62, 93, 99, 136], "bene": [41, 62], "yearli": 41, "track": 41, "elig": [41, 44, 45, 49, 61, 64, 79, 88], "address": [41, 44, 141, 144, 225, 229, 246], "volatil": [41, 136, 139], "doe": [41, 42, 52, 55, 94, 150, 257, 261, 262, 263], "direct": [41, 95, 97, 176, 185, 274], "analog": 41, "word": [41, 99, 230], "leav": [41, 93], "arguabl": 41, "less": [41, 96, 141, 142, 146, 225], "sens": [41, 246, 274], "polici": [41, 97, 104], "arbitrari": [41, 225], "determinist": [41, 93], "encount": [41, 42, 44, 93], "ssa2_list": [41, 62], "ssa3_list": [41, 62], "reflect": 41, "associ": [41, 77, 78, 135, 190, 232, 270], "fips3_is_approxim": [41, 62], "fips3_valdi": [41, 62], "hmo": [41, 62], "mcr_ip_": [41, 62], "admission_d": [41, 42, 61, 62, 93], "discharge_d": [41, 42, 61, 62], "adm_day_of_week": [41, 62], "diagnos": [41, 62], "major": [41, 99], "diagnosi": [41, 42, 61], "pd_hll_hash": [41, 62], "icd_hll": [41, 62], "medicare_audit": [41, 62], "togeth": 41, "failur": 41, "distinguish": 41, "foreign": [41, 61, 93, 119], "sever": [41, 93, 150, 169, 232, 257, 264, 270, 274], "precis": [41, 115], "aggreg": [41, 42, 62, 84, 90, 93, 99, 143, 148, 150, 154, 156, 164, 167, 168, 169, 175, 180, 181, 183, 185, 190, 193, 199, 201, 204, 206, 207, 208, 213, 218], "qc_enrol": [41, 62], "qc_admiss": [41, 62], "percent": 41, "roughli": 41, "THEN": [41, 61, 62, 136, 139], "NOT": [41, 49, 62, 64, 119, 136, 225], "ambigu": [41, 62], "els": [41, 61, 62, 131, 136, 139, 228], "end": [41, 48, 49, 54, 61, 62, 64, 129, 136, 139, 152, 153, 155, 159, 168, 225, 254, 259], "AS": [41, 42, 49, 61, 62, 64, 119, 129, 131, 136, 139, 141, 234, 235, 240, 241], "consistent_dob": [41, 62], "consistent_dod": [41, 62], "consistent_sex": [41, 62], "consistent_rac": [41, 62], "numrecord": [41, 62], "hll_add_agg": [41, 62, 136], "bigint": [41, 62, 136], "numdistinctbeneficari": [41, 62], "bene_hl": [41, 62], "apach": [41, 44, 49, 64, 119, 129, 131, 136, 139, 225, 226, 229, 232, 234, 235, 240, 241, 270], "superset": [41, 44, 99, 270], "metric": 41, "hll_union_agg": 41, "AND": [41, 42, 49, 61, 62, 64, 131, 136, 139], "liter": [41, 258], "ok": [41, 62, 150, 257], "why": [41, 271], "appar": 41, "expens": [42, 96], "explain": [42, 225, 227], "optim": [42, 44, 62, 94, 174], "samplequeri": 42, "primari": [42, 49, 61, 64, 93], "secondari": 42, "timestamp": [42, 49, 64, 141], "bene_ag": 42, "admiss": [42, 44, 48, 51, 58, 61, 62, 79, 80, 84], "enrol": [42, 44, 45, 47, 58, 61, 62, 79, 80, 81, 82, 84, 88], "beneficiari": [42, 44, 45, 47, 49, 61, 62, 64, 79, 80, 84, 88], "29620": 42, "varchar": [42, 49, 61, 62, 64, 97, 111, 129, 136, 139, 141], "29633": 42, "18": [42, 225], "icd9": 42, "syntax": [42, 51], "explicitli": [42, 93, 94], "2962": 42, "fly": [42, 150, 257], "around": [42, 70, 99, 150, 174, 225, 256, 257], "unnest": [42, 61, 136], "horribl": 42, "solut": [42, 274], "29621": 42, "g": [42, 56, 80, 91, 92, 93, 94, 98, 104, 118, 126, 144, 148, 152, 153, 154, 155, 156, 158, 159, 172, 174, 180, 181, 182, 185, 189, 190, 193, 224, 225, 228, 232], "uml": 42, "websit": [42, 140, 141, 155, 156, 158, 173, 198, 221, 226, 268], "individu": [42, 44, 274], "enrolle": 42, "IN": [42, 136], "2963": 42, "peopl": 42, "who": [42, 270], "desc": [42, 48, 54, 62, 139, 141], "background": 43, "info": [43, 54, 132, 230, 264, 268], "wikipedia": [43, 62, 268], "facilit": 43, "cleans": [44, 270], "dedupl": 44, "tip": 44, "dashboard": [44, 99], "src": [44, 93, 99, 152, 154, 183, 234], "under": [44, 49, 64, 85, 94, 99, 119, 129, 131, 136, 139, 225, 234, 235, 240, 241], "reusabl": [44, 99], "_elig": [44, 49, 61, 64, 79], "inpati": [44, 48, 51, 58, 62, 79, 80, 84, 270], "_beneficiari": [44, 62], "_enrol": [44, 62, 82], "procedur": [44, 49, 50, 67, 95, 99, 113, 136, 225, 229, 274], "problem": [44, 225, 231, 274], "transact": [44, 75], "too": 44, "memori": [44, 91, 99, 108, 268], "helper": [44, 95, 97, 144, 148, 180, 232, 251], "dbconnectionconfig": [45, 101, 104, 121, 134], "n": [45, 62, 108, 115, 120, 235, 240, 249], "ord": [45, 54, 254], "verifi": [45, 87, 90], "expecteddata": 45, "cmsschema": [46, 66], "inpt": 46, "tp": 46, "reset": [46, 73, 92, 93, 94, 104, 118, 141, 144, 167, 168, 200, 205, 218, 257], "de_dupl": 47, "nsaphplatform": 47, "blob": [47, 61, 62, 182, 189, 256], "master": [47, 61, 62, 119, 169, 182, 189, 256], "intak": 47, "l29": 47, "l45": 47, "medicaid_script": 47, "seed": 47, "987987": 47, "correctli": [47, 96], "el_dod": [47, 48, 61], "l50": 47, "data_request": 47, "tree": [47, 225], "request_project": 47, "dec2019_medicaid_platform_cvd": 47, "remain": [47, 147, 246], "randomli": [47, 52], "l44": 47, "variat": 47, "across": [47, 226, 246, 270], "www2": [47, 173], "ccwdata": 47, "10280": 47, "19002246": 47, "guid": [47, 232], "pdf": 47, "723": [47, 61], "duplicatesexplor": 47, "init": [47, 48, 54, 66, 106, 225, 228, 232, 240], "explore_on": 47, "cursor": [47, 49, 51, 64, 120, 124, 129, 131], "explore_al": 47, "is_load": 47, "find_duplicate_d": 47, "date_typ": 47, "analyze_inconsistent_ag": 47, "arg": [47, 48, 50, 52, 54, 63, 65, 67, 105, 108, 113, 114, 127, 145, 234, 235], "tri": 48, "recogn": 48, "medicareft": 48, "type_of_data": 48, "cmsft": 48, "fts_path": [48, 52, 53, 55, 56], "on_after_read_fil": 48, "ftscolumn": 48, "callback": [48, 270, 274], "check_key_column": 48, "add_indic": 48, "medicaidft": 48, "medicaid_indic": 48, "el_dob": [48, 61], "el_sex_cd": [48, 61], "el_race_ethncy_cd": [48, 61], "c_type": 48, "c_format": 48, "c_width": 48, "label": [48, 150, 170, 190], "classmethod": [48, 51, 53, 56, 59, 60, 63, 105, 106, 112, 115, 117, 118, 121, 126, 144, 148, 171, 173, 180, 181, 193, 251, 257], "conv": [48, 54], "th": [48, 176, 183, 185, 202], "attribut": [48, 54], "ordin": [48, 254], "callabl": [48, 53, 104, 108, 117, 150, 257], "analyze_format": 48, "to_sql_typ": 48, "to_dict": 48, "to_fwf_column": 48, "po": [48, 54, 254], "fwfcolumn": [48, 254], "descriptor": [48, 254], "medicareftscolumn": 48, "long_nam": [48, 54], "short_nam": [48, 54], "nattr": 48, "medicaidftscolumn": 48, "6": [48, 61, 62, 218], "aliascolumn": 48, "alia": 48, "columnread": 48, "constructor": [48, 143, 144, 148, 180, 185, 254], "columnattribut": [48, 54], "mcr_type": 48, "file_nam": [48, 258], "guess": 48, "denot": [48, 93, 174, 254], "fist": 48, "element": [48, 150, 181, 182, 189, 193, 268], "second": [48, 96, 105], "decim": [48, 131], "copyright": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "c": [49, 64, 80, 119, 120, 129, 131, 136, 139, 168, 182, 183, 189, 225, 240, 244, 270, 274], "2022": [49, 64, 129, 131, 136, 139, 143, 152], "engin": [49, 64, 119, 129, 131, 136, 139, 232, 274], "faculti": [49, 64, 119, 129, 131, 136, 139], "art": [49, 64, 119, 129, 131, 136, 139], "scienc": [49, 64, 119, 129, 131, 136, 139, 226, 229, 274], "author": [49, 64, 119, 129, 131, 136, 139, 226], "michael": [49, 64, 119, 129, 131, 136, 139], "bouzini": [49, 64, 119, 129, 131, 136, 139], "licens": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "complianc": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241, 274], "unless": [49, 61, 62, 64, 93, 94, 99, 119, 129, 131, 136, 139, 181, 193, 234, 235, 240, 241], "applic": [49, 64, 119, 123, 129, 131, 136, 139, 143, 225, 226, 229, 232, 234, 235, 240, 241, 254], "law": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "agre": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "distribut": [49, 64, 119, 129, 131, 136, 139, 230, 234, 235, 240, 241], "basi": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "warranti": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "OR": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "OF": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "express": [49, 64, 93, 119, 129, 131, 136, 139, 218, 220, 234, 235, 240, 241], "impli": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "govern": [49, 64, 93, 119, 129, 131, 136, 139, 152, 153, 154, 234, 235, 240, 241, 268], "permiss": [49, 64, 119, 129, 131, 136, 139, 234, 235, 240, 241], "create_eligibility_by_beneficiari": [49, 64], "plpgsql": [49, 64, 99, 129, 136, 139], "declar": [49, 64, 96, 129, 136, 139], "cur_bene_id": [49, 64], "bene_cursor": [49, 64], "FOR": [49, 61, 62, 64, 119, 129, 136], "e2": [49, 64], "bene_rec": [49, 64], "loop": [49, 64, 129, 136], "insert": [49, 61, 62, 64, 91, 93, 99, 118], "INTO": [49, 64, 119, 136, 139], "_e": [49, 64], "commit": [49, 64, 75, 92, 93, 94, 104, 118], "notic": [49, 64, 234, 235, 240, 241], "create_eligibility_by_year_st": [49, 64], "y_cursor": [49, 64], "generate_seri": [49, 64], "2030": [49, 64], "state_cursor": [49, 64], "state_id": [49, 61, 62, 64, 139], "us_stat": [49, 61, 62, 64, 79, 139, 154], "IF": [49, 64, 119, 136, 139], "cascad": [49, 64], "WITH": [49, 64], "NO": [49, 64, 141], "alter": [49, 61, 64, 129, 225], "medicaid_audit": [49, 61, 64], "durat": [49, 64], "interv": [49, 64, 92, 93, 94, 104, 118, 234, 235], "s_rec": [49, 64], "y_rec": [49, 64], "init_cm": [50, 67], "extend": 51, "medicarecombinedview": 51, "dbtableconfig": [51, 101, 104], "supported_t": 51, "print_sql": 51, "generate_sql": 51, "get_tabl": 51, "table_sql": 51, "qtabl": 51, "get_column": [51, 106, 115], "candid": [51, 60], "ctype": 51, "macro": 51, "get_simple_column": 51, "find_column2arr": 51, "small": [52, 87, 140, 141], "subset": [52, 87, 204, 267], "purpos": [52, 129, 139, 180, 185, 199, 204, 207, 209, 213, 271, 272, 274], "pii": 52, "selector": [52, 65], "ftstupl": 52, "root": [52, 93, 106, 234, 235, 240, 244], "fts_file": 52, "dat_path": [52, 53], "dat_fil": 52, "find_fts_tupl": 52, "destin": [52, 56, 63, 65, 141, 144, 148, 150, 167, 168, 180, 181, 183, 185, 191, 193, 249, 257], "threshold": [52, 65], "float": [52, 65, 111, 114, 131, 171, 174, 189, 254, 274], "share": [52, 65, 232, 274], "dictionari": [52, 65, 91, 93, 109, 141, 143, 150, 254, 257], "medicaredataload": 53, "dat4ft": 53, "fwfreader": [53, 254], "get_fil": [53, 104], "medparparseexcept": 54, "msg": [54, 254], "cannot": [54, 67, 98, 225, 254, 264, 270, 274], "columndef": 54, "medicarefil": 54, "dir_path": 54, "dest": [54, 133, 168, 183, 257], "manipul": [54, 61, 91, 94, 99, 101, 104, 106, 271, 272, 274], "read_record": [54, 254], "ln": 54, "slice": [54, 171], "assert": 54, "count_lines_in_sourc": 54, "count_lines_in_dest": 54, "statu": [54, 63, 230, 244], "successfulli": [54, 254], "status_messag": 54, "messag": [54, 92, 93, 94, 168, 183, 230], "few": [56, 96, 225, 228, 230, 232], "my_data": 56, "medicareload": 56, "travers": [56, 58], "handle_empti": 56, "static": [56, 63, 66, 104, 105, 106, 114, 115, 120, 143, 151, 170, 191], "loader_for_csv": 56, "loaderconfig": [56, 94, 104, 117, 118, 126], "data_path": 56, "dataload": [56, 104], "loader_for_fwf": 56, "medicareregistri": 57, "registry_path": [57, 60], "init_registri": 57, "read_registri": 57, "semi": 58, "medicaresa": 58, "root_dir": [58, 60], "handle_sas_fil": 58, "file_path": [58, 59, 60, 126, 132, 135], "sasload": 59, "sasintrospector": 60, "add_sas_t": 60, "index_al": 60, "bool": [60, 63, 97, 102, 104, 105, 106, 117, 120, 128, 136, 139, 144, 148, 150, 173, 174, 180, 251, 254, 257, 258, 259], "dominici_data_pipelin": 61, "header": [61, 62, 93, 94, 150, 190, 254, 257], "audit": [61, 62, 93], "min": [61, 62, 141], "raceethn": [61, 62], "msi": [61, 62], "string_agg": [61, 62, 136, 139], "children": [61, 62, 93], "max_elg_cd": 61, "max_yr_dt": 61, "11": [61, 62, 218], "max_elg_cd_mo_1": 61, "max_elg_cd_mo_2": 61, "max_elg_cd_mo_3": 61, "max_elg_cd_mo_4": 61, "max_elg_cd_mo_5": 61, "max_elg_cd_mo_6": 61, "max_elg_cd_mo_7": 61, "max_elg_cd_mo_8": 61, "max_elg_cd_mo_9": 61, "max_elg_cd_mo_10": 61, "max_elg_cd_mo_11": 61, "max_elg_cd_mo_12": 61, "el_mdcr_ben": 61, "el_mdcr_ben_mo_1": 61, "el_mdcr_ben_mo_2": 61, "el_mdcr_ben_mo_3": 61, "el_mdcr_ben_mo_4": 61, "el_mdcr_ben_mo_5": 61, "el_mdcr_ben_mo_6": 61, "el_mdcr_ben_mo_7": 61, "el_mdcr_ben_mo_8": 61, "el_mdcr_ben_mo_9": 61, "el_mdcr_ben_mo_10": 61, "el_mdcr_ben_mo_11": 61, "el_mdcr_ben_mo_12": 61, "el_mdcr_dual": 61, "el_mdcr_dual_mo_1": 61, "el_mdcr_dual_mo_2": 61, "el_mdcr_dual_mo_3": 61, "el_mdcr_dual_mo_4": 61, "el_mdcr_dual_mo_5": 61, "el_mdcr_dual_mo_6": 61, "el_mdcr_dual_mo_7": 61, "el_mdcr_dual_mo_8": 61, "el_mdcr_dual_mo_9": 61, "el_mdcr_dual_mo_10": 61, "el_mdcr_dual_mo_11": 61, "el_mdcr_dual_mo_12": 61, "mc_combo": 61, "mc_combo_mo_1": 61, "mc_combo_mo_2": 61, "mc_combo_mo_3": 61, "mc_combo_mo_4": 61, "mc_combo_mo_5": 61, "mc_combo_mo_6": 61, "mc_combo_mo_7": 61, "mc_combo_mo_8": 61, "mc_combo_mo_9": 61, "mc_combo_mo_10": 61, "mc_combo_mo_11": 61, "mc_combo_mo_12": 61, "el_rstrct_bnft_flg": 61, "el_rstrct_bnft_flg_1": 61, "el_rstrct_bnft_flg_2": 61, "el_rstrct_bnft_flg_3": 61, "el_rstrct_bnft_flg_4": 61, "el_rstrct_bnft_flg_5": 61, "el_rstrct_bnft_flg_6": 61, "el_rstrct_bnft_flg_7": 61, "el_rstrct_bnft_flg_8": 61, "el_rstrct_bnft_flg_9": 61, "el_rstrct_bnft_flg_10": 61, "el_rstrct_bnft_flg_11": 61, "el_rstrct_bnft_flg_12": 61, "el_rsdnc_cnty_cd_ltst": 61, "zip9": 61, "el_rsdnc_zip_cd_ltst": 61, "renam": [61, 95, 99], "2005": [61, 199, 204, 207, 218], "substr": [61, 62, 143], "00": [61, 139], "ps2": [61, 62], "eligibility_cod": 61, "dual": 61, "januari": [61, 62, 185], "managed_care_cod": 61, "manag": [61, 62, 135, 226, 229, 268, 270, 274], "jan": 61, "medicare_elig": 61, "restrict": [61, 98, 107, 199, 204, 207, 209, 213], "benefit": [61, 62], "primary_kei": [61, 62, 93], "eligibility_ys_idx": 61, "invalid": [61, 62], "ignor": [61, 93], "target": [61, 62, 93, 106, 120, 129, 143, 150, 181, 193, 234, 235, 257], "admsn_dt": [61, 62, 93], "datetim": [61, 93, 121, 143, 193], "strptime": [61, 93], "srvc_end_dt": 61, "diag_cd_": 61, "required_before_loading_data": 61, "128": [61, 111], "adm_ys_idx": [61, 62], "source_column": 61, "yr_num": 61, "race_code_1": 61, "race_code_2": 61, "race_code_3": 61, "race_code_4": 61, "race_code_5": 61, "ethnicity_cod": 61, "el_ss_elgblty_cd_ltst": 61, "el_ss_elgblty_cd_mo": 61, "el_max_elgblty_cd_ltst": 61, "el_max_elgblty_cd_mo": 61, "el_mdcr_ann_xovr_old": 61, "msng_elg_data": 61, "el_mdcr_xovr_clm_bsd_cd": 61, "el_mdcr_ann_xovr_99": 61, "msis_to": 61, "msis_top": 61, "max_to": 61, "prvdr_id_nmbr": 61, "npi": 61, "taxonomi": 61, "type_clm_cd": 61, "adjust_cd": 61, "php_type": 61, "php_id": 61, "mdcd_pymt_amt": 61, "tp_pymt_amt": 61, "pymt_dt": 61, "chrg_amt": 61, "php_val": 61, "mdcr_coinsur_pymt_amt": 61, "mdcr_ded_pymt_amt": 61, "srvc_bgn_dt": 61, "diag_cd_1": 61, "diag_cd_2": 61, "diag_cd_3": 61, "diag_cd_4": 61, "diag_cd_5": 61, "diag_cd_6": 61, "diag_cd_7": 61, "diag_cd_8": 61, "diag_cd_9": 61, "prncpl_prcdr_dt": 61, "prcdr_cd_sys_1": 61, "prcdr_cd_1": 61, "prcdr_cd_sys_2": 61, "prcdr_cd_2": 61, "prcdr_cd_sys_3": 61, "prcdr_cd_3": 61, "prcdr_cd_sys_4": 61, "prcdr_cd_4": 61, "prcdr_cd_sys_5": 61, "prcdr_cd_5": 61, "prcdr_cd_sys_6": 61, "prcdr_cd_6": 61, "rcpnt_dlvry_cd": 61, "mdcd_cvrd_ip_dai": 61, "patient_status_cd": 61, "drg_rel_group_ind": 61, "drg_rel_group": 61, "ub_92_rev_cd_gp_1": 61, "ub_92_rev_cd_chgs_1": 61, "ub_92_rev_cd_units_1": 61, "ub_92_rev_cd_gp_2": 61, "ub_92_rev_cd_chgs_2": 61, "ub_92_rev_cd_units_2": 61, "ub_92_rev_cd_gp_3": 61, "ub_92_rev_cd_chgs_3": 61, "ub_92_rev_cd_units_3": 61, "ub_92_rev_cd_gp_4": 61, "ub_92_rev_cd_chgs_4": 61, "ub_92_rev_cd_units_4": 61, "ub_92_rev_cd_gp_5": 61, "ub_92_rev_cd_chgs_5": 61, "ub_92_rev_cd_units_5": 61, "ub_92_rev_cd_gp_6": 61, "ub_92_rev_cd_chgs_6": 61, "ub_92_rev_cd_units_6": 61, "ub_92_rev_cd_gp_7": 61, "ub_92_rev_cd_chgs_7": 61, "ub_92_rev_cd_units_7": 61, "ub_92_rev_cd_gp_8": 61, "ub_92_rev_cd_chgs_8": 61, "ub_92_rev_cd_units_8": 61, "ub_92_rev_cd_gp_9": 61, "ub_92_rev_cd_chgs_9": 61, "ub_92_rev_cd_units_9": 61, "ub_92_rev_cd_gp_10": 61, "ub_92_rev_cd_chgs_10": 61, "ub_92_rev_cd_units_10": 61, "ub_92_rev_cd_gp_11": 61, "ub_92_rev_cd_chgs_11": 61, "ub_92_rev_cd_units_11": 61, "ub_92_rev_cd_gp_12": 61, "ub_92_rev_cd_chgs_12": 61, "ub_92_rev_cd_units_12": 61, "ub_92_rev_cd_gp_13": 61, "ub_92_rev_cd_chgs_13": 61, "ub_92_rev_cd_units_13": 61, "ub_92_rev_cd_gp_14": 61, "ub_92_rev_cd_chgs_14": 61, "ub_92_rev_cd_units_14": 61, "ub_92_rev_cd_gp_15": 61, "ub_92_rev_cd_chgs_15": 61, "ub_92_rev_cd_units_15": 61, "ub_92_rev_cd_gp_16": 61, "ub_92_rev_cd_chgs_16": 61, "ub_92_rev_cd_units_16": 61, "ub_92_rev_cd_gp_17": 61, "ub_92_rev_cd_chgs_17": 61, "ub_92_rev_cd_units_17": 61, "ub_92_rev_cd_gp_18": 61, "ub_92_rev_cd_chgs_18": 61, "ub_92_rev_cd_units_18": 61, "ub_92_rev_cd_gp_19": 61, "ub_92_rev_cd_chgs_19": 61, "ub_92_rev_cd_units_19": 61, "ub_92_rev_cd_gp_20": 61, "ub_92_rev_cd_chgs_20": 61, "ub_92_rev_cd_units_20": 61, "ub_92_rev_cd_gp_21": 61, "ub_92_rev_cd_chgs_21": 61, "ub_92_rev_cd_units_21": 61, "ub_92_rev_cd_gp_22": 61, "ub_92_rev_cd_chgs_22": 61, "ub_92_rev_cd_units_22": 61, "ub_92_rev_cd_gp_23": 61, "ub_92_rev_cd_chgs_23": 61, "ub_92_rev_cd_units_23": 61, "15": [61, 131], "20": [62, 232, 264], "1900": [62, 193], "feder": [62, 93, 97, 134], "en": [62, 182, 189], "wiki": 62, "federal_information_processing_standard_state_cod": 62, "ansi": 62, "postal": [62, 97, 139], "cast": 62, "bene_dob": 62, "bene_birth_dt": 62, "bene_age_at_beg_ref_yr": 62, "clacul": 62, "19000000": 62, "death_dt": 62, "bef_dod": 62, "bene_dod": 62, "bene_death_dt": 62, "bene_sex_ident_cd": 62, "ff": 62, "bene_race_cd": 62, "dod_ndi": 62, "certif": 62, "ndi": 62, "deathmbsf": 62, "ndi_death_dt": 62, "rti": 62, "rti_race_cd": 62, "char": [62, 120, 254], "03": [62, 138, 185], "07": 62, "08": [62, 152], "hmoind": 62, "hmoind12": 62, "bene_hmo_ind_": 62, "string_to_arrai": 62, "coverag": 62, "hmo_mo": 62, "hmocovg": 62, "bene_hmo_cvrage_tot_mon": 62, "adminiss": 62, "medpar_": 62, "admission_date_raw": 62, "trim": 62, "999999999": 62, "medpar_admsn_dt": 62, "admsndt": 62, "discharge_date_raw": 62, "medpar_dschrg_dt": 62, "dschrg_dt": 62, "dschrgdt": 62, "medpar_admsn_day_cd": 62, "admsn_day_cd": 62, "admsndai": 62, "diag": 62, "medpar_dgns_cd_": 62, "dgns_cd0": 62, "dgns_cd": 62, "dgns_": 62, "n_cd": 62, "dgnscd": 62, "2003": [62, 134, 199, 204, 207, 218], "zip_to_fips3": [62, 139], "is_zip_to_fips_exact": [62, 97, 139], "fips3_list": 62, "ps_to_enrl_idx": 62, "yob_latest": 62, "age_min": 62, "validate_zip_fip": [62, 97, 139], "clean": [62, 232], "unifi": [62, 85], "hll_hashval": 62, "hyperloglog": [62, 268], "su": 62, "satisfi": [62, 93, 270, 274], "hll_cardin": 62, "citusdata": 62, "basic": [62, 98, 144, 168, 232], "hll_hash_text": 62, "bene_rsd_idx": 62, "bsy_idx": 62, "sy_idx": 62, "sy_iso_idx": 62, "fips_idx": 62, "zc_idx": 62, "scz_idx": 62, "diag1": 62, "primary_diagnosi": 62, "array_remov": 62, "diag2": 62, "diag3": 62, "diag4": 62, "diag5": 62, "diag6": 62, "diag7": 62, "diag8": 62, "diag9": 62, "diag10": 62, "diag11": 62, "diag12": 62, "diag13": 62, "diag14": 62, "diag15": 62, "diag16": 62, "diag17": 62, "diag18": 62, "diag19": 62, "diag20": 62, "diag21": 62, "diag22": 62, "diag23": 62, "diag24": 62, "diag25": 62, "admission_year": 62, "hll_arr_agg": [62, 136], "adm_ys_iso_idx": 62, "adm_ysdz_idx": 62, "qc_enrl_ben": 62, "qc_adm_union": 62, "discard": [62, 84, 144, 168], "medparfileset": 63, "medparconvert": 63, "source_path": [63, 249], "verbos": [63, 94, 101, 104], "basepath": 63, "convert_dataset": 63, "design": [66, 151, 226, 274], "update_medicaid": 66, "update_medicar": 66, "built_in_registry_path": [66, 191], "advanc": [67, 94, 228, 232, 274], "dynam": 67, "populateconfig": 67, "tablepopul": 67, "ddl": [68, 77, 97, 99, 104, 106], "recreat": [68, 92, 93, 94, 104, 118, 199, 204, 218, 228], "By": [68, 93, 94, 123, 225, 229], "sloppi": [68, 94, 104, 118], "input_data": 68, "pg_json_dump": [69, 99, 157], "priviligi": [70, 71], "memebr": [70, 71], "nsaph_admin": [70, 71], "airflow": [70, 87, 91, 99, 152, 154, 163, 164, 229, 232, 234, 235, 236, 237, 238, 239, 240, 244, 268, 270, 274], "dag": [70, 163, 164, 225, 226, 230, 232, 234, 235, 236, 237, 238, 239], "grant_select": [70, 71, 136], "grant_log": [70, 80], "grant_err": [70, 80], "grant_read_access": [70, 80], "psql": [71, 225, 274], "stdout": [71, 74, 165], "err": [71, 74, 76], "forc": [72, 92, 93, 94, 102, 104, 118], "shortcut": [73, 77, 78], "unpack": [73, 75, 76, 79, 80, 85, 218], "recurs": [73, 75, 76, 79, 80, 85, 91, 92, 93, 94, 104, 118, 225, 228, 232, 244], "reset_log": [73, 199, 200, 204, 205, 218], "create_log": [73, 77, 78], "reset_err": [73, 199, 200, 204, 205, 218], "create_err": [73, 77, 78], "load_raw_medicaid": 73, "init_cms_db": 74, "pgpl": 74, "inspect": 75, "yun": 78, "dbm": [79, 96, 268, 270, 274], "resource1_log": [79, 87, 154], "resource2_log": [79, 87, 154], "parse_log": [79, 87], "ps_reset_log": [79, 87], "ps_create_log": [79, 80, 82, 87], "ps_index_log": [79, 87, 88], "ps_vacuum_log": [79, 87, 88], "ip_reset_log": [79, 87], "ip_create_log": [79, 80, 81, 87], "ip_index_log": [79, 87], "ip_vacuum_log": [79, 87], "ben_create_log": [79, 87, 88], "ben_index_log": [79, 87, 88], "ben_vacuum_log": [79, 87, 88], "mnth_create_log": [79, 87, 88], "mnth_index_log": [79, 87, 88], "mnth_vacuum_log": [79, 87, 88], "enrlm_create_log": [79, 87, 88], "enrlm_index_log": [79, 87, 88], "enrlm_vacuum_log": [79, 87, 88], "elgb_prepare_log": [79, 87], "elgb_create_log": [79, 87, 88], "elgb_index_log": [79, 87, 88], "elgb_vacuum_log": [79, 87, 88], "admissions_reset_log": [79, 87], "admissions_create_log": [79, 87], "admissions_index_log": [79, 87], "admissions_vacuum_log": [79, 87], "parse_err": [79, 87], "ps_reset_err": [79, 87], "ps_create_err": [79, 80, 82, 87], "ps_index_err": [79, 87, 88], "ps_vacuum_err": [79, 87, 88], "ip_reset_err": [79, 87], "ip_create_err": [79, 80, 81, 87], "ip_index_err": [79, 87], "ip_vacuum_err": [79, 87], "ben_create_err": [79, 87, 88], "ben_index_err": [79, 87, 88], "ben_vacuum_err": [79, 87, 88], "mnth_create_err": [79, 87, 88], "mnth_index_err": [79, 87, 88], "mnth_vacuum_err": [79, 87, 88], "enrlm_create_err": [79, 87, 88], "enrlm_index_err": [79, 87, 88], "enrlm_vacuum_err": [79, 87, 88], "elgb_create_err": [79, 87, 88], "elgb_prepare_err": [79, 87], "elgb_index_err": [79, 87, 88], "elgb_vacuum_err": [79, 87, 88], "admissions_reset_err": [79, 87], "admissions_create_err": [79, 87], "admissions_index_err": [79, 87], "admissions_vacuum_err": [79, 87], "ensure_resourc": [79, 154], "presenc": [79, 154, 270], "letter": [79, 154], "abbrevi": [79, 154], "3166": [79, 120, 154], "us_iso": [79, 154], "load_p": 79, "load_ip": 79, "create_beneficiari": [79, 88], "matview": [79, 82, 84, 88], "create_monthly_view": [79, 88], "create_enrol": [79, 88], "prepare_elig": 79, "prerequisit": [79, 225, 227, 228, 229], "create_elig": [79, 88], "load_admiss": 79, "least": [80, 226, 230, 256], "nb": [80, 225, 228, 232], "dicrectori": 80, "immedi": 80, "parent": [80, 93, 106, 110], "mbsf_abcd_xyzacdfrtwe_request12345": 80, "initdb_log": 80, "initdb_err": 80, "load_raw_log": 80, "load_raw_err": 80, "ps2_create_log": [80, 82], "ps2_create_err": [80, 82], "bene_view_log": [80, 82], "bene_view_err": [80, 82], "bene_table_create_log": [80, 82], "bene_table_index_log": [80, 82], "bene_table_vacuum_log": [80, 82], "bene_table_create_err": [80, 82], "bene_table_index_err": [80, 82], "bene_table_vacuum_err": [80, 82], "enrlm_view_log": [80, 82], "enrlm_view_err": [80, 82], "enrlm_table_create_log": [80, 82], "enrlm_table_index_log": [80, 82], "enrlm_table_vacuum_log": [80, 82], "enrlm_table_create_err": [80, 82], "enrlm_table_index_err": [80, 82], "enrlm_table_vacuum_err": [80, 82], "adm_create_log": [80, 81], "adm_create_err": [80, 81], "adm_populate_log": [80, 81], "adm_populate_err": [80, 81], "adm_index_log": [80, 81], "adm_index_err": [80, 81], "adm_vacuum_log": [80, 81], "adm_vacuum_err": [80, 81], "qc_ev_create_log": 80, "qc_ev_create_err": 80, "qc_av_create_log": 80, "qc_av_create_err": 80, "qc_enrollmen343_create_log": 80, "qc_enrollmen343_index_log": 80, "qc_enrollmen343_vacuum_log": 80, "qc_enrollmen343_create_err": 80, "qc_enrollmen343_index_err": 80, "qc_enrollmen343_vacuum_err": 80, "qc_admission697_create_log": 80, "qc_admission697_index_log": 80, "qc_admission697_vacuum_log": 80, "qc_admission697_create_err": 80, "qc_admission697_index_err": 80, "qc_admission697_vacuum_err": 80, "initdb": 80, "load_raw_data": 80, "load_raw_medicar": 80, "medicare_beneficiari": 80, "medicare_admiss": 80, "medicare_qc": 80, "debug": [81, 123, 180, 185, 264], "create_ip": 81, "medicare_combine_t": [81, 82], "create_admissions_t": 81, "populate_admissions_t": 81, "index_admissions_t": 81, "vacuum_admissions_t": 81, "ps2_index_log": 82, "ps2_vacuum_log": 82, "ps2_index_err": 82, "ps2_vacuum_err": 82, "create_p": 82, "create__ps_view": 82, "create_bene_view": 82, "preliminari": 82, "create_bene_t": 82, "create_enrlm_view": 82, "create_enrlm_t": 82, "ev_create_log": 84, "ev_create_err": 84, "av_create_log": 84, "av_create_err": 84, "enrollmen343_create_log": 84, "enrollmen343_index_log": 84, "enrollmen343_vacuum_log": 84, "enrollmen343_create_err": 84, "enrollmen343_index_err": 84, "enrollmen343_vacuum_err": 84, "admission697_create_log": 84, "admission697_index_log": 84, "admission697_vacuum_log": 84, "admission697_create_err": 84, "admission697_index_err": 84, "admission697_vacuum_err": 84, "create_enrl_qc_view": 84, "create_adm_qc_view": 84, "create_enrollments_qc_t": 84, "create_admissions_qc_t": 84, "examin": [85, 94, 162, 225, 227, 228, 230], "examnin": 85, "incompat": 85, "warn": [85, 264], "far": [85, 229], "compat": [85, 93], "subdirectori": [85, 94, 126, 225, 232, 274], "previou": [86, 216, 246], "opt": [87, 152, 154, 163, 164, 225, 234, 235, 236, 237, 238, 239, 244], "nsaph_test": 87, "mini_random_data": 87, "verification_log": 87, "verification_err": 87, "prcoess": 88, "index_p": 88, "vacuum_p": 88, "mediciad": 90, "wide": [91, 270, 274], "pg_keyword": 91, "keyword": 91, "parallel": [91, 92, 94, 99, 104, 108, 118, 152, 181, 190, 193], "miscellan": 91, "columnar": [91, 99, 115], "builder": [91, 112, 140, 141, 183], "monitor": [91, 99, 112, 141, 147, 150, 226], "tune": 91, "better": [91, 246], "tackl": 91, "incomplet": [91, 93], "hdf5": [91, 98, 99, 107, 110, 268], "quer": [91, 110], "collector": [91, 141, 150, 167, 181, 184, 193, 257], "executor": [91, 99], "pool": 91, "overflow": 91, "queue": [91, 99, 108], "localhost": [91, 96, 99, 105, 225, 230, 234, 235, 236, 237, 238, 239], "host": [91, 94, 96, 99, 105, 119, 141, 147, 150, 225, 228, 229, 236, 237, 238, 239], "resolv": [91, 99], "finder": 91, "sas_explor": 91, "hud": [91, 97, 138], "h": [92, 93, 94, 168, 183, 228, 232, 243], "buffer": [92, 93, 94, 104, 118], "autocommit": [92, 93, 94, 101, 104], "exit": [92, 93, 94, 168, 183, 240, 241, 244], "gzip": [92, 93, 94, 104, 118, 144, 148, 150, 168, 180, 183, 251, 257], "tar": [92, 93, 94, 104, 118], "tgz": [92, 93, 94, 104, 118], "archiv": [92, 93, 94, 101, 104, 118, 135, 150, 240, 257], "nsaph2": [92, 94, 96, 105, 119, 152, 154], "convent": 93, "role": 93, "knowledg": [93, 99, 106, 182, 189, 274], "linkag": 93, "gridmet": [93, 107, 131, 178, 180, 181, 182, 185, 189, 190, 191, 193, 198, 215, 216, 234, 244, 268, 270, 271, 272, 273], "forest": 93, "treelik": 93, "my_domain": 93, "fro": 93, "ye": [93, 141], "auto": 93, "extern": [93, 150, 270, 274], "itself": [93, 225, 270, 274], "quote_minim": [93, 94], "minim": 93, "quote_al": 93, "quote_nonnumer": 93, "nonnumer": 93, "quote_non": 93, "hard_link": 93, "integr": 93, "relationship": 93, "child": 93, "upon": 93, "never": 93, "ehnc": 93, "mostli": [93, 225], "trigger": [93, 230], "behaviour": 93, "normal": [93, 99, 225, 232], "tabular": 93, "multi_column": 93, "whose": [93, 174], "theoret": 93, "occupi": 93, "storag": [93, 147], "were": 93, "referenc": 93, "curli": 93, "bracket": 93, "fips_dict": 93, "sequenti": [93, 190], "spell": 93, "btree": [93, 111], "dialect": 93, "index_column": 93, "nrc": [93, 109], "usda": [93, 109], "wp": [93, 109], "portal": [93, 109, 138], "nra": [93, 109], "nri": [93, 109], "cid": [93, 109], "nrcs143_013696": [93, 109], "hard": 93, "usag": [93, 119, 136, 141, 183, 231, 236, 237, 238, 239, 274], "nest": [94, 126], "crate": [94, 126], "rel": [94, 126, 176, 185, 232], "o": [94, 126, 225, 240, 246, 270], "underscor": [94, 126], "good": 94, "idea": 94, "whitespac": 94, "edit": [94, 225, 228], "preserv": 94, "project_load": 94, "my_schema": 94, "valuabl": 94, "my_temp_schema": 94, "postgr": [94, 96, 105, 225, 228, 231, 234, 235, 236, 237, 238, 239], "temporari": [94, 150, 257], "increas": [94, 256], "ram": 94, "retriev": [94, 98, 140, 141, 204, 274], "projectload": [94, 126], "__doc__": 94, "instanti": [94, 251], "lookup": [95, 97], "climat": [96, 98, 190, 266, 270, 271], "pollut": [96, 141, 142, 146, 183, 219, 266, 271, 273], "venv": 96, "bin": [96, 183, 240, 241, 243, 244], "older": 96, "next": [96, 254], "pip": [96, 169, 244], "home": [96, 99, 141, 143, 183, 232, 240, 246, 271], "mimic": [96, 105], "mimicii": [96, 105], "password": [96, 105, 119, 228, 231], "cluster": [96, 105, 226, 274], "uni": [96, 105], "dbuser": [96, 105], "ssh_user": [96, 105], "johndo": [96, 105], "my": 96, "laptop": 96, "ssh": [96, 99, 105], "tunnel": [96, 99, 105], "mbouzini": 96, "usernam": [96, 136, 228, 230, 231], "million": 96, "easili": 96, "did": 96, "cost": 96, "tutori": 96, "minut": [96, 232], "suggest": 96, "pai": 96, "attent": [96, 274], "scan": 96, "usp": [97, 138], "depart": 97, "urban": 97, "offic": 97, "pd": 97, "ssa2fip": 97, "zip2fip": [97, 139], "hud_zip2fip": [97, 111, 138, 139], "zip_to_fip": [97, 139], "unambigu": 97, "otherwis": [97, 143, 147], "potenti": [98, 99, 176, 185], "crude": 98, "wil": 98, "dispatch": [98, 99], "reuqest": 98, "determin": [98, 150, 257], "prototyp": 98, "search": [98, 143], "necessarili": 98, "iin": 98, "gi": [99, 234, 244, 271, 272], "jsonlin": 99, "bound": [99, 108], "intens": [99, 226], "flux": 99, "commonwl": 99, "brief": 99, "overview": [99, 227, 271], "deprec": [99, 100, 102, 105], "deploy": [99, 225, 269, 271, 274], "plugin": 99, "easi": [99, 232], "datasourc": 99, "probabl": [99, 150, 225], "toolkit": [99, 141, 143, 144, 148], "focus": 99, "flat": 99, "readm": [99, 150, 228, 232, 257], "concept": [99, 227], "auxiliari": 99, "mainten": 99, "task": [99, 108, 141, 147, 167, 177, 183, 184, 190, 222, 228], "dataread": [99, 114, 135], "transpar": 99, "Its": 99, "hdf5_export": 99, "pg": 99, "net": 99, "threadpoolexecutor": [99, 108], "prevent": 99, "oom": [99, 108, 268], "huge": [99, 108], "abl": [99, 183, 225], "accomod": 99, "downstream": 99, "workspac": [99, 145], "example_request": 99, "handler": 99, "resource1": 99, "resource2": 99, "wheel": [99, 245], "deploi": [99, 226, 228, 229, 232, 271], "nativ": 99, "dbmss": 99, "anybodi": 99, "health": [99, 234, 235, 266, 270, 271, 272], "territori": 99, "genindex": 99, "modindex": 99, "add_gis_column": [100, 116], "dry": [101, 104], "commonconfig": [101, 104, 137], "create_t": [102, 106], "encod": [103, 150, 257], "parse_arg": [103, 113, 127], "set_tabl": 104, "print_ddl": 104, "print_table_ddl": 104, "execute_sql": 104, "connxn": [104, 117, 137], "insert_from_select": 104, "is_parallel": 104, "get_connect": 104, "has_been_ingest": 104, "rollback": 104, "close": [104, 105, 135, 254, 259], "import_data_from_fil": 104, "enumer": [104, 118, 193, 264], "dataloaderact": [104, 118], "introduct": [104, 227, 271], "multi": [104, 226], "nomenclatur": 104, "credenti": 105, "silent": [105, 131], "app_name_postfix": [105, 131], "default_filenam": 105, "default_sect": 105, "read_config": 105, "host_nam": 105, "resolve_host": 105, "default_port": 105, "connect_to_databas": 105, "connect_via_tunnel": 105, "get_database_typ": 105, "test_connect": 105, "resultsetdeprec": [105, 110], "kwarg": [105, 108, 114], "psycopg2": [105, 131, 234, 235, 245], "realdictcursor": [105, 131], "dedic": [106, 232], "spec": 106, "set_sloppi": 106, "list_column": 106, "list_source_column": 106, "has_hard_linked_children": 106, "fqn": [106, 124, 128], "ufqn": 106, "find_depend": 106, "spillover_t": 106, "append_ddl": 106, "get_select_from": 106, "ddl_for_nod": 106, "node": [106, 135], "generate_insert_from_select": 106, "create_object_from": 106, "obj_typ": 106, "map_selected_column": 106, "selected_column": 106, "cdef": 106, "pdef": 106, "create_true_t": 106, "need_index": 106, "get_index_ddl": [106, 120], "add_index_by_ddl": 106, "get_multi_column_index_ddl": 106, "add_index": [106, 110], "is_arrai": 106, "is_gener": 106, "extract_generation_cod": 106, "other_column": 106, "qualifi": [106, 135], "get_column_typ": 106, "has_column_spec": 106, "column_spec": 106, "view_column_spec": 106, "table_fqn": 106, "find_mapped_column_nam": 106, "column1": 106, "table2": 106, "view_column_join": 106, "list_identifi": 106, "create_stat": 106, "list_of_t": 106, "add_fk_valid": 106, "pk": 106, "pt": 106, "fk_column": 106, "parse_wildcard_column_spec": 106, "is_column_wildcard": 106, "get_columns_as_dict": 106, "request_148302": 107, "sitecod": 107, "tmmx": [107, 131, 176, 182, 183, 185, 189, 202], "rmax": [107, 131, 176, 183, 185, 202, 204], "ferndal": 107, "allston": 107, "newton": 107, "capac": 108, "reach": 108, "until": [108, 256], "signific": 108, "lead": 108, "danger": [108, 176, 185], "caus": [108, 229], "thread_initi": 108, "blockingthreadpoolexecutor": 108, "max_queue_s": 108, "timeout": [108, 234, 235], "max_work": 108, "thread_name_prefix": 108, "worker": 108, "initarg": 108, "_blockingthreadpoolexecutor__fn": 108, "schedul": [108, 193, 226, 231, 234, 235, 244], "fn": 108, "wait_for_complet": 108, "wait": [108, 228], "clear": [110, 141, 147, 167, 228], "idx": [110, 129], "append": [110, 150, 257], "type_nam": [110, 141], "to_hdf5": 110, "dtype": [110, 264], "map2d": 110, "path_to_user_request": 110, "db_ini": 110, "fips2i": 111, "fips3i": 111, "zip5": 111, "res_ratio": [111, 139], "bus_ratio": 111, "oth_ratio": 111, "tot_ratio": 111, "usps_zip_pref_c": 111, "usps_zip_pref_st": 111, "z2f_zip_idx": 111, "ON": [111, 119, 136], "z2f_zip2_idx": 111, "z2f_cnty_idx": 111, "z2f_f2i_idx": 111, "z2f_f2s_idx": 111, "z2f_f3i_idx": 111, "z2f_f3s_idx": 111, "z2f_zfs1_idx": 111, "z2f_zfs2_idx": 111, "z2f_yzip_idx": 111, "z2f_yzip2_idx": 111, "z2f_ycnty_idx": 111, "find_nam": [112, 137], "indexerconfig": 112, "indexbuild": 112, "cnxn": [112, 131], "print_stat": 112, "drop_al": 112, "act": 112, "load_data": 113, "sql_file": 113, "get_sql_dir": 113, "me": 113, "init_cor": 113, "root_table_nam": 114, "read_batch": 114, "import_fil": 114, "log_step": 114, "1000000": 114, "push": 114, "batch": [114, 225], "drilldown": 114, "get_autocommit": 114, "log_progress": [114, 120], "timer": 114, "get_thread_tim": 114, "get_tim": 114, "get_cumulative_tim": 114, "stamp_tim": 114, "get_timestamp": 114, "reset_tim": 114, "column_name_replac": [115, 120], "load_rang": [115, 120], "csv_reader": [115, 120], "unquot": [115, 120], "fopen": [115, 120, 141, 150, 167, 257], "handle_csv": 115, "handle_json": 115, "sas2db_typ": 115, "handle_sa": 115, "append_sql_column": 115, "load_csv": 115, "load_fst": 115, "load_sa": 115, "load_json": 115, "guess_str": 115, "v": [115, 176, 183, 185, 240, 257, 259, 271], "v2": 115, "max_val": 115, "guess_typ": [115, 120], "reconcil": 115, "cell_typ": 115, "column_typ": 115, "db_type": 115, "append_file_column": 115, "append_record_column": 115, "classifi": 115, "inconsistenttyp": 115, "diff": 117, "iter": [117, 171, 230, 258], "loaderbas": 117, "find_file_in_path": 117, "fname": 117, "get_domain": 117, "get_pid": 117, "execute_with_monitor": 117, "on_monitor": 117, "log_act": [117, 137], "pid": [117, 121], "towardsdatasci": 119, "ebec152827f3": 119, "postgres_fdw": 119, "server": [119, 152, 153, 154, 226, 274], "127": 119, "port": [119, 229, 234, 235, 246], "5432": [119, 225, 234, 235, 236, 237, 238, 239], "dbname": 119, "admin": [119, 228, 231], "TO": [119, 129, 136], "index_method": 120, "customcolumn": 120, "extraction_method": 120, "extract_valu": 120, "input_sourc": 120, "metadata_fil": 120, "get_entri": [120, 141, 150, 167, 257], "concurrent_indic": 120, "to_dir": 120, "add_column": 120, "make_column": 120, "include_in_index": 120, "make_fips_column": 120, "make_iso_column": 120, "anchor": 120, "simplemap": 120, "citi": 120, "parse_fips12": 120, "make_int_column": 120, "build_indic": 120, "type_from_metadata": 120, "add_data": [120, 201, 206, 208, 220], "copy_data": 120, "t0": 120, "t1": 120, "statist": [121, 172, 181, 193, 224, 268], "dbmonitorconfig": 121, "dbactivitymonitor": 121, "get_inst": 121, "get_indexing_progress": 121, "get_act": [121, 251], "lib": [121, 234, 235], "msg_len": 121, "32": [121, 225], "get_hostname_as_localhost": 122, "app_nam": 123, "init_log": 123, "with_thread_id": 123, "func": [123, 144, 148, 180, 251], "conn": 124, "flush": [124, 193, 257], "result_set": 124, "dump": [124, 131, 143], "fd": 124, "corrector": 124, "import_t": 124, "add_state_fip": 124, "is_relative_to": 126, "purepath": 126, "remove_ext": 126, "new_domain": 126, "save_registri": 126, "user_request": 128, "find_tabl": 128, "generate_select": 128, "collect_t": 128, "generate_from": 128, "aux": 128, "generate_wher": 128, "used_t": 128, "all_tabl": 128, "reduce_t": 128, "generate_order_bi": 128, "aim": [129, 169, 270], "indici": 129, "rename_indic": 129, "i_cursor": 129, "schemanam": 129, "indexnam": 129, "pg_index": 129, "tablenam": 129, "new_nam": 129, "cmd": [129, 234, 235], "get_resource_dir": 130, "name2path": 130, "get_resourc": 130, "sy": 131, "avg": [131, 141], "273": 131, "rmin": [131, 176, 183, 185, 202, 204], "arithmetic_mean": [131, 141], "pm25": [131, 140, 141, 143, 144, 148, 152, 153, 154, 155, 156, 158, 159, 163, 167, 168, 182, 189, 218, 220, 221], "county_tmmx": 131, "county_rmin": 131, "r1": 131, "observation_d": [131, 136], "county_rmax": 131, "r2": 131, "county_interp": 131, "pm25_daili": [131, 164], "date_loc": [131, 141], "county_cod": [131, 139, 141], "def": 131, "db_ini_fil": 131, "db_conn_nam": 131, "sample_queri": 131, "cursor_factori": 131, "k": [131, 176, 185, 256], "isinst": 131, "__name__": 131, "__main__": 131, "argv": 131, "simul": 132, "ssafil": 134, "ssa5": 134, "set_year": 134, "meta": [134, 183, 254], "basenam": [135, 141, 150, 167, 257], "fulli": 135, "piec": 135, "dot": 135, "entry_to_path": 135, "arcjv": 135, "csvlikejsonread": 135, "returns_map": [135, 259], "buffer_s": [135, 257, 259], "has_head": 135, "delimit": 135, "open_fst": 135, "open_csv": 135, "lambda": 135, "open_sas7bdat": 135, "open_fwf": 135, "open_json": 135, "get_path": 135, "regex": 135, "count_row": 136, "bodi": [136, 139], "cnt": [136, 139], "estimate_row": 136, "reltupl": 136, "pg_class": 136, "oid": 136, "regclass": 136, "has_column": 136, "information_schema": 136, "table_schema": 136, "get_year": 136, "anyel": 136, "yr": 136, "elsif": 136, "zip_as_text": 136, "immut": [136, 139], "btrim": [136, 139], "00000": [136, 139], "sch": 136, "nspname": 136, "pg_namespac": 136, "arr": 136, "anyarrai": 136, "hx": 136, "hll_hash_ani": 136, "hy": 136, "hudus": 138, "usps_crosswalk": 138, "zip2fipscrosswalk": 138, "url_pattern": 138, "zip_county_": 138, "xlsx": 138, "m2q": 138, "quarter": 138, "ratio": 139, "num_counti": 139, "exact": [139, 274], "fips": 139, "z2f_yz1_idx": 139, "z2f_z2_idx": 139, "z2f_r_idx": 139, "z2f_c_idx": 139, "z2f_exact_idx": 139, "_year": 139, "_zip": 139, "ex": 139, "fips2stat": 139, "state_fip": 139, "fips2state_iso": 139, "state2ssa2": 139, "fips2ssa3": 139, "airnow": [140, 145, 146, 153, 159, 167, 183, 268, 270, 271, 273], "airnowprocess": [140, 141], "aq": [140, 142, 146, 150, 152, 153, 155, 159, 167, 268, 270, 271, 273], "annual": [140, 148, 150, 154, 156, 167, 168], "no2": [140, 141, 143, 144, 148, 152, 153, 154, 155, 156, 158, 159, 167, 168], "nitrogen": [140, 141], "daili": [140, 148, 150, 156, 167, 168, 176, 183, 185, 199, 204, 207, 213, 268], "particl": [140, 141], "tuner": [140, 141, 183], "airnowapi": [141, 142, 143, 144, 146], "webservic": [141, 142, 146], "reliabl": [141, 142, 146], "compon": [141, 176, 185, 227, 270, 271, 272], "airnowdownload": [141, 143, 167], "dump_csv": [141, 143, 167], "write_csv_head": [141, 143, 167], "download_rang": [141, 143, 167], "ozon": [141, 143, 144, 148, 167, 168], "pm10": [141, 143, 144, 167, 168], "co": [141, 143, 144, 167, 168], "so2": [141, 143, 144, 167, 168], "airnowcontext": [141, 142, 143, 144, 167], "enum": [141, 144, 150, 167, 169, 175, 183, 185, 222, 251], "start_dat": [141, 143, 144, 167, 168], "compress": [141, 144, 148, 167, 168, 180, 183, 251], "end_dat": [141, 143, 144, 167, 168], "cfg": [141, 144, 167, 168], "proxi": [141, 144, 152, 153, 154, 155, 156, 159, 163, 164, 167, 197, 198, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 218, 221, 225], "airnow_setup": [141, 165, 167], "setup": [141, 145, 167, 225, 229, 241], "airnow_shap": [141, 159, 167], "download_shap": [141, 146, 167, 173, 175, 192], "collect_download": [141, 147, 167], "is_download": [141, 147, 150, 167, 257], "max_temp": [141, 148, 167, 168], "min_temp": [141, 148, 167, 168], "aqscontext": [141, 147, 148, 150, 167], "merge_year": [141, 148, 150, 167, 168], "cardin": [141, 144, 167, 251], "aqs_expand": [141, 158, 167], "expand_data": [141, 149, 167], "add_monitor_kei": [141, 150, 167], "download_data": [141, 150, 152, 153, 167], "destination_path": [141, 150, 167], "collect_annual_download": [141, 150, 167], "collect_daily_download": [141, 150, 167], "collect_aqs_download_task": [141, 150, 167], "as_stream": [141, 150, 167, 257], "as_cont": [141, 150, 167, 257], "as_csv_read": [141, 150, 167, 257], "file_as_stream": [141, 150, 167, 257], "file_as_csv_read": [141, 150, 167, 257], "check_http_respons": [141, 150, 167, 257], "write_csv": [141, 150, 167, 257], "csvwriter": [141, 150, 167, 193, 257], "listcollector": [141, 150, 167, 193, 257], "csvfilewrapp": [141, 150, 167, 257], "is_readm": [141, 150, 167, 257], "get_readm": [141, 150, 167, 257], "is_dir": [141, 150, 167, 257], "epaconfig": [141, 151, 167], "create_domain_yaml": [141, 151, 167], "create_table_yaml": [141, 151, 167], "neg": [141, 150, 257], "is_nul": 141, "is_autoincr": 141, "is_generatedcolumn": 141, "fullaqscod": 141, "latitud": [141, 170, 184, 189], "longitud": [141, 170, 184, 189], "utc": 141, "aqi": 141, "int4": 141, "sitenam": 141, "agencynam": 141, "intlaqscod": 141, "statefp": 141, "countyfp": 141, "stusp": 141, "mean_valu": 141, "airnow_pm25_2022": [141, 152], "site_num": 141, "parameter_cod": [141, 152, 153, 154, 155, 156, 158, 159, 163, 164], "poc": 141, "datum": 141, "parameter_nam": 141, "sample_dur": 141, "pollutant_standard": 141, "metric_us": 141, "method_nam": 141, "units_of_measur": 141, "event_typ": 141, "observation_count": 141, "observation_perc": 141, "completeness_ind": 141, "valid_day_count": 141, "required_day_count": 141, "exceptional_data_count": 141, "null_data_count": 141, "primary_exceedance_count": 141, "secondary_exceedance_count": 141, "certification_ind": 141, "num_obs_below_mdl": 141, "arithmetic_standard_dev": 141, "c_1st_max_valu": 141, "c_1st_max_datetim": 141, "c_2nd_max_valu": 141, "c_2nd_max_datetim": 141, "c_3rd_max_valu": 141, "c_3rd_max_datetim": 141, "c_4th_max_valu": 141, "c_4th_max_datetim": 141, "c_1st_max_non_overlapping_valu": 141, "c_1st_no_max_datetim": 141, "c_2nd_max_non_overlapping_valu": 141, "c_2nd_no_max_datetim": 141, "c_99th_percentil": 141, "c_98th_percentil": 141, "c_95th_percentil": 141, "c_90th_percentil": 141, "c_75th_percentil": 141, "c_50th_percentil": 141, "c_10th_percentil": 141, "local_site_nam": 141, "state_nam": 141, "county_nam": 141, "city_nam": 141, "cbsa_nam": 141, "date_of_last_chang": 141, "scope_t": 141, "c_1st_max_hour": 141, "method_cod": 141, "caller": 143, "runtim": [143, 225, 229, 232, 270, 274], "o3": 143, "pm2": 143, "requested_d": 143, "serv": 143, "ehad": 143, "hourli": 143, "dictinari": 143, "28": 143, "invok": 143, "mnemon": [144, 148, 150, 168], "enum_cl": [144, 148, 180, 251], "cl": [144, 148, 180, 251], "1992": [144, 148, 168, 180, 183, 251], "1995": [144, 148, 168, 180, 183, 251], "1998": [144, 148, 168, 180, 183, 251], "1993": [144, 148, 168, 180, 183, 251], "1994": [144, 148, 168, 180, 183, 251], "previous": [144, 147, 168], "include_default": [144, 148, 180, 251], "alias": [144, 148, 180, 234, 235, 251], "valid_valu": [144, 148, 180, 251], "rigid": [144, 148, 180, 251], "argumentpars": [144, 148, 180, 251], "add_argu": [144, 148, 180, 251], "aqsweb": [147, 150], "airdata": [147, 150], "download_fil": [147, 150], "job": [147, 190, 230], "_sphinx_paramlinks_epa": 147, "necessari": [147, 165], "anyth": [147, 225, 228], "everyth": 147, "42602": [148, 164], "44201": [148, 152, 153, 154, 155, 156, 158, 159, 168], "88101": [148, 152, 153, 154, 155, 156, 158, 159, 164], "68104": 148, "temperatur": [148, 176, 185], "68103": 148, "concaten": [148, 168], "consecut": [148, 168], "singular": [148, 180, 251], "download_aqs_data": 150, "dictread": [150, 257], "writer": [150, 181, 183, 184, 193, 257], "dictwrit": [150, 257], "flt": 150, "rewrit": [150, 257], "omit": [150, 257], "downloadtask": [150, 257], "contiguous_year_seg": 150, "contigu": [150, 183], "taht": 150, "ylabel": 150, "stream": [150, 257], "binari": [150, 245, 257], "byte": [150, 254, 257], "send": [150, 257], "csvreader": [150, 257], "io": [150, 182, 189, 257], "larg": [150, 232, 257], "check_siz": [150, 257], "equal": [150, 257], "newer": [150, 257], "write_head": [150, 184, 257], "tranmsform": [150, 257], "out_stream": [150, 193, 257], "file_like_object": [150, 257], "sep": [150, 257], "null_replac": [150, 257], "na": [150, 257], "markdown": [150, 245, 257, 270], "_sphinx_paramlinks_nsaph_util": [150, 254, 257], "io_util": [150, 246], "possibli": [150, 257], "runner": [152, 154, 225, 230, 245], "sample_airnow": 152, "Or": [152, 154, 228], "xxxxxxxx": 152, "yyyi": [152, 153, 155, 159, 185, 190], "zzzz": 152, "xxxx": 152, "yyyyyyyyi": 152, "31": 152, "downolad": [152, 153, 155, 159], "mm": [152, 153, 155, 159, 176, 185, 190], "dd": [152, 153, 155, 159, 185, 190], "symbol": [152, 153, 154, 155, 156, 158, 159], "shapes_data": 152, "download_log": [152, 153, 199, 201, 202, 203, 204, 206, 207, 208], "get_shap": [152, 201, 206, 208, 221], "download_airnow": [152, 153], "sample_aqs_annu": 154, "agreg": 154, "pm25_annual": 154, "expand_log": 154, "introspect_log": 154, "introspect_err": 154, "download_aq": 154, "expand_aq": 154, "wget": [156, 197, 240], "downlaod": 162, "defint": 162, "xxx": 163, "airnow_pm25_2018_2020": 163, "30": [163, 185, 234, 235, 264], "240": [163, 164], "64": [163, 164, 232], "17": [163, 164, 225], "3128": [163, 164], "no2_annu": 164, "2020": [164, 168, 183, 199, 204, 207], "environemnt": 165, "shape_dir": 165, "1990": [168, 183], "annot": [169, 175], "observ": [169, 175, 256], "raster": [169, 171, 172, 175, 178, 180, 181, 182, 183, 185, 189, 193, 213, 218, 219, 220, 221], "egg": 169, "gisannot": [170, 175], "shape_fil": [170, 198, 209, 210, 213, 219, 220], "cr": [170, 268], "epsg": [170, 268], "4326": [170, 268], "coordin": [170, 171, 174, 180, 181, 182, 183, 185, 189, 193, 268], "df": [170, 257, 264], "layer": [171, 181, 182, 184, 189, 193], "band": [171, 178, 180, 181, 182, 183, 185, 189, 190, 193, 197, 199, 201, 202, 203, 204, 206, 207, 208, 209, 210, 213, 214, 218, 220, 221], "prop": [171, 175], "statscount": [171, 175], "rasterizationstrategi": [171, 172, 175, 178, 180, 181, 184, 185, 193, 224], "affin": [171, 172, 174, 182, 189, 224], "vector": [172, 224, 256, 259], "pixel": [172, 182, 189, 224], "along": [172, 224], "render": [172, 224], "cell": [172, 174, 224], "polygon": [172, 180, 182, 183, 185, 189, 190, 223, 224], "all_touch": [172, 175, 183, 224], "altern": [172, 224, 225, 274], "arithmet": [172, 224], "downscal": [172, 175, 183, 213, 218, 219, 224], "factor": [172, 182, 189, 224], "get_affine_transform": [172, 182, 189, 224], "gisdownload": [173, 175, 192], "county_templ": [173, 175], "genz": 173, "shp": 173, "cb_": 173, "_us_county_500k": 173, "zip_templ": [173, 175], "_us_zcta510_500k": 173, "output_dir": 173, "strict": [173, 274], "download_zip": [173, 175], "download_counti": [173, 175], "pointinrast": [174, 175, 193], "rasterstat": 174, "bilinear": [174, 175], "pythonhost": 174, "_modul": 174, "completely_mask": [174, 175], "partially_mask": [174, 175], "window": [174, 175, 255, 256], "2x2": 174, "encompass": 174, "is_mask": [174, 175], "treat": 174, "belong": 174, "fraction": 174, "col": 174, "gridmetvari": [176, 178, 180, 181, 185, 193], "bi": [176, 183, 185], "burn": [176, 185], "nfdr": [176, 185], "fire": [176, 185], "erc": [176, 183, 185], "energi": [176, 185, 226], "releas": [176, 185], "etr": [176, 183, 185], "evapotranspir": [176, 185], "alfalfa": [176, 185], "fm100": [176, 183, 185], "dead": [176, 185], "fuel": [176, 185], "moistur": [176, 185], "fm1000": [176, 183, 185], "pet": [176, 183, 185], "pr": [176, 183, 185], "precipit": [176, 185], "humid": [176, 185, 204], "sph": [176, 183, 185, 202, 204], "humididi": [176, 185], "kg": [176, 185], "srad": [176, 183, 185, 202], "surfac": [176, 183, 185, 268], "downward": [176, 185], "shortwav": [176, 185], "radiat": [176, 185], "w": [176, 181, 185, 193], "wind": [176, 185], "degre": [176, 183, 185], "clockwis": [176, 185], "north": [176, 185], "tmmn": [176, 183, 185, 202], "vpd": [176, 183, 185], "vapor": [176, 185], "pressur": [176, 185], "deficit": [176, 185], "kpa": [176, 185], "veloc": [176, 185], "10m": [176, 185], "gridmetcontext": [177, 180, 181, 185, 190, 193, 195], "gridmettask": [177, 181, 193], "subtask": [177, 193], "raw_download": [180, 183, 185], "shapes_dir": [180, 182, 183, 185, 189], "datefilt": [180, 185], "destination_file_nam": [181, 193], "variable_geography_year": [181, 193], "find_shape_fil": [181, 182, 189, 193], "downloadgridmettask": [181, 193], "ncdf4": [181, 182, 189, 193], "get_url": [181, 193], "computegridmettask": [181, 193], "infil": [181, 184, 193], "outfil": [181, 184, 193], "date_filt": [181, 193], "unidata": [181, 193], "netcdf": [181, 183, 184, 193, 218], "gridemt": [181, 193], "wt": [181, 184, 193], "compute_one_dai": [181, 193], "computeshapestask": [181, 193], "_unidata": [181, 193], "ucar": [181, 193], "computepointstask": [181, 193], "points_fil": [181, 193], "site_id": [181, 193], "get_atmos_url": [182, 189], "atmospher": [182, 189, 197], "composit": [182, 189, 197], "get_nkn_url": [182, 189], "idaho": [182, 189], "ui": [182, 189, 232], "northwest": [182, 189], "network": [182, 189, 234, 235], "geography_typ": [182, 189], "shape_typ": [182, 189], "geo_typ": [182, 183, 189, 190], "get_vari": [182, 189, 193], "gee": [182, 189], "stac": [182, 189], "cloud": [182, 189, 226, 274], "wutw2spmec7am9rk6xmxutstkmtbvidthk": [182, 189], "get_dai": [182, 189, 193], "fo": [182, 189, 221], "nc_file": [182, 189], "rasterio": [182, 189], "readthedoc": [182, 189], "matrix": [182, 189], "equat": [182, 189], "imag": [182, 189, 226, 234, 235], "georeferenc": [182, 189], "disaggreg": [182, 189], "rdocument": [182, 189], "forg": [182, 189, 233, 240], "pkg": [182, 189], "high": [183, 226, 227, 268, 274], "km": 183, "24th": 183, "meteorolog": [183, 268], "1979": 183, "yesterdai": 183, "cite": [183, 226], "metdata": 183, "xy": 183, "coord": 183, "forget": [183, 232], "pythonpath": 183, "zip_shape_fil": 183, "gridmet_tool": [183, 222], "launcher": [183, 213, 222], "init_t": [183, 199, 204, 218], "gridmet_dwnl_onli": 183, "gridmet_humid": 183, "gridmet_increment": 183, "gridmet_local_shap": 183, "rearrang": 183, "washu": [183, 271, 273], "box": [183, 230, 271, 273], "extra_column": 184, "collect_data": [184, 193], "fall": 185, "decemb": 185, "dayofmonth": 185, "march": 185, "check_shape_fil": 189, "get_address": 189, "moment": 190, "collect_task": 190, "execute_sequenti": 190, "skeleton": 191, "create_yaml": 191, "count_lin": [193, 257], "writerow": [193, 257], "get_result": [193, 257], "get_kei": 193, "force_standard_api": 193, "make_point": 193, "block_siz": 193, "65536": 193, "wustlfil": 195, "parse_file_nam": 195, "calendar": 198, "isntead": [199, 204, 207, 218], "2002": [199, 204, 207, 218], "2004": [199, 204, 207, 218], "2006": [199, 204, 207, 218], "2007": [199, 204, 207, 218], "registry_log": [199, 204, 207, 209], "registry_err": [199, 204, 207], "download_err": [199, 201, 202, 203, 204, 206, 207, 208], "process_log": [199, 204, 207, 209, 210], "process_err": [199, 204, 207], "make_registri": [199, 204, 207], "down": [199, 204, 207, 209, 225, 228, 231, 243], "aggregate_data": [201, 206, 208, 220, 221], "aggregate_err": [201, 206, 208, 218, 220, 221], "aggregate_log": [201, 206, 208, 218, 220, 221], "nc": [209, 210], "process_data": 210, "mv": 214, "wustl": 218, "make_table_nam": 218, "evalu": [218, 220], "javascript": [218, 220], "wustl_one_year": 218, "wustl_file_processor": 219, "netcdf_data": 219, "csv_data": 219, "findfil": 220, "exepect": 220, "wustl_aggreg": 220, "gographi": 220, "process_fil": 221, "wustl_one_fil": 221, "relvant": 221, "mind": [225, 228, 230, 232], "docker": [225, 227, 229, 230, 231, 236, 237, 238, 239, 270, 274], "bring": 225, "With": 225, "shell": [225, 234, 235, 240, 270, 274], "simplic": 225, "repeat": 225, "templat": [225, 228, 249], "env_example_nopostgres_conda": 225, "env_example_postgres_conda": 225, "env_example_nopostgres_noconda": 225, "env_example_postgres_noconda": [225, 228], "cp": [225, 228, 232], "compose_profil": [225, 236, 237, 238, 239], "airflow_conda_env": [225, 234, 235, 236, 237, 238, 239], "conda_default": [225, 233, 236, 237, 238, 239], "mycondaenv": 225, "prefer": 225, "rebuild": [225, 274], "shut": 225, "webserv": [225, 226, 228, 230, 231, 234, 235, 244], "restart": [225, 232, 234, 235], "txt": [225, 240], "install_conda": 225, "simpli": 225, "python_sample_project": 225, "install_requir": 225, "lst": [225, 241], "subfold": 225, "install_project": [225, 240], "sh": [225, 231, 232, 240, 244], "r_sample_project": [225, 230], "internet": [225, 232, 274], "capabl": [225, 232], "subproject": 225, "nginx": 225, "redirect": 225, "behind": [225, 274], "enable_proxy_fix": 225, "my_host": 225, "myorg": 225, "_airflow_www_user_usernam": [225, 230, 231, 234, 235, 236, 237, 238, 239], "_airflow_www_user_password": [225, 230, 231, 234, 235, 236, 237, 238, 239], "reus": 225, "rdbm": [225, 229], "subsect": 225, "machin": [225, 226, 232], "consol": [225, 228], "sudo": [225, 230], "createus": 225, "superus": 225, "createrol": 225, "createdb": 225, "login": [225, 231], "inherit": [225, 246], "owner": 225, "bridg": [225, 234, 235], "adjust": [225, 228], "pg_hba": 225, "conf": 225, "data_directori": 225, "compos": [225, 227, 228, 231, 232, 236, 237, 238, 239, 243, 270, 274], "subnet": [225, 234, 235], "172": [225, 234, 235, 236, 237], "16": [225, 234, 235, 236, 237], "238": [225, 234, 235, 236, 237], "24": [225, 234, 235], "gatewai": 225, "bottom": 225, "listen": 225, "listen_address": 225, "linux": [225, 240], "13": [225, 234, 235, 270], "systemctl": 225, "network_nam": 225, "web_server_container_ip": 225, "scheduler_container_ip": 225, "uncom": 225, "postgre_us": [225, 228, 234, 235, 236, 237, 238, 239], "postgre_pass": [225, 228, 234, 235, 236, 237, 238, 239], "postgre_db": [225, 228, 234, 235, 236, 237, 238, 239], "postgre_serv": [225, 234, 235, 236, 237, 238, 239], "desktop": 225, "docker0": 225, "workaround": 225, "postgres_port": [225, 234, 235, 236, 237, 238, 239], "web_server_port": [225, 235, 236, 237, 238, 239], "8080": [225, 230, 234, 235, 236, 237, 238, 239], "airflow__core__load_exampl": [225, 234, 235, 236, 237, 238, 239], "airflow__webserver__expose_config": [225, 234, 235, 236, 237, 238, 239], "dags_fold": [225, 234, 235, 236, 237, 238, 239], "dags_dir": [225, 228, 234, 235, 236, 237, 238, 239], "volum": [225, 228, 234, 235, 236, 237, 238, 239], "project_dir": [225, 234, 235, 236, 237, 238, 239], "logs_dir": [225, 234, 235, 236, 237, 238, 239], "cwl_tmp_folder": [225, 234, 235, 236, 237, 238, 239], "cwl_inputs_fold": [225, 234, 235, 236, 237, 238, 239], "cwl_outputs_fold": [225, 234, 235, 236, 237, 238, 239], "cwl_pickle_fold": [225, 234, 235, 236, 237, 238, 239], "stand": 226, "portabl": [226, 274], "scalabl": 226, "varieti": 226, "hardwar": [226, 232], "workstat": 226, "meet": [226, 264], "bioinformat": [226, 229], "medic": 226, "astronomi": 226, "learn": 226, "programmat": 226, "graph": [226, 230], "nice": 226, "graphic": 226, "gui": 226, "translat": 226, "rdbmss": 226, "orchestr": [226, 270, 274], "rational": 227, "howto": [227, 232], "short": 227, "quickli": 228, "crete": 228, "foromeplatform": 228, "cd": [228, 232, 240, 241, 244], "submodul": [228, 232, 244, 274], "docker_buildkit": [228, 232, 243], "buildkit_progress": [228, 232, 243], "mkdir": [228, 232], "rf": [228, 232], "authent": 228, "daemon": 228, "upgrad": 228, "buildkit": 228, "cach": [228, 232, 243], "cat": [228, 232, 241, 243], "tee": [228, 232, 243], "fle": 228, "trivial": 229, "regardless": 229, "tcp": 229, "mess": 229, "third": [230, 232], "termin": 230, "exec": [230, 231, 240, 244], "bash": [230, 240, 241, 243, 244], "ic": 230, "1st": 230, "success": 230, "pi": 230, "tmp": 230, "l416_dsl": 230, "140592653839794": 230, "noconda": 230, "rpi": 230, "s7tumyy5": 230, "rscript": [230, 240], "tmpmkit67pd": 230, "stg19d1507c": 230, "992d": 230, "4722": 230, "82a7": 230, "fb24a87ff427": 230, "059059": 230, "enter": 230, "browser": 230, "passowrd": 230, "tab": 230, "click": 230, "plai": 230, "button": 230, "container_nam": [231, 234, 235], "startup": 231, "entrypoint": 231, "prune": [231, 243], "l": [231, 240], "grep": [231, 240], "rm": 231, "docker_postgr": 231, "complain": 231, "No": 231, "yet": 231, "collabor": [232, 270], "forom": [232, 270], "fork": [232, 270], "infrastructur": [232, 246, 270, 274], "iac": [232, 270, 274], "approach": [232, 270, 274], "29": 232, "carefulli": 232, "sequenc": 232, "vm": 232, "stabl": 232, "speed": 232, "live": 232, "obvious": 232, "straightforward": 232, "proper": 232, "guidelin": 232, "caveat": 232, "equival": 232, "hardreset": 232, "parti": [232, 270], "broken": 232, "effort": 232, "safe": 232, "refresh": 232, "downsid": 232, "lost": 232, "aw": 232, "sound": 232, "illustr": 232, "70": 232, "bypass": 232, "unpredict": 232, "consequ": 232, "channel": 233, "foundat": [234, 235, 240, 241], "asf": [234, 235, 240, 241], "contributor": [234, 235, 240, 241], "regard": [234, 235, 240, 241], "ownership": [234, 235, 240, 241], "common_paramet": [234, 235], "airflow_build_param": [234, 235], "dockerfil": [234, 235], "airflow_env": [234, 235], "airflow_hom": [234, 235], "airflow__core__executor": [234, 235], "localexecutor": [234, 235], "airflow__core__sql_alchemy_conn": [234, 235], "airflow__core__fernet_kei": [234, 235], "airflow_conn_metadata_db": [234, 235], "airflow_var__metadata_db_schema": [234, 235], "airflow__scheduler__scheduler_heartbeat_sec": [234, 235], "airflow__core__dags_are_paused_at_cr": [234, 235], "airflow__core__dags_fold": [234, 235], "_airflow_db_upgrad": [234, 235], "_airflow_www_user_cr": [234, 235], "airflow__webserver__enable_proxy_fix": [234, 235], "airflow__webserver__base_url": [234, 235], "base_url": [234, 235, 236, 237, 238, 239], "airflow__logging__base_log_fold": [234, 235], "airflow_volum": [234, 235], "cwl_airflow": 234, "data_platform": [234, 244], "nsaph_gi": 234, "bind": [234, 235], "sock": [234, 235], "airflow_image_nam": [234, 235], "myairflow": [234, 235], "service_healthi": [234, 235], "healthcheck": [234, 235], "curl": [234, 235], "retri": [234, 235], "postgres_us": [234, 235], "postgres_password": [234, 235], "postgres_db": [234, 235], "postgres_host_auth_method": [234, 235], "trust": [234, 235], "pg_isreadi": [234, 235], "driver": [234, 235], "ipam": [234, 235], "dominici_nsaph_l3": 235, "lab": 235, "denom_by_year_csv": 235, "rundir": 235, "cwl_rundir": 235, "pointer": [236, 237, 238, 239], "https_proxi": 240, "anaconda3": 240, "x86_64": 240, "chmod": 240, "condabin": 240, "eval": 240, "hook": 240, "auto_activate_bas": 240, "bashrc": 240, "uninstal": 240, "pushd": [240, 241, 244], "pathlib": 240, "popd": [240, 241, 244], "deactiv": 240, "cenv_fil": 240, "cenv": 240, "optpars": 240, "numpi": 240, "scipi": 240, "dataclass": 240, "rpy2": [240, 259], "r_script_install1": 240, "install_github": 240, "fi": [240, 241], "install_cwl_airflow": 240, "usr": 240, "captur": 240, "conda_env": 240, "project_list": 241, "Not": 241, "dir": 241, "dist": 241, "whl": 241, "marko": 245, "paramiko": 245, "sshtunnel": 245, "cwltool": 245, "20210816212154": 245, "cwlref": 245, "pytz": 245, "wtform": 245, "sqlalchemi": 245, "23": 245, "independ": [246, 270], "pyfst": 246, "simplifi": [246, 270], "26": 246, "sabath": 246, "interpolat": 246, "logic": [246, 256], "metholdologi": 246, "spot": 246, "modulecollector": 249, "orphan": 249, "autogener": 249, "nthe": 249, "automodul": 249, "undoc": 249, "get_narg": 251, "get_help": 251, "is_requir": 251, "add_to": 251, "set_empty_arg": 251, "get_header_level": 252, "read_sect": 252, "insert_sect": 252, "cwlparser": 253, "input_file_path": 253, "output_file_path": 253, "image_file_path": [253, 258], "mu": 254, "suppli": 254, "feasibl": 254, "fwfmeta": 254, "record_len": 254, "number_of_row": 254, "rlen": 254, "ncol": 254, "nrow": 254, "ret_dict": 254, "ist": 254, "good_lin": 254, "bad_lin": 254, "on_parse_except": 254, "ftsparseexcept": 254, "interpolate_var": 255, "tvar": 255, "by_var": 255, "ma_num": 255, "Will": 255, "missing": [255, 256], "vale": 255, "interpolate_ma": 255, "dimens": 255, "intiti": 255, "num_vec": 256, "steffenmoritz": 256, "imputet": 256, "na_ma": 256, "side": [256, 274], "hte": 256, "np": 256, "roll": 256, "imput": 256, "get_indic": 256, "vec": 256, "doesn": 256, "calc_weight": 256, "decreas": 256, "exponenti": 256, "distanc": 256, "get_indici": 256, "nearbi": 256, "sizeof_fmt": 257, "suffix": 257, "add_url": 257, "is_up_to_d": 257, "is_transform": 257, "as_dict": 257, "json_or_yaml_fil": 257, "dataframe2csv": 257, "fst2csv": 257, "specialvalu": 257, "nan": 257, "is_miss": 257, "is_untyp": 257, "is_yaml_or_json": 257, "mdcreator": 258, "add_head": 258, "add_text": 258, "add_tabl": 258, "align": 258, "first_row_is_head": 258, "add_imag": 258, "choose_cran_mirror": 259, "ensure_packag": 259, "read_fst": 259, "robject": 259, "vector2list": 259, "fstreader": 259, "read_next": 259, "current_row": 259, "current_map": 259, "rewind": 259, "madeupcontext": 261, "mytestcas": 261, "methodnam": [261, 262, 263], "runtest": [261, 262, 263], "valueerror": [261, 262, 263], "test_default_context": 261, "test_custom_valid": 261, "interpolationtest": 262, "test_ma_interpol": 262, "qctest": 263, "test_test": 263, "less_than": 264, "lt": 264, "greater_than": 264, "gt": 264, "data_typ": 264, "no_miss": 264, "no_nan": 264, "count_miss": 264, "count_nan": 264, "40": 264, "critic": 264, "expectationerror": 264, "val": 264, "yaml_fil": 264, "load_yaml": 264, "purchas": 267, "slect": 267, "expans": 268, "air": 268, "agenc": [268, 270], "iogp": 268, "geodet": 268, "wgs84": 268, "hierarch": 268, "algorithm": 268, "popular": 268, "compani": 268, "wg": 268, "84": 268, "cartographi": 268, "geodesi": 268, "satellit": 268, "gp": 268, "etl": [270, 274], "elt": [270, 274], "eventu": [270, 274], "throughout": 270, "goe": 270, "docutil": 270, "augment": 270, "readi": [270, 274], "publicli": [270, 274], "publish": 270, "pieplin": 270, "architectur": 271, "census_workflow": [271, 273], "acronym": 271, "keyston": 274, "modern": 274, "scientif": 274, "challeng": 274, "hand": 274, "proprietari": 274, "continu": 274, "involv": 274, "heavi": 274, "sensit": 274, "propos": 274, "widest": 274, "adopt": 274, "commerci": 274, "academ": 274, "imper": 274, "exacerb": 274, "healthcar": 274, "inher": 274, "confidenti": 274, "handi": 274, "firewal": 274, "littl": 274, "administ": 274, "container": 274, "tcl": 274, "perl": 274, "tclu": 274, "perlu": 274, "pythonu": 274, "Such": 274, "pre": 274, "prebuilt": 274, "cento": 274, "ubuntu": 274, "redhat": 274, "openshift": 274, "ibm": 274, "puppet": 274, "provis": 274, "terraform": 274}, "objects": {"census": [[23, 0, 0, "-", "assemble_data"], [12, 0, 0, "-", "calculate_density"], [23, 0, 0, "-", "census_info"], [23, 0, 0, "-", "cli"], [15, 0, 0, "-", "do_qc"], [23, 0, 0, "-", "exceptions"], [17, 0, 0, "-", "interpolate_data"], [23, 0, 0, "-", "query"], [23, 0, 0, "-", "tigerweb"], [23, 0, 0, "-", "utils"], [22, 0, 0, "-", "write_data"]], "census.assemble_data": [[23, 1, 1, "", "DataPlan"], [23, 1, 1, "", "VariableDef"]], "census.assemble_data.DataPlan": [[23, 2, 1, "", "add_geoid"], [23, 2, 1, "", "adjust_geo_fields"], [23, 2, 1, "", "assemble_data"], [23, 2, 1, "", "calculate_densities"], [23, 2, 1, "", "create_missingness"], [23, 2, 1, "", "get_var_names"], [23, 2, 1, "", "interpolate"], [23, 2, 1, "", "quality_check"], [11, 4, 1, "", "supported_out_formats"], [23, 2, 1, "", "write_data"], [23, 2, 1, "", "write_schema"]], "census.assemble_data.DataPlan.calculate_densities.params": [[23, 3, 1, "", "sq_mi"], [23, 3, 1, "", "variables"]], "census.assemble_data.DataPlan.interpolate.params": [[23, 3, 1, "", "max_year"], [23, 3, 1, "", "method"], [23, 3, 1, "", "min_year"]], "census.assemble_data.DataPlan.params": [[23, 3, 1, "", "county"], [23, 3, 1, "", "geometry"], [23, 3, 1, "", "state"], [23, 3, 1, "", "yaml_path"], [23, 3, 1, "", "years"]], "census.assemble_data.DataPlan.quality_check.params": [[23, 3, 1, "", "test_file"]], "census.assemble_data.DataPlan.write_data.params": [[23, 3, 1, "", "file_type"], [23, 3, 1, "", "path"]], "census.assemble_data.DataPlan.write_schema.params": [[23, 3, 1, "", "filename"], [23, 3, 1, "", "table_name"]], "census.assemble_data.VariableDef": [[23, 2, 1, "", "calculate_var"], [23, 2, 1, "", "do_query"], [23, 2, 1, "", "get_vars"]], "census.assemble_data.VariableDef.calculate_var.params": [[23, 3, 1, "", "county"], [23, 3, 1, "", "geometry"], [23, 3, 1, "", "state"], [23, 3, 1, "", "year"]], "census.assemble_data.VariableDef.do_query.params": [[23, 3, 1, "", "county"], [23, 3, 1, "", "geometry"], [23, 3, 1, "", "state"], [23, 3, 1, "", "year"]], "census.calculate_density": [[12, 1, 1, "", "CensusDensityContext"], [12, 5, 1, "", "initialize_logging"]], "census.calculate_density.CensusDensityContext.params": [[12, 3, 1, "", "description"], [12, 3, 1, "", "subclass"]], "census.census_info": [[23, 5, 1, "", "census_years"], [23, 5, 1, "", "get_endpoint"], [23, 5, 1, "", "get_varlist"], [23, 5, 1, "", "set_api_key"]], "census.census_info.census_years.params": [[23, 3, 1, "", "max_year"], [23, 3, 1, "", "min_year"]], "census.census_info.get_endpoint.params": [[23, 3, 1, "", "dataset"], [23, 3, 1, "", "sum_file"], [23, 3, 1, "", "year"]], "census.census_info.get_varlist.params": [[23, 3, 1, "", "dataset"], [23, 3, 1, "", "sum_file"], [23, 3, 1, "", "year"]], "census.census_info.set_api_key.params": [[23, 3, 1, "", "key"]], "census.cli": [[23, 1, 1, "", "CensusContext"], [14, 5, 1, "", "census_cli"]], "census.cli.CensusContext.params": [[23, 3, 1, "", "description"], [23, 3, 1, "", "subclass"]], "census.cli.CensusContext": [[23, 2, 1, "", "validate"]], "census.cli.CensusContext.validate.params": [[23, 3, 1, "", "attr"], [23, 3, 1, "", "value"]], "census.data": [[23, 0, 0, "-", "load_data"]], "census.data.load_data": [[23, 5, 1, "", "load_county_codes"], [23, 5, 1, "", "load_state_codes"]], "census.do_qc": [[15, 1, 1, "", "CensusQCContext"], [15, 5, 1, "", "initialize_logging"]], "census.do_qc.CensusQCContext.params": [[15, 3, 1, "", "description"], [15, 3, 1, "", "subclass"]], "census.exceptions": [[23, 6, 1, "", "CensusException"]], "census.interpolate_data": [[17, 1, 1, "", "CensusInterpolateContext"], [17, 5, 1, "", "initialize_logging"]], "census.interpolate_data.CensusInterpolateContext.params": [[17, 3, 1, "", "description"], [17, 3, 1, "", "subclass"]], "census.interpolate_data.CensusInterpolateContext": [[17, 2, 1, "", "validate"]], "census.interpolate_data.CensusInterpolateContext.validate.params": [[17, 3, 1, "", "attr"], [17, 3, 1, "", "value"]], "census.query": [[23, 5, 1, "", "api_geography"], [23, 5, 1, "", "get_census_data"]], "census.query.api_geography.params": [[23, 3, 1, "", "geo"]], "census.query.get_census_data.params": [[23, 3, 1, "", "county"], [23, 3, 1, "", "dataset"], [23, 3, 1, "", "geography"], [23, 3, 1, "", "key"], [23, 3, 1, "", "state"], [23, 3, 1, "", "sum_file"], [23, 3, 1, "", "variables"], [23, 3, 1, "", "year"]], "census.tigerweb": [[23, 5, 1, "", "download_geometry"], [23, 5, 1, "", "get_area"]], "census.tigerweb.download_geometry.params": [[23, 3, 1, "", "geometry"], [23, 3, 1, "", "out_dir"], [23, 3, 1, "", "year"]], "census.tigerweb.get_area.params": [[23, 3, 1, "", "geometry"], [23, 3, 1, "", "sq_mi"]], "census.utils": [[23, 5, 1, "", "show_api_keys"]], "census.write_data": [[22, 1, 1, "", "CensusWriteContext"], [22, 5, 1, "", "initialize_logging"]], "census.write_data.CensusWriteContext.params": [[22, 3, 1, "", "description"], [22, 3, 1, "", "subclass"]], "cms": [[45, 0, 0, "-", "aggregates"], [46, 0, 0, "-", "create_schema_config"], [47, 0, 0, "-", "duplicates"], [50, 0, 0, "-", "init_cms_db"], [53, 0, 0, "-", "mcr_data_loader"], [65, 0, 0, "-", "random_selector"], [66, 0, 0, "-", "registry"], [67, 0, 0, "-", "table_population"]], "cms.aggregates": [[45, 1, 1, "", "Aggregator"], [45, 1, 1, "", "ExpectedData"]], "cms.aggregates.Aggregator": [[45, 4, 1, "", "QUERY"], [45, 2, 1, "", "count"], [45, 2, 1, "", "verify"]], "cms.create_schema_config": [[46, 1, 1, "", "CMSSchema"]], "cms.create_schema_config.CMSSchema": [[46, 4, 1, "", "input"], [46, 4, 1, "", "output"], [46, 4, 1, "", "reset"], [46, 4, 1, "", "type"]], "cms.create_schema_config.CMSSchema.params": [[46, 3, 1, "", "description"], [46, 3, 1, "", "subclass"]], "cms.duplicates": [[47, 1, 1, "", "DuplicatesExplorer"], [47, 5, 1, "", "args"], [47, 5, 1, "", "run"]], "cms.duplicates.DuplicatesExplorer": [[47, 2, 1, "", "analyze_inconsistent_age"], [47, 2, 1, "", "explore_all"], [47, 2, 1, "", "explore_one"], [47, 2, 1, "", "find_duplicate_dates"], [47, 2, 1, "", "init"], [47, 2, 1, "", "is_loaded"], [47, 2, 1, "", "load"], [47, 2, 1, "", "report"], [47, 2, 1, "", "save"]], "cms.fts2yaml": [[48, 1, 1, "", "AliasColumn"], [48, 1, 1, "", "ColumnAttribute"], [48, 1, 1, "", "ColumnReader"], [48, 1, 1, "", "FTSColumn"], [48, 1, 1, "", "MedicaidFTS"], [48, 1, 1, "", "MedicaidFTSColumn"], [48, 1, 1, "", "MedicareFTS"], [48, 1, 1, "", "MedicareFTSColumn"], [48, 5, 1, "", "mcr_type"], [48, 5, 1, "", "width"]], "cms.fts2yaml.AliasColumn": [[48, 2, 1, "", "to_dict"]], "cms.fts2yaml.ColumnAttribute": [[48, 2, 1, "", "arg"]], "cms.fts2yaml.ColumnReader": [[48, 2, 1, "", "read"]], "cms.fts2yaml.FTSColumn": [[48, 2, 1, "", "analyze_format"], [48, 2, 1, "", "conv"], [48, 2, 1, "", "to_dict"], [48, 2, 1, "", "to_fwf_column"], [48, 2, 1, "", "to_sql_type"]], "cms.fts2yaml.FTSColumn.conv.params": [[48, 3, 1, "", "i"]], "cms.fts2yaml.FTSColumn.to_fwf_column.params": [[48, 3, 1, "", "pos"]], "cms.fts2yaml.MedicaidFTS": [[48, 2, 1, "", "init"], [48, 4, 1, "", "medicaid_indices"], [48, 2, 1, "", "on_after_read_file"]], "cms.fts2yaml.MedicaidFTS.on_after_read_file.params": [[48, 3, 1, "", "columns"]], "cms.fts2yaml.MedicaidFTS.params": [[48, 3, 1, "", "type_of_data"]], "cms.fts2yaml.MedicaidFTSColumn": [[48, 4, 1, "", "nattrs"]], "cms.fts2yaml.MedicareFTS": [[48, 2, 1, "", "add_indices"], [48, 2, 1, "", "check_key_columns"], [48, 2, 1, "", "init"], [48, 2, 1, "", "on_after_read_file"]], "cms.fts2yaml.MedicareFTS.on_after_read_file.params": [[48, 3, 1, "", "columns"]], "cms.fts2yaml.MedicareFTS.params": [[48, 3, 1, "", "type_of_data"]], "cms.fts2yaml.MedicareFTSColumn": [[48, 2, 1, "", "conv"], [48, 4, 1, "", "nattrs"]], "cms.fts2yaml.MedicareFTSColumn.conv.params": [[48, 3, 1, "", "i"]], "cms.fts2yaml.mcr_type.params": [[48, 3, 1, "", "file_name"]], "cms.fts2yaml.width.params": [[48, 3, 1, "", "s"]], "cms.init_cms_db": [[50, 5, 1, "", "init_cms"]], "cms.mcr_data_loader": [[53, 1, 1, "", "MedicareDataLoader"]], "cms.mcr_data_loader.MedicareDataLoader": [[53, 2, 1, "", "dat4fts"], [53, 2, 1, "", "get_files"], [53, 2, 1, "", "open"]], "cms.random_selector": [[65, 5, 1, "", "args"], [65, 5, 1, "", "select"]], "cms.registry": [[66, 1, 1, "", "Registry"]], "cms.registry.Registry": [[66, 2, 1, "", "built_in_registry_path"], [66, 2, 1, "", "init"], [66, 2, 1, "", "update"], [66, 2, 1, "", "update_medicaid"], [66, 2, 1, "", "update_medicare"]], "cms.table_population": [[67, 1, 1, "", "PopulateConfig"], [67, 1, 1, "", "TablePopulator"], [67, 5, 1, "", "init_cms"]], "cms.table_population.PopulateConfig.params": [[67, 3, 1, "", "description"], [67, 3, 1, "", "subclass"]], "cms.tools": [[51, 0, 0, "-", "mcr_combine_tables"], [52, 0, 0, "-", "mcr_create_test_data"], [54, 0, 0, "-", "mcr_file"], [55, 0, 0, "-", "mcr_fts2csv"], [56, 0, 0, "-", "mcr_fts2db"], [57, 0, 0, "-", "mcr_registry"], [58, 0, 0, "-", "mcr_sas"], [59, 0, 0, "-", "mcr_sas2db"], [60, 0, 0, "-", "mcr_sas2yaml"], [63, 0, 0, "-", "medpar_converter"]], "cms.tools.mcr_combine_tables": [[51, 1, 1, "", "MedicareCombinedView"]], "cms.tools.mcr_combine_tables.MedicareCombinedView": [[51, 2, 1, "", "execute"], [51, 2, 1, "", "find_column2arr"], [51, 2, 1, "", "generate_sql"], [51, 2, 1, "", "get_column"], [51, 2, 1, "", "get_columns"], [51, 2, 1, "", "get_simple_column"], [51, 2, 1, "", "get_tables"], [51, 4, 1, "", "ip"], [51, 2, 1, "", "print_sql"], [51, 4, 1, "", "ps"], [51, 4, 1, "", "supported_tables"], [51, 2, 1, "", "table_sql"]], "cms.tools.mcr_create_test_data": [[52, 1, 1, "", "FTSTuple"], [52, 5, 1, "", "args"], [52, 5, 1, "", "find_fts_tuples"], [52, 5, 1, "", "select"]], "cms.tools.mcr_create_test_data.FTSTuple": [[52, 2, 1, "", "dat_path"], [52, 2, 1, "", "fts_path"]], "cms.tools.mcr_file": [[54, 1, 1, "", "Column"], [54, 1, 1, "", "ColumnAttribute"], [54, 1, 1, "", "ColumnDef"], [54, 1, 1, "", "MedicareFile"], [54, 6, 1, "", "MedparParseException"], [54, 5, 1, "", "log"], [54, 5, 1, "", "width"]], "cms.tools.mcr_file.ColumnAttribute": [[54, 2, 1, "", "arg"]], "cms.tools.mcr_file.ColumnDef": [[54, 2, 1, "", "read"]], "cms.tools.mcr_file.MedicareFile": [[54, 2, 1, "", "count_lines_in_dest"], [54, 2, 1, "", "count_lines_in_source"], [54, 2, 1, "", "export"], [54, 2, 1, "", "info"], [54, 2, 1, "", "init"], [54, 2, 1, "", "read_record"], [54, 2, 1, "", "status"], [54, 2, 1, "", "status_message"], [54, 2, 1, "", "validate"]], "cms.tools.mcr_file.MedicareFile.read_record.params": [[54, 3, 1, "", "data"], [54, 3, 1, "", "ln"]], "cms.tools.mcr_file.MedicareFile.validate.params": [[54, 3, 1, "", "record"]], "cms.tools.mcr_fts2csv": [[55, 5, 1, "", "convert"]], "cms.tools.mcr_fts2db": [[56, 1, 1, "", "MedicareLoader"]], "cms.tools.mcr_fts2db.MedicareLoader": [[56, 2, 1, "", "handle"], [56, 2, 1, "", "handle_empty"], [56, 2, 1, "", "loader_for_csv"], [56, 2, 1, "", "loader_for_fwf"], [56, 2, 1, "", "process"], [56, 2, 1, "", "traverse"]], "cms.tools.mcr_registry": [[57, 1, 1, "", "MedicareRegistry"]], "cms.tools.mcr_registry.MedicareRegistry": [[57, 2, 1, "", "init_registry"], [57, 2, 1, "", "read_registry"], [57, 2, 1, "", "save"]], "cms.tools.mcr_sas": [[58, 1, 1, "", "MedicareSAS"]], "cms.tools.mcr_sas.MedicareSAS": [[58, 2, 1, "", "handle"], [58, 2, 1, "", "handle_sas_file"], [58, 2, 1, "", "traverse"]], "cms.tools.mcr_sas2db": [[59, 1, 1, "", "SASLoader"]], "cms.tools.mcr_sas2db.SASLoader": [[59, 2, 1, "", "handle"], [59, 2, 1, "", "process"]], "cms.tools.mcr_sas2yaml": [[60, 1, 1, "", "SASIntrospector"]], "cms.tools.mcr_sas2yaml.SASIntrospector": [[60, 2, 1, "", "add_sas_table"], [60, 2, 1, "", "handle"], [60, 2, 1, "", "matches"], [60, 2, 1, "", "process"]], "cms.tools.medpar_converter": [[63, 1, 1, "", "MedParFileSet"], [63, 1, 1, "", "MedparConverter"], [63, 5, 1, "", "args"]], "cms.tools.medpar_converter.MedparConverter": [[63, 2, 1, "", "convert"], [63, 2, 1, "", "convert_dataset"], [63, 2, 1, "", "dataset"], [63, 2, 1, "", "find"], [63, 2, 1, "", "list"], [63, 2, 1, "", "status"]], "epa": [[142, 0, 0, "-", "airnow"], [143, 0, 0, "-", "airnow_downloader"], [144, 0, 0, "-", "airnow_ds_def"], [145, 0, 0, "-", "airnow_setup"], [146, 0, 0, "-", "airnow_shapes"], [147, 0, 0, "-", "aqs"], [148, 0, 0, "-", "aqs_ds_def"], [149, 0, 0, "-", "aqs_expand"], [150, 0, 0, "-", "aqs_tools"], [151, 0, 0, "-", "registry"]], "epa.airnow": [[142, 1, 1, "", "AirNow"]], "epa.airnow_downloader": [[143, 1, 1, "", "AirNowDownloader"]], "epa.airnow_downloader.AirNowDownloader": [[143, 2, 1, "", "download"], [143, 2, 1, "", "download_range"], [143, 2, 1, "", "dump_csv"], [143, 2, 1, "", "process"], [143, 2, 1, "", "write_csv_header"]], "epa.airnow_downloader.AirNowDownloader.download.params": [[143, 3, 1, "", "requested_date"]], "epa.airnow_downloader.AirNowDownloader.download_range.params": [[143, 3, 1, "", "end_date"], [143, 3, 1, "", "start_date"]], "epa.airnow_downloader.AirNowDownloader.params": [[143, 3, 1, "", "api_key"], [143, 3, 1, "", "parameter"], [143, 3, 1, "", "target"]], "epa.airnow_downloader.AirNowDownloader.process.params": [[143, 3, 1, "", "content"]], "epa.airnow_ds_def": [[144, 1, 1, "", "AirNowContext"], [144, 1, 1, "", "Parameter"]], "epa.airnow_ds_def.AirNowContext": [[144, 4, 1, "", "api_key"], [144, 4, 1, "", "cfg"], [144, 4, 1, "", "compress"], [144, 4, 1, "", "destination"], [144, 4, 1, "", "end_date"], [144, 2, 1, "", "enum"], [144, 4, 1, "", "parameters"], [144, 4, 1, "", "proxy"], [144, 4, 1, "", "qc"], [144, 4, 1, "", "reset"], [144, 4, 1, "", "shapes"], [144, 4, 1, "", "start_date"], [144, 2, 1, "", "validate"], [144, 4, 1, "", "years"]], "epa.airnow_ds_def.AirNowContext.enum.params": [[144, 3, 1, "", "cls"], [144, 3, 1, "", "s"]], "epa.airnow_ds_def.AirNowContext.params": [[144, 3, 1, "", "doc"]], "epa.airnow_ds_def.AirNowContext.validate.params": [[144, 3, 1, "", "attr"], [144, 3, 1, "", "value"]], "epa.airnow_ds_def.Parameter": [[144, 4, 1, "", "CO"], [144, 4, 1, "", "NO2"], [144, 4, 1, "", "OZONE"], [144, 4, 1, "", "PM10"], [144, 4, 1, "", "PM25"], [144, 4, 1, "", "SO2"]], "epa.airnow_setup": [[145, 5, 1, "", "setup"]], "epa.airnow_shapes": [[146, 5, 1, "", "download_shapes"]], "epa.aqs": [[147, 1, 1, "", "AQS"]], "epa.aqs.AQS": [[147, 2, 1, "", "clear"], [147, 2, 1, "", "collect_downloads"], [147, 2, 1, "", "download"], [147, 2, 1, "", "is_downloaded"]], "epa.aqs.AQS.params": [[147, 3, 1, "", "context"]], "epa.aqs_ds_def": [[148, 1, 1, "", "AQSContext"], [148, 1, 1, "", "Aggregation"], [148, 1, 1, "", "Parameter"]], "epa.aqs_ds_def.AQSContext": [[148, 4, 1, "", "aggregation"], [148, 4, 1, "", "compress"], [148, 4, 1, "", "destination"], [148, 2, 1, "", "enum"], [148, 4, 1, "", "merge_years"], [148, 4, 1, "", "parameters"], [148, 2, 1, "", "validate"], [148, 4, 1, "", "years"]], "epa.aqs_ds_def.AQSContext.enum.params": [[148, 3, 1, "", "cls"], [148, 3, 1, "", "s"]], "epa.aqs_ds_def.AQSContext.params": [[148, 3, 1, "", "doc"]], "epa.aqs_ds_def.AQSContext.validate.params": [[148, 3, 1, "", "attr"], [148, 3, 1, "", "value"]], "epa.aqs_ds_def.Aggregation": [[148, 4, 1, "", "ANNUAL"], [148, 4, 1, "", "DAILY"]], "epa.aqs_ds_def.Parameter": [[148, 4, 1, "", "MAX_TEMP"], [148, 4, 1, "", "MIN_TEMP"], [148, 4, 1, "", "NO2"], [148, 4, 1, "", "OZONE"], [148, 4, 1, "", "PM25"]], "epa.aqs_expand": [[149, 5, 1, "", "expand_data"]], "epa.aqs_tools": [[150, 5, 1, "", "add_monitor_key"], [150, 5, 1, "", "collect_annual_downloads"], [150, 5, 1, "", "collect_aqs_download_tasks"], [150, 5, 1, "", "collect_daily_downloads"], [150, 5, 1, "", "destination_path"], [150, 5, 1, "", "download_data"], [150, 5, 1, "", "transfer"]], "epa.aqs_tools.add_monitor_key.params": [[150, 3, 1, "", "row"]], "epa.aqs_tools.collect_annual_downloads.params": [[150, 3, 1, "", "contiguous_year_segment"], [150, 3, 1, "", "destination"], [150, 3, 1, "", "downloads"], [150, 3, 1, "", "parameters"], [150, 3, 1, "", "path"]], "epa.aqs_tools.collect_aqs_download_tasks.params": [[150, 3, 1, "", "aggregation"], [150, 3, 1, "", "destination"], [150, 3, 1, "", "merge_years"], [150, 3, 1, "", "parameters"], [150, 3, 1, "", "years"]], "epa.aqs_tools.collect_daily_downloads.params": [[150, 3, 1, "", "contiguous_year_segment"], [150, 3, 1, "", "destination"], [150, 3, 1, "", "downloads"], [150, 3, 1, "", "parameters"], [150, 3, 1, "", "ylabel"]], "epa.aqs_tools.destination_path.params": [[150, 3, 1, "", "destination"], [150, 3, 1, "", "path"]], "epa.aqs_tools.download_data.params": [[150, 3, 1, "", "append"], [150, 3, 1, "", "parameters"], [150, 3, 1, "", "target"], [150, 3, 1, "", "url"]], "epa.aqs_tools.transfer.params": [[150, 3, 1, "", "flt"], [150, 3, 1, "", "header"], [150, 3, 1, "", "reader"], [150, 3, 1, "", "writer"]], "epa.registry": [[151, 1, 1, "", "EPAConfig"], [151, 1, 1, "", "Registry"]], "epa.registry.EPAConfig": [[151, 4, 1, "", "data"], [151, 4, 1, "", "output"], [151, 4, 1, "", "table"]], "epa.registry.EPAConfig.params": [[151, 3, 1, "", "description"], [151, 3, 1, "", "subclass"]], "epa.registry.Registry": [[151, 2, 1, "", "create_domain_yaml"], [151, 2, 1, "", "create_table_yaml"], [151, 2, 1, "", "update"]], "gridmet": [[185, 0, 0, "-", "config"], [189, 0, 0, "-", "gridmet_tools"], [190, 0, 0, "-", "launcher"], [191, 0, 0, "-", "registry"], [192, 0, 0, "-", "shapes"], [193, 0, 0, "-", "task"]], "gridmet.config": [[185, 1, 1, "", "DateFilter"], [185, 1, 1, "", "GridmetContext"], [185, 1, 1, "", "GridmetVariable"], [223, 1, 1, "", "Shape"]], "gridmet.config.DateFilter": [[185, 2, 1, "", "accept"]], "gridmet.config.GridmetContext": [[180, 4, 1, "", "compress"], [185, 4, 1, "", "coordinates"], [185, 4, 1, "", "dates"], [185, 4, 1, "", "destination"], [180, 2, 1, "", "enum"], [185, 4, 1, "", "geography"], [185, 4, 1, "", "metadata"], [185, 4, 1, "", "points"], [185, 4, 1, "", "raw_downloads"], [185, 4, 1, "", "shapes"], [185, 4, 1, "", "shapes_dir"], [185, 4, 1, "", "strategy"], [185, 2, 1, "", "validate"], [185, 4, 1, "", "variables"], [180, 4, 1, "", "years"]], "gridmet.config.GridmetContext.enum.params": [[180, 3, 1, "", "cls"], [180, 3, 1, "", "s"]], "gridmet.config.GridmetContext.params": [[185, 3, 1, "", "doc"]], "gridmet.config.GridmetContext.validate.params": [[185, 3, 1, "", "attr"], [185, 3, 1, "", "value"]], "gridmet.config.GridmetVariable": [[185, 4, 1, "", "bi"], [185, 4, 1, "", "erc"], [185, 4, 1, "", "etr"], [185, 4, 1, "", "fm100"], [185, 4, 1, "", "fm1000"], [185, 4, 1, "", "pet"], [185, 4, 1, "", "pr"], [185, 4, 1, "", "rmax"], [185, 4, 1, "", "rmin"], [185, 4, 1, "", "sph"], [185, 4, 1, "", "srad"], [185, 4, 1, "", "th"], [185, 4, 1, "", "tmmn"], [185, 4, 1, "", "tmmx"], [185, 4, 1, "", "vpd"], [185, 4, 1, "", "vs"]], "gridmet.config.Shape": [[223, 4, 1, "", "point"], [223, 4, 1, "", "polygon"]], "gridmet.gridmet_tools": [[189, 5, 1, "", "check_shape_file"], [189, 5, 1, "", "disaggregate"], [189, 5, 1, "", "find_shape_file"], [189, 5, 1, "", "get_address"], [189, 5, 1, "", "get_affine_transform"], [189, 5, 1, "", "get_atmos_url"], [189, 5, 1, "", "get_days"], [189, 5, 1, "", "get_nkn_url"], [189, 5, 1, "", "get_variable"]], "gridmet.gridmet_tools.disaggregate.params": [[189, 3, 1, "", "factor"], [189, 3, 1, "", "layer"]], "gridmet.gridmet_tools.find_shape_file.params": [[189, 3, 1, "", "geography_type"], [189, 3, 1, "", "shape_type"], [189, 3, 1, "", "shapes_dir"], [189, 3, 1, "", "year"]], "gridmet.gridmet_tools.get_affine_transform.params": [[189, 3, 1, "", "factor"], [189, 3, 1, "", "nc_file"]], "gridmet.gridmet_tools.get_atmos_url.params": [[189, 3, 1, "", "variable"], [189, 3, 1, "", "year"]], "gridmet.gridmet_tools.get_days.params": [[189, 3, 1, "", "dataset"]], "gridmet.gridmet_tools.get_nkn_url.params": [[189, 3, 1, "", "variable"], [189, 3, 1, "", "year"]], "gridmet.gridmet_tools.get_variable.params": [[189, 3, 1, "", "dataset"], [189, 3, 1, "", "variable"]], "gridmet.launcher": [[190, 1, 1, "", "Gridmet"]], "gridmet.launcher.Gridmet": [[190, 2, 1, "", "collect_tasks"], [190, 2, 1, "", "execute_sequentially"]], "gridmet.launcher.Gridmet.params": [[190, 3, 1, "", "context"]], "gridmet.registry": [[191, 1, 1, "", "Registry"]], "gridmet.registry.Registry": [[191, 2, 1, "", "built_in_registry_path"], [191, 2, 1, "", "create_yaml"], [191, 2, 1, "", "update"]], "gridmet.shapes": [[192, 5, 1, "", "download_shapes"]], "gridmet.task": [[193, 1, 1, "", "CSVWriter"], [193, 1, 1, "", "Collector"], [193, 1, 1, "", "ComputeGridmetTask"], [193, 1, 1, "", "ComputePointsTask"], [193, 1, 1, "", "ComputeShapesTask"], [193, 1, 1, "", "DownloadGridmetTask"], [193, 1, 1, "", "GridmetTask"], [193, 1, 1, "", "ListCollector"], [193, 1, 1, "", "Parallel"], [193, 5, 1, "", "count_lines"], [193, 5, 1, "", "quote"]], "gridmet.task.CSVWriter": [[193, 2, 1, "", "flush"], [193, 2, 1, "", "writerow"]], "gridmet.task.Collector": [[193, 2, 1, "", "flush"], [193, 2, 1, "", "writerow"]], "gridmet.task.ComputeGridmetTask": [[193, 2, 1, "", "collect_data"], [193, 2, 1, "", "compute_one_day"], [193, 2, 1, "", "execute"], [193, 2, 1, "", "get_days"], [193, 2, 1, "", "get_key"], [193, 2, 1, "", "get_variable"], [193, 4, 1, "", "origin"], [193, 2, 1, "", "prepare"], [193, 2, 1, "", "to_date"]], "gridmet.task.ComputeGridmetTask.compute_one_day.params": [[193, 3, 1, "", "day"], [193, 3, 1, "", "layer"], [193, 3, 1, "", "writer"]], "gridmet.task.ComputeGridmetTask.execute.params": [[193, 3, 1, "", "mode"]], "gridmet.task.ComputeGridmetTask.params": [[193, 3, 1, "", "date_filter"], [193, 3, 1, "", "infile"], [193, 3, 1, "", "outfile"], [193, 3, 1, "", "variable"], [193, 3, 1, "", "year"]], "gridmet.task.ComputePointsTask": [[193, 2, 1, "", "compute_one_day"], [193, 2, 1, "", "execute"], [193, 4, 1, "", "force_standard_api"], [193, 2, 1, "", "get_key"], [193, 2, 1, "", "make_point"], [193, 2, 1, "", "prepare"]], "gridmet.task.ComputePointsTask.compute_one_day.params": [[193, 3, 1, "", "day"], [193, 3, 1, "", "layer"], [193, 3, 1, "", "writer"]], "gridmet.task.ComputePointsTask.execute.params": [[193, 3, 1, "", "mode"]], "gridmet.task.ComputePointsTask.params": [[193, 3, 1, "", "coordinates"], [193, 3, 1, "", "infile"], [193, 3, 1, "", "metadata"], [193, 3, 1, "", "outfile"], [193, 3, 1, "", "points_file"], [193, 3, 1, "", "variable"], [193, 3, 1, "", "year"]], "gridmet.task.ComputeShapesTask": [[193, 2, 1, "", "compute_one_day"], [193, 2, 1, "", "get_key"]], "gridmet.task.ComputeShapesTask.compute_one_day.params": [[193, 3, 1, "", "day"], [193, 3, 1, "", "layer"], [193, 3, 1, "", "writer"]], "gridmet.task.ComputeShapesTask.params": [[193, 3, 1, "", "date_filter"], [193, 3, 1, "", "geography"], [193, 3, 1, "", "infile"], [193, 3, 1, "", "outfile"], [193, 3, 1, "", "shapefile"], [193, 3, 1, "", "strategy"], [193, 3, 1, "", "variable"], [193, 3, 1, "", "year"]], "gridmet.task.DownloadGridmetTask": [[193, 4, 1, "", "BLOCK_SIZE"], [193, 2, 1, "", "execute"], [193, 2, 1, "", "get_url"], [193, 2, 1, "", "target"]], "gridmet.task.DownloadGridmetTask.get_url.params": [[193, 3, 1, "", "variable"], [193, 3, 1, "", "year"]], "gridmet.task.DownloadGridmetTask.params": [[193, 3, 1, "", "destination"], [193, 3, 1, "", "variable"], [193, 3, 1, "", "year"]], "gridmet.task.GridmetTask": [[193, 2, 1, "", "destination_file_name"], [193, 2, 1, "", "execute"], [193, 2, 1, "", "find_shape_file"]], "gridmet.task.GridmetTask.destination_file_name.params": [[193, 3, 1, "", "context"], [193, 3, 1, "", "variable"], [193, 3, 1, "", "year"]], "gridmet.task.GridmetTask.find_shape_file.params": [[193, 3, 1, "", "context"], [193, 3, 1, "", "shape"], [193, 3, 1, "", "year"]], "gridmet.task.GridmetTask.params": [[193, 3, 1, "", "context"], [193, 3, 1, "", "variable"], [193, 3, 1, "", "year"]], "gridmet.task.ListCollector": [[193, 2, 1, "", "get_result"], [193, 2, 1, "", "writerow"]], "gridmet.task.Parallel": [[193, 4, 1, "", "bands"], [193, 4, 1, "", "days"], [193, 4, 1, "", "points"]], "": [[123, 0, 0, "-", "nsaph"]], "nsaph": [[100, 0, 0, "-", "adi"], [123, 5, 1, "", "app_name"], [102, 0, 0, "-", "create"], [105, 0, 0, "-", "db"], [109, 0, 0, "-", "fips"], [123, 5, 1, "", "init_logging"], [116, 0, 0, "-", "link_gis"], [117, 0, 0, "-", "loader"], [125, 0, 0, "-", "pg_keywords"]], "nsaph.adi": [[100, 5, 1, "", "add_gis_columns"]], "nsaph.create": [[102, 5, 1, "", "create_table"]], "nsaph.data_model": [[106, 0, 0, "-", "domain"], [114, 0, 0, "-", "inserter"], [120, 0, 0, "-", "model"], [135, 0, 0, "-", "utils"]], "nsaph.data_model.domain": [[106, 1, 1, "", "Domain"]], "nsaph.data_model.domain.Domain": [[106, 4, 1, "", "CREATE"], [106, 2, 1, "", "add_fk_validation"], [106, 2, 1, "", "add_index"], [106, 2, 1, "", "add_index_by_ddl"], [106, 2, 1, "", "append_ddl"], [106, 2, 1, "", "column_spec"], [106, 2, 1, "", "create"], [106, 2, 1, "", "create_object_from"], [106, 2, 1, "", "create_table"], [106, 2, 1, "", "create_true_table"], [106, 2, 1, "", "ddl_for_node"], [106, 2, 1, "", "drop"], [106, 2, 1, "", "extract_generation_code"], [106, 2, 1, "", "find"], [106, 2, 1, "", "find_dependent"], [106, 2, 1, "", "find_mapped_column_name"], [106, 2, 1, "", "fqn"], [106, 2, 1, "", "generate_insert_from_select"], [106, 2, 1, "", "get"], [106, 2, 1, "", "get_column_type"], [106, 2, 1, "", "get_columns"], [106, 2, 1, "", "get_columns_as_dict"], [106, 2, 1, "", "get_index_ddl"], [106, 2, 1, "", "get_multi_column_index_ddl"], [106, 2, 1, "", "get_select_from"], [106, 2, 1, "", "has"], [106, 2, 1, "", "has_column_spec"], [106, 2, 1, "", "has_hard_linked_children"], [106, 2, 1, "", "init"], [106, 2, 1, "", "is_array"], [106, 2, 1, "", "is_column_wildcard"], [106, 2, 1, "", "is_generated"], [106, 2, 1, "", "list_columns"], [106, 2, 1, "", "list_identifiers"], [106, 2, 1, "", "list_source_columns"], [106, 2, 1, "", "map_selected_columns"], [106, 2, 1, "", "matches"], [106, 2, 1, "", "need_index"], [106, 2, 1, "", "parse_wildcard_column_spec"], [106, 2, 1, "", "set_sloppy"], [106, 2, 1, "", "skip"], [106, 2, 1, "", "spillover_table"], [106, 2, 1, "", "ufqn"], [106, 2, 1, "", "view_column_joined"], [106, 2, 1, "", "view_column_spec"]], "nsaph.data_model.inserter": [[114, 1, 1, "", "Inserter"], [114, 5, 1, "", "compute"]], "nsaph.data_model.inserter.Inserter": [[114, 2, 1, "", "Batch"], [114, 2, 1, "", "Table"], [114, 2, 1, "", "drilldown"], [114, 2, 1, "", "get_autocommit"], [114, 2, 1, "", "get_cumulative_timing"], [114, 2, 1, "", "get_thread_timing"], [114, 2, 1, "", "get_timestamp"], [114, 2, 1, "", "get_timings"], [114, 2, 1, "", "import_file"], [114, 2, 1, "", "log_progress"], [114, 2, 1, "", "prepare"], [114, 2, 1, "", "push"], [114, 2, 1, "", "read_batch"], [114, 2, 1, "", "reset_timer"], [114, 2, 1, "", "stamp_time"], [114, 2, 1, "", "timer"]], "nsaph.data_model.model": [[120, 1, 1, "", "CustomColumn"], [120, 1, 1, "", "Table"], [120, 5, 1, "", "csv_reader"], [120, 5, 1, "", "index_method"], [120, 5, 1, "", "load_range"], [120, 5, 1, "", "unquote"]], "nsaph.data_model.model.CustomColumn": [[120, 2, 1, "", "extract_value"]], "nsaph.data_model.model.Table": [[120, 2, 1, "", "add_column"], [120, 2, 1, "", "add_data"], [120, 2, 1, "", "analyze"], [120, 2, 1, "", "build_indices"], [120, 2, 1, "", "copy_data"], [120, 2, 1, "", "create"], [120, 2, 1, "", "drop"], [120, 2, 1, "", "fopen"], [120, 2, 1, "", "get_index_ddl"], [120, 2, 1, "", "guess_types"], [120, 2, 1, "", "log_progress"], [120, 2, 1, "", "make_column"], [120, 2, 1, "", "make_fips_column"], [120, 2, 1, "", "make_int_column"], [120, 2, 1, "", "make_iso_column"], [120, 2, 1, "", "parse_fips12"], [120, 2, 1, "", "save"], [120, 2, 1, "", "type_from_metadata"]], "nsaph.data_model.model.Table.make_iso_column.params": [[120, 3, 1, "", "anchor"], [120, 3, 1, "", "cursor"], [120, 3, 1, "", "include"]], "nsaph.data_model.utils": [[135, 1, 1, "", "CSVLikeJsonReader"], [135, 1, 1, "", "DataReader"], [135, 5, 1, "", "basename"], [135, 5, 1, "", "entry_to_path"], [135, 5, 1, "", "regex"], [135, 5, 1, "", "split"]], "nsaph.data_model.utils.CSVLikeJsonReader": [[135, 2, 1, "", "close"], [135, 2, 1, "", "open"]], "nsaph.data_model.utils.DataReader": [[135, 2, 1, "", "get_path"], [135, 2, 1, "", "open_csv"], [135, 2, 1, "", "open_fst"], [135, 2, 1, "", "open_fwf"], [135, 2, 1, "", "open_json"], [135, 2, 1, "", "open_sas7bdat"], [135, 2, 1, "", "rows"]], "nsaph.data_model.utils.basename.params": [[135, 3, 1, "", "table"]], "nsaph.data_model.utils.entry_to_path.params": [[135, 3, 1, "", "entry"]], "nsaph.data_model.utils.split.params": [[135, 3, 1, "", "node"]], "nsaph.db": [[105, 1, 1, "", "Connection"], [105, 1, 1, "", "ResultSetDeprecated"], [105, 5, 1, "", "test_connection"]], "nsaph.db.Connection": [[105, 2, 1, "", "close"], [105, 2, 1, "", "connect"], [105, 2, 1, "", "connect_to_database"], [105, 2, 1, "", "connect_via_tunnel"], [105, 4, 1, "", "default_filename"], [105, 2, 1, "", "default_port"], [105, 4, 1, "", "default_section"], [105, 2, 1, "", "get_database_types"], [105, 2, 1, "", "host_name"], [105, 2, 1, "", "read_config"], [105, 2, 1, "", "resolve_host"]], "nsaph.db.ResultSetDeprecated": [[105, 4, 1, "", "SIZE"]], "nsaph.init_logging.params": [[123, 3, 1, "", "level"], [123, 3, 1, "", "name"], [123, 3, 1, "", "with_thread_id"]], "nsaph.link_gis": [[116, 5, 1, "", "add_gis_columns"]], "nsaph.loader": [[117, 1, 1, "", "LoaderBase"], [104, 0, 0, "-", "common"], [104, 0, 0, "-", "data_loader"], [117, 5, 1, "", "diff"], [112, 0, 0, "-", "index_builder"], [115, 0, 0, "-", "introspector"], [118, 0, 0, "-", "loader_config"], [121, 0, 0, "-", "monitor"], [126, 0, 0, "-", "project_loader"], [137, 0, 0, "-", "vacuum"]], "nsaph.loader.LoaderBase": [[117, 2, 1, "", "execute_with_monitor"], [117, 2, 1, "", "find_file_in_path"], [117, 2, 1, "", "get_domain"], [117, 2, 1, "", "get_pid"], [117, 2, 1, "", "log_activity"]], "nsaph.loader.common": [[104, 1, 1, "", "CommonConfig"], [104, 1, 1, "", "DBConnectionConfig"], [104, 1, 1, "", "DBTableConfig"]], "nsaph.loader.common.CommonConfig": [[104, 4, 1, "", "domain"], [104, 4, 1, "", "registry"]], "nsaph.loader.common.CommonConfig.params": [[104, 3, 1, "", "description"], [104, 3, 1, "", "subclass"]], "nsaph.loader.common.DBConnectionConfig": [[104, 4, 1, "", "autocommit"], [104, 4, 1, "", "connection"], [104, 4, 1, "", "db"], [104, 4, 1, "", "dryrun"], [104, 4, 1, "", "verbose"]], "nsaph.loader.common.DBConnectionConfig.params": [[104, 3, 1, "", "description"], [104, 3, 1, "", "subclass"]], "nsaph.loader.common.DBTableConfig.params": [[104, 3, 1, "", "description"], [104, 3, 1, "", "subclass"]], "nsaph.loader.common.DBTableConfig": [[104, 4, 1, "", "table"]], "nsaph.loader.data_loader": [[104, 1, 1, "", "DataLoader"]], "nsaph.loader.data_loader.DataLoader": [[104, 2, 1, "", "close"], [104, 2, 1, "", "commit"], [104, 2, 1, "", "drop"], [104, 2, 1, "", "execute_sql"], [104, 2, 1, "", "get_connection"], [104, 2, 1, "", "get_connections"], [104, 2, 1, "", "get_files"], [104, 2, 1, "", "has_been_ingested"], [104, 2, 1, "", "import_data_from_file"], [104, 2, 1, "", "insert_from_select"], [104, 2, 1, "", "is_parallel"], [104, 2, 1, "", "load"], [104, 2, 1, "", "print_ddl"], [104, 2, 1, "", "print_table_ddl"], [104, 2, 1, "", "reset"], [104, 2, 1, "", "rollback"], [104, 2, 1, "", "run"], [104, 2, 1, "", "set_table"]], "nsaph.loader.diff.params": [[117, 3, 1, "", "files"]], "nsaph.loader.index_builder": [[112, 1, 1, "", "IndexBuilder"], [112, 1, 1, "", "IndexerConfig"], [112, 5, 1, "", "find_name"]], "nsaph.loader.index_builder.IndexBuilder": [[112, 2, 1, "", "build"], [112, 2, 1, "", "drop"], [112, 2, 1, "", "drop_all"], [112, 2, 1, "", "execute"], [112, 2, 1, "", "print_stat"], [112, 2, 1, "", "run"]], "nsaph.loader.index_builder.IndexerConfig.params": [[112, 3, 1, "", "description"], [112, 3, 1, "", "subclass"]], "nsaph.loader.introspector": [[115, 6, 1, "", "InconsistentTypes"], [115, 1, 1, "", "Introspector"], [115, 5, 1, "", "test"]], "nsaph.loader.introspector.Introspector": [[115, 2, 1, "", "append_file_column"], [115, 2, 1, "", "append_record_column"], [115, 2, 1, "", "append_sql_column"], [115, 2, 1, "", "classify"], [115, 2, 1, "", "csv_reader"], [115, 2, 1, "", "db_type"], [115, 2, 1, "", "fopen"], [115, 2, 1, "", "get_columns"], [115, 2, 1, "", "guess_str"], [115, 2, 1, "", "guess_types"], [115, 2, 1, "", "handle_csv"], [115, 2, 1, "", "handle_json"], [115, 2, 1, "", "handle_sas"], [115, 2, 1, "", "introspect"], [115, 2, 1, "", "load_csv"], [115, 2, 1, "", "load_fst"], [115, 2, 1, "", "load_json"], [115, 2, 1, "", "load_range"], [115, 2, 1, "", "load_sas"], [115, 2, 1, "", "name"], [115, 2, 1, "", "reconcile"], [115, 2, 1, "", "sas2db_type"], [115, 2, 1, "", "unquote"]], "nsaph.loader.loader_config": [[118, 1, 1, "", "DataLoaderAction"], [118, 1, 1, "", "LoaderConfig"], [118, 1, 1, "", "Parallelization"]], "nsaph.loader.loader_config.DataLoaderAction": [[118, 4, 1, "", "drop"], [118, 4, 1, "", "insert"], [118, 4, 1, "", "load"], [118, 2, 1, "", "new"], [118, 4, 1, "", "print"]], "nsaph.loader.loader_config.LoaderConfig": [[118, 4, 1, "", "action"], [118, 4, 1, "", "buffer"], [118, 4, 1, "", "data"], [118, 4, 1, "", "incremental"], [118, 4, 1, "", "limit"], [118, 4, 1, "", "log"], [118, 4, 1, "", "page"], [118, 4, 1, "", "parallelization"], [118, 4, 1, "", "pattern"], [118, 4, 1, "", "reset"], [118, 4, 1, "", "sloppy"], [118, 4, 1, "", "threads"], [118, 2, 1, "", "validate"]], "nsaph.loader.loader_config.LoaderConfig.params": [[118, 3, 1, "", "description"], [118, 3, 1, "", "subclass"]], "nsaph.loader.loader_config.LoaderConfig.validate.params": [[118, 3, 1, "", "attr"], [118, 3, 1, "", "value"]], "nsaph.loader.loader_config.Parallelization": [[118, 4, 1, "", "files"], [118, 4, 1, "", "lines"], [118, 4, 1, "", "none"]], "nsaph.loader.monitor": [[121, 1, 1, "", "Activity"], [121, 1, 1, "", "DBActivityMonitor"], [121, 1, 1, "", "DBMonitorConfig"]], "nsaph.loader.monitor.DBActivityMonitor": [[121, 2, 1, "", "get_activity"], [121, 2, 1, "", "get_indexing_progress"], [121, 2, 1, "", "get_instance"], [121, 2, 1, "", "run"]], "nsaph.loader.monitor.DBMonitorConfig.params": [[121, 3, 1, "", "description"], [121, 3, 1, "", "subclass"]], "nsaph.loader.monitor.DBMonitorConfig": [[121, 4, 1, "", "pid"], [121, 4, 1, "", "state"]], "nsaph.loader.project_loader": [[126, 1, 1, "", "ProjectLoader"], [126, 5, 1, "", "is_relative_to"], [126, 5, 1, "", "remove_ext"]], "nsaph.loader.project_loader.ProjectLoader": [[126, 2, 1, "", "introspect"], [126, 2, 1, "", "new_domain"], [126, 2, 1, "", "run"], [126, 2, 1, "", "save_registry"]], "nsaph.loader.project_loader.ProjectLoader.params": [[126, 3, 1, "", "context"]], "nsaph.loader.vacuum": [[137, 1, 1, "", "Vacuum"], [137, 5, 1, "", "find_name"]], "nsaph.loader.vacuum.Vacuum": [[137, 2, 1, "", "log_activity"], [137, 2, 1, "", "run"]], "nsaph.requests": [[110, 0, 0, "-", "hdf5_export"], [128, 0, 0, "-", "query"]], "nsaph.requests.hdf5_export": [[110, 1, 1, "", "Dataset"], [110, 5, 1, "", "append"], [110, 5, 1, "", "dtype"], [110, 5, 1, "", "export"], [110, 5, 1, "", "map2ds"], [110, 5, 1, "", "store"]], "nsaph.requests.hdf5_export.Dataset": [[110, 2, 1, "", "add_index"], [110, 2, 1, "", "append"], [110, 2, 1, "", "clear"], [110, 2, 1, "", "to_hdf5"], [110, 2, 1, "", "type_name"]], "nsaph.requests.hdf5_export.export.params": [[110, 3, 1, "", "connection_name"], [110, 3, 1, "", "db_ini"], [110, 3, 1, "", "path_to_user_request"]], "nsaph.requests.query": [[128, 1, 1, "", "Query"], [128, 5, 1, "", "all_tables"], [128, 5, 1, "", "collect_tables"], [128, 5, 1, "", "find_tables"], [128, 5, 1, "", "fqn"], [128, 5, 1, "", "generate"], [128, 5, 1, "", "generate_from"], [128, 5, 1, "", "generate_order_by"], [128, 5, 1, "", "generate_select"], [128, 5, 1, "", "generate_where"], [128, 5, 1, "", "reduce_tables"]], "nsaph.requests.query.Query": [[128, 2, 1, "", "execute"], [128, 2, 1, "", "prepare"], [128, 4, 1, "", "sql"]], "nsaph.util": [[103, 0, 0, "-", "cwl_collect_outputs"], [108, 0, 0, "-", "executors"], [113, 0, 0, "-", "init_core_db"], [122, 0, 0, "-", "net"], [124, 0, 0, "-", "pg_json_dump"], [127, 0, 0, "-", "psql"], [130, 0, 0, "-", "resources"], [132, 0, 0, "-", "sas_explorer"], [133, 0, 0, "-", "shapes"], [134, 0, 0, "-", "ssa2fips"], [138, 0, 0, "-", "zip2fips"]], "nsaph.util.cwl_collect_outputs": [[103, 5, 1, "", "collect"], [103, 5, 1, "", "encode"], [103, 5, 1, "", "parse_args"]], "nsaph.util.executors": [[108, 1, 1, "", "BlockingThreadPoolExecutor"], [108, 5, 1, "", "thread_initializer"]], "nsaph.util.executors.BlockingThreadPoolExecutor": [[108, 2, 1, "", "submit"], [108, 2, 1, "", "wait"], [108, 2, 1, "", "wait_for_completion"]], "nsaph.util.init_core_db": [[113, 5, 1, "", "execute"], [113, 5, 1, "", "get_sql_dir"], [113, 5, 1, "", "init_core"], [113, 5, 1, "", "load_data"], [113, 5, 1, "", "parse_args"]], "nsaph.util.net": [[122, 5, 1, "", "get_hostname_as_localhost"]], "nsaph.util.pg_json_dump": [[124, 5, 1, "", "add_state_fips"], [124, 5, 1, "", "dump"], [124, 5, 1, "", "ensure"], [124, 5, 1, "", "export"], [124, 5, 1, "", "flush"], [124, 5, 1, "", "fqn"], [124, 5, 1, "", "import_table"], [124, 5, 1, "", "quote"], [124, 5, 1, "", "result_set"], [124, 5, 1, "", "show"]], "nsaph.util.psql": [[127, 5, 1, "", "execute"], [127, 5, 1, "", "parse_args"]], "nsaph.util.resources": [[130, 5, 1, "", "get_resource_dir"], [130, 5, 1, "", "get_resources"], [130, 5, 1, "", "name2path"]], "nsaph.util.sas_explorer": [[132, 5, 1, "", "info"], [132, 5, 1, "", "simulate"]], "nsaph.util.shapes": [[133, 5, 1, "", "install"]], "nsaph.util.ssa2fips": [[134, 1, 1, "", "SSA2FIPS"], [134, 1, 1, "", "SSAFile"]], "nsaph.util.ssa2fips.SSA2FIPS": [[134, 4, 1, "", "meta"], [134, 2, 1, "", "print"], [134, 2, 1, "", "read"], [134, 2, 1, "", "store"], [134, 4, 1, "", "y"], [134, 4, 1, "", "years"]], "nsaph.util.ssa2fips.SSAFile": [[134, 2, 1, "", "read"], [134, 2, 1, "", "set_year"], [134, 2, 1, "", "values"]], "nsaph.util.zip2fips": [[138, 1, 1, "", "Zip2FipsCrossWalk"]], "nsaph.util.zip2fips.Zip2FipsCrossWalk": [[138, 2, 1, "", "download"], [138, 4, 1, "", "m2q"], [138, 2, 1, "", "save"], [138, 4, 1, "", "table"], [138, 4, 1, "", "url_pattern"]], "nsaph_gis": [[170, 0, 0, "-", "annotator"], [171, 0, 0, "-", "compute_shape"], [172, 0, 0, "-", "constants"], [173, 0, 0, "-", "downloader"], [174, 0, 0, "-", "geometry"]], "nsaph_gis.annotator": [[170, 1, 1, "", "GISAnnotator"]], "nsaph_gis.annotator.GISAnnotator": [[170, 2, 1, "", "join"], [170, 2, 1, "", "matches"]], "nsaph_gis.annotator.GISAnnotator.join.params": [[170, 3, 1, "", "df"], [170, 3, 1, "", "x"], [170, 3, 1, "", "y"]], "nsaph_gis.annotator.GISAnnotator.params": [[170, 3, 1, "", "columns"], [170, 3, 1, "", "crs"], [170, 3, 1, "", "shape_files"]], "nsaph_gis.compute_shape": [[171, 1, 1, "", "Record"], [171, 1, 1, "", "StatsCounter"]], "nsaph_gis.compute_shape.Record": [[171, 4, 1, "", "mean"], [171, 4, 1, "", "prop"]], "nsaph_gis.compute_shape.StatsCounter": [[171, 2, 1, "", "process"]], "nsaph_gis.compute_shape.StatsCounter.process.params": [[171, 3, 1, "", "affine"], [171, 3, 1, "", "geography"], [171, 3, 1, "", "layer"], [171, 3, 1, "", "shapefile"], [171, 3, 1, "", "strategy"]], "nsaph_gis.constants": [[179, 1, 1, "", "Geography"], [224, 1, 1, "", "RasterizationStrategy"]], "nsaph_gis.constants.Geography": [[172, 4, 1, "", "county"], [172, 4, 1, "", "custom"], [172, 4, 1, "", "zip"]], "nsaph_gis.constants.RasterizationStrategy": [[224, 4, 1, "", "all_touched"], [224, 4, 1, "", "combined"], [224, 4, 1, "", "default"], [224, 4, 1, "", "downscale"]], "nsaph_gis.downloader": [[173, 1, 1, "", "GISDownloader"]], "nsaph_gis.downloader.GISDownloader": [[173, 4, 1, "", "COUNTY_TEMPLATE"], [173, 4, 1, "", "ZIP_TEMPLATE"], [173, 2, 1, "", "download_county"], [173, 2, 1, "", "download_shapes"], [173, 2, 1, "", "download_zip"]], "nsaph_gis.geometry": [[174, 1, 1, "", "PointInRaster"]], "nsaph_gis.geometry.PointInRaster": [[174, 4, 1, "", "COMPLETELY_MASKED"], [174, 4, 1, "", "PARTIALLY_MASKED"], [174, 2, 1, "", "array"], [174, 2, 1, "", "bilinear"], [174, 2, 1, "", "is_masked"], [174, 4, 1, "", "window"], [174, 4, 1, "", "x"], [174, 4, 1, "", "y"]], "nsaph_gis.geometry.PointInRaster.bilinear.params": [[174, 3, 1, "", "raster"]], "nsaph_utils": [[247, 0, 0, "-", "DataSet"]], "nsaph_utils.docutils": [[249, 0, 0, "-", "collector"], [252, 0, 0, "-", "copy_section"], [253, 0, 0, "-", "cwl2md"], [258, 0, 0, "-", "md_creator"]], "nsaph_utils.docutils.collector": [[249, 1, 1, "", "ModuleCollector"], [249, 5, 1, "", "main"]], "nsaph_utils.docutils.collector.ModuleCollector": [[249, 2, 1, "", "collect"]], "nsaph_utils.docutils.copy_section": [[252, 5, 1, "", "get_header_level"], [252, 5, 1, "", "insert_section"], [252, 5, 1, "", "main"], [252, 5, 1, "", "read_section"]], "nsaph_utils.docutils.cwl2md": [[253, 1, 1, "", "CWLParser"], [253, 5, 1, "", "main"]], "nsaph_utils.docutils.cwl2md.CWLParser": [[253, 2, 1, "", "parse"]], "nsaph_utils.docutils.md_creator": [[258, 1, 1, "", "MDCreator"]], "nsaph_utils.docutils.md_creator.MDCreator": [[258, 2, 1, "", "add_header"], [258, 2, 1, "", "add_image"], [258, 2, 1, "", "add_table"], [258, 2, 1, "", "add_text"], [258, 2, 1, "", "save"]], "nsaph_utils.interpolation": [[255, 0, 0, "-", "interface"], [256, 0, 0, "-", "interpolate_ma"]], "nsaph_utils.interpolation.interface": [[255, 5, 1, "", "interpolate"]], "nsaph_utils.interpolation.interface.interpolate.params": [[255, 3, 1, "", "by_var"], [255, 3, 1, "", "data"], [255, 3, 1, "", "interpolate_vars"], [255, 3, 1, "", "ma_num"], [255, 3, 1, "", "method"], [255, 3, 1, "", "tvar"]], "nsaph_utils.interpolation.interpolate_ma": [[256, 5, 1, "", "calc_weights"], [256, 5, 1, "", "get_indices"], [256, 5, 1, "", "interpolate_ma"]], "nsaph_utils.interpolation.interpolate_ma.calc_weights.params": [[256, 3, 1, "", "i"], [256, 3, 1, "", "indices"], [256, 3, 1, "", "vec"]], "nsaph_utils.interpolation.interpolate_ma.get_indices.params": [[256, 3, 1, "", "index"], [256, 3, 1, "", "k"], [256, 3, 1, "", "vec"]], "nsaph_utils.interpolation.interpolate_ma.interpolate_ma.params": [[256, 3, 1, "", "k"], [256, 3, 1, "", "num_vec"]], "nsaph_utils.qc": [[264, 0, 0, "-", "tester"]], "nsaph_utils.qc.tester": [[264, 1, 1, "", "Condition"], [264, 6, 1, "", "ExpectationError"], [264, 1, 1, "", "Severity"], [264, 1, 1, "", "Test"], [264, 1, 1, "", "Tester"]], "nsaph_utils.qc.tester.Condition": [[264, 4, 1, "", "count_missing"], [264, 4, 1, "", "data_type"], [264, 4, 1, "", "greater_than"], [264, 4, 1, "", "less_than"], [264, 4, 1, "", "no_missing"]], "nsaph_utils.qc.tester.Severity": [[264, 4, 1, "", "critical"], [264, 4, 1, "", "debug"], [264, 4, 1, "", "error"], [264, 4, 1, "", "info"], [264, 4, 1, "", "warning"]], "nsaph_utils.qc.tester.Test": [[264, 2, 1, "", "check"], [264, 4, 1, "", "val"]], "nsaph_utils.qc.tester.Test.check.params": [[264, 3, 1, "", "df"]], "nsaph_utils.qc.tester.Tester": [[264, 2, 1, "", "add"], [264, 2, 1, "", "check"], [264, 2, 1, "", "load_yaml"]], "nsaph_utils.utils": [[248, 0, 0, "-", "cli"], [251, 0, 0, "-", "context"], [254, 0, 0, "-", "fwf"], [257, 0, 0, "-", "io_utils"], [259, 0, 0, "-", "pyfst"]], "nsaph_utils.utils.context": [[251, 1, 1, "", "Argument"], [251, 1, 1, "", "Cardinality"], [251, 1, 1, "", "Context"]], "nsaph_utils.utils.context.Argument": [[251, 2, 1, "", "add_to"], [251, 2, 1, "", "get_action"], [251, 2, 1, "", "get_help"], [251, 2, 1, "", "get_nargs"], [251, 2, 1, "", "is_required"]], "nsaph_utils.utils.context.Argument.params": [[251, 3, 1, "", "aliases"], [251, 3, 1, "", "cardinality"], [251, 3, 1, "", "default"], [251, 3, 1, "", "help"], [251, 3, 1, "", "name"], [251, 3, 1, "", "type"], [251, 3, 1, "", "valid_values"]], "nsaph_utils.utils.context.Cardinality": [[251, 4, 1, "", "multiple"], [251, 4, 1, "", "single"]], "nsaph_utils.utils.context.Context": [[251, 4, 1, "", "compress"], [251, 2, 1, "", "default"], [251, 2, 1, "", "enum"], [251, 2, 1, "", "instantiate"], [251, 2, 1, "", "set_empty_args"], [251, 2, 1, "", "validate"], [251, 4, 1, "", "years"]], "nsaph_utils.utils.context.Context.enum.params": [[251, 3, 1, "", "cls"], [251, 3, 1, "", "s"]], "nsaph_utils.utils.context.Context.params": [[251, 3, 1, "", "description"], [251, 3, 1, "", "subclass"]], "nsaph_utils.utils.context.Context.validate.params": [[251, 3, 1, "", "attr"], [251, 3, 1, "", "value"]], "nsaph_utils.utils.fwf": [[254, 6, 1, "", "FTSParseException"], [254, 1, 1, "", "FWFColumn"], [254, 1, 1, "", "FWFMeta"], [254, 1, 1, "", "FWFReader"]], "nsaph_utils.utils.fwf.FWFColumn": [[254, 4, 1, "", "d"], [254, 4, 1, "", "end"], [254, 4, 1, "", "length"], [254, 4, 1, "", "name"], [254, 4, 1, "", "ord"], [254, 4, 1, "", "start"], [254, 4, 1, "", "type"]], "nsaph_utils.utils.fwf.FWFMeta": [[254, 4, 1, "", "columns"], [254, 4, 1, "", "ncol"], [254, 4, 1, "", "nrows"], [254, 4, 1, "", "path"], [254, 4, 1, "", "rlen"], [254, 4, 1, "", "size"]], "nsaph_utils.utils.fwf.FWFReader": [[254, 4, 1, "", "bad_lines"], [254, 2, 1, "", "close"], [254, 2, 1, "", "column_names"], [254, 4, 1, "", "good_lines"], [254, 2, 1, "", "next"], [254, 2, 1, "", "on_parse_exception"], [254, 2, 1, "", "open"], [254, 2, 1, "", "read_record"], [254, 2, 1, "", "validate"]], "nsaph_utils.utils.fwf.FWFReader.params": [[254, 3, 1, "", "meta"], [254, 3, 1, "", "ret_dict"]], "nsaph_utils.utils.io_utils": [[257, 1, 1, "", "CSVFileWrapper"], [257, 1, 1, "", "CSVWriter"], [257, 1, 1, "", "Collector"], [257, 1, 1, "", "DownloadTask"], [257, 1, 1, "", "ListCollector"], [257, 1, 1, "", "SpecialValues"], [257, 5, 1, "", "as_content"], [257, 5, 1, "", "as_csv_reader"], [257, 5, 1, "", "as_dict"], [257, 5, 1, "", "as_stream"], [257, 5, 1, "", "basename"], [257, 5, 1, "", "check_http_response"], [257, 5, 1, "", "count_lines"], [257, 5, 1, "", "dataframe2csv"], [257, 5, 1, "", "download"], [257, 5, 1, "", "file_as_csv_reader"], [257, 5, 1, "", "file_as_stream"], [257, 5, 1, "", "fopen"], [257, 5, 1, "", "fst2csv"], [257, 5, 1, "", "get_entries"], [257, 5, 1, "", "get_readme"], [257, 5, 1, "", "is_dir"], [257, 5, 1, "", "is_downloaded"], [257, 5, 1, "", "is_readme"], [257, 5, 1, "", "is_yaml_or_json"], [257, 5, 1, "", "sizeof_fmt"], [257, 5, 1, "", "write_csv"]], "nsaph_utils.utils.io_utils.CSVWriter": [[257, 2, 1, "", "flush"], [257, 2, 1, "", "writerow"]], "nsaph_utils.utils.io_utils.Collector": [[257, 2, 1, "", "flush"], [257, 2, 1, "", "writerow"]], "nsaph_utils.utils.io_utils.DownloadTask": [[257, 2, 1, "", "add_url"], [257, 2, 1, "", "is_up_to_date"], [257, 2, 1, "", "reset"]], "nsaph_utils.utils.io_utils.ListCollector": [[257, 2, 1, "", "get_result"], [257, 2, 1, "", "writerow"]], "nsaph_utils.utils.io_utils.SpecialValues": [[257, 4, 1, "", "NA"], [257, 4, 1, "", "NaN"], [257, 2, 1, "", "is_missing"], [257, 2, 1, "", "is_untyped"]], "nsaph_utils.utils.io_utils.as_content.params": [[257, 3, 1, "", "mode"], [257, 3, 1, "", "params"], [257, 3, 1, "", "url"]], "nsaph_utils.utils.io_utils.as_csv_reader.params": [[257, 3, 1, "", "url"]], "nsaph_utils.utils.io_utils.as_stream.params": [[257, 3, 1, "", "extension"], [257, 3, 1, "", "mode"], [257, 3, 1, "", "params"], [257, 3, 1, "", "url"]], "nsaph_utils.utils.io_utils.basename.params": [[257, 3, 1, "", "path"]], "nsaph_utils.utils.io_utils.check_http_response.params": [[257, 3, 1, "", "r"]], "nsaph_utils.utils.io_utils.file_as_csv_reader.params": [[257, 3, 1, "", "filename"]], "nsaph_utils.utils.io_utils.file_as_stream.params": [[257, 3, 1, "", "extension"], [257, 3, 1, "", "filename"], [257, 3, 1, "", "mode"]], "nsaph_utils.utils.io_utils.fopen.params": [[257, 3, 1, "", "mode"], [257, 3, 1, "", "path"]], "nsaph_utils.utils.io_utils.get_entries.params": [[257, 3, 1, "", "path"]], "nsaph_utils.utils.io_utils.get_readme.params": [[257, 3, 1, "", "path"]], "nsaph_utils.utils.io_utils.is_dir.params": [[257, 3, 1, "", "path"]], "nsaph_utils.utils.io_utils.is_downloaded.params": [[257, 3, 1, "", "check_size"], [257, 3, 1, "", "target"], [257, 3, 1, "", "url"]], "nsaph_utils.utils.io_utils.is_readme.params": [[257, 3, 1, "", "name"]], "nsaph_utils.utils.io_utils.write_csv.params": [[257, 3, 1, "", "filter"], [257, 3, 1, "", "reader"], [257, 3, 1, "", "transformer"], [257, 3, 1, "", "write_header"], [257, 3, 1, "", "writer"]], "nsaph_utils.utils.pyfst": [[259, 1, 1, "", "FSTReader"], [259, 5, 1, "", "choose_cran_mirror"], [259, 5, 1, "", "ensure_packages"], [259, 5, 1, "", "read_fst"], [259, 5, 1, "", "vector2list"]], "nsaph_utils.utils.pyfst.FSTReader": [[259, 2, 1, "", "close"], [259, 2, 1, "", "current"], [259, 2, 1, "", "current_mapping"], [259, 2, 1, "", "current_row"], [259, 2, 1, "", "open"], [259, 2, 1, "", "read_next"], [259, 2, 1, "", "rewind"]], "pollution": [[184, 0, 0, "-", "aggregator"], [195, 0, 0, "-", "wustl_file_processor"]], "pollution.aggregator": [[184, 1, 1, "", "Aggregator"]], "pollution.aggregator.Aggregator": [[184, 2, 1, "", "collect_data"], [184, 2, 1, "", "compute"], [184, 2, 1, "", "execute"], [184, 2, 1, "", "prepare"], [184, 2, 1, "", "write_header"]], "pollution.aggregator.Aggregator.execute.params": [[184, 3, 1, "", "mode"]], "pollution.wustl_file_processor": [[195, 1, 1, "", "WUSTLFile"]], "pollution.wustl_file_processor.WUSTLFile": [[195, 2, 1, "", "execute"], [195, 2, 1, "", "parse_file_name"], [195, 2, 1, "", "prepare"]], "pollution.wustl_file_processor.WUSTLFile.params": [[195, 3, 1, "", "context"]], "tests": [[261, 0, 0, "-", "test_cli_context"], [262, 0, 0, "-", "test_interpolation"], [263, 0, 0, "-", "test_qc"]], "tests.test_cli_context": [[261, 1, 1, "", "MadeUpContext"], [261, 1, 1, "", "MyTestCase"]], "tests.test_cli_context.MadeUpContext.params": [[261, 3, 1, "", "description"], [261, 3, 1, "", "subclass"]], "tests.test_cli_context.MadeUpContext": [[261, 2, 1, "", "validate"]], "tests.test_cli_context.MadeUpContext.validate.params": [[261, 3, 1, "", "attr"], [261, 3, 1, "", "value"]], "tests.test_cli_context.MyTestCase": [[261, 2, 1, "", "test_custom_validate"], [261, 2, 1, "", "test_default_context"]], "tests.test_interpolation": [[262, 1, 1, "", "InterpolationTest"]], "tests.test_interpolation.InterpolationTest": [[262, 2, 1, "", "test_ma_interpolation"]], "tests.test_qc": [[263, 1, 1, "", "QCTests"]], "tests.test_qc.QCTests": [[263, 2, 1, "", "test_tests"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:parameter", "4": "py:attribute", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "parameter", "Python parameter"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"how": [0, 96, 225], "add": 0, "data": [0, 3, 33, 37, 39, 40, 41, 42, 44, 48, 73, 76, 80, 81, 82, 83, 92, 93, 99, 117, 141, 155, 156, 158, 161, 162, 164, 196, 197, 198, 212, 213, 219, 229, 232, 266, 269, 270, 271, 273, 274], "databas": [0, 33, 41, 48, 74, 81, 82, 93, 96, 99, 105, 119, 161, 196, 212, 225, 231, 270], "what": [0, 183, 225, 226, 227, 232, 270, 274], "ar": [0, 232], "you": [0, 225], "ad": [0, 1], "model": [0, 39, 40, 44, 93, 99, 104, 120, 215], "v": 0, "introspect": [0, 94], "new": [0, 7, 238, 239], "domain": [0, 93, 106, 266], "exist": [0, 7, 236, 237], "tabl": [0, 10, 34, 41, 48, 68, 84, 86, 89, 93, 97, 119, 139, 166, 216, 217], "creat": [0, 38, 41, 84, 93, 96, 102, 139, 225, 231], "singl": [0, 41], "automat": 0, "ingest": [0, 39, 41, 80, 93, 218, 220, 221, 270], "multipl": [0, 38, 225], "file": [0, 3, 4, 39, 40, 41, 48, 73, 93, 96, 99, 153, 162, 214, 219, 220, 221, 225, 234, 235, 267], "from": [0, 27, 48, 73, 94, 119, 159, 200, 201, 203, 205, 206, 208, 210, 218, 232], "system": [0, 97, 153], "changelog": 1, "unreleas": 1, "chang": [1, 225], "fix": 1, "remov": 1, "about": 2, "store": [3, 27, 41], "censu": [4, 7, 10, 36, 159], "variabl": [4, 176, 225], "structur": [4, 44, 98, 99], "field": 4, "definit": [4, 41, 96], "exampl": [4, 39, 99, 107, 183, 225, 230, 236, 237, 238, 239], "skip": 4, "year": [4, 38, 41, 221], "document": [4, 39, 44, 95, 99, 246, 268, 270, 271], "contant": 5, "contribut": 6, "checklist": 6, "set": [7, 119, 225], "up": 7, "environ": [7, 96, 165, 225, 236, 237, 238, 239], "updat": [7, 232], "an": 7, "instal": [7, 96, 169, 225, 230, 232, 240, 241], "nsaph_util": 7, "api": [7, 94, 104, 105, 117], "kei": [7, 41], "regist": 7, "conda": [7, 96, 225, 226, 233, 236, 237, 238, 239, 240], "kernal": 7, "recip": 7, "frequent": 8, "ask": 8, "question": 8, "glossari": [9, 226], "nsaph": [10, 39, 70, 71, 91, 92, 93, 96, 99, 123, 141, 169, 229, 232, 246, 270, 271], "pipelin": [10, 39, 40, 41, 79, 80, 82, 87, 88, 152, 153, 154, 163, 164, 183, 199, 202, 204, 207, 209, 218, 270, 273], "introduct": [10, 40, 93, 98, 229, 270], "research": 10, "develop": [10, 228, 246, 274], "commun": 10, "old": 10, "doc": 10, "indic": [10, 44, 93, 99, 129, 246, 265, 271], "The": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 100, 101, 102, 103, 104, 106, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 137, 138, 145, 146, 149, 151, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "assemble_data": [11, 23], "modul": [11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 45, 46, 47, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 63, 65, 66, 67, 99, 100, 101, 102, 103, 104, 108, 109, 110, 112, 113, 114, 115, 116, 118, 120, 121, 122, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 137, 138, 145, 146, 149, 151, 175, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 222, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264], "py": [11, 13, 14, 16, 19, 20, 21, 23], "calculate_dens": 12, "census_info": [13, 23], "cli": [14, 23, 248], "do_qc": 15, "except": [16, 23], "interpolate_data": 17, "load_data": 18, "queri": [19, 23, 42, 96, 128, 131, 141], "tigerweb": [20, 23], "util": [21, 23, 71, 91, 94, 99, 123, 135, 136, 182, 183, 246, 270], "write_data": 22, "census_assembl": 24, "cwl": [24, 25, 26, 27, 28, 29, 30, 31, 41, 44, 140, 183, 200, 201, 203, 205, 206, 208, 210, 226, 227, 230], "input": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "output": [24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "census_dens": 25, "census_ingest": [26, 27], "step": [26, 27, 30, 41, 70, 73, 77, 78, 79, 80, 81, 82, 84, 87, 88, 152, 153, 154, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 218, 220, 221, 228], "sub": [27, 200, 201, 203, 205, 206, 208, 210], "workflow": [27, 36, 41, 70, 73, 140, 200, 201, 203, 205, 206, 208, 210, 220, 221, 225], "census_interpol": 28, "census_qc": 29, "census_workflow": 30, "census_writ": 31, "index": [32, 72, 90, 93, 160, 211], "builder": [32, 72, 90, 160, 211], "descript": [32, 33, 34, 39, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 141, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 165, 166, 196, 197, 198, 199, 202, 204, 207, 209, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221], "upload": [33, 161, 196, 212], "gridmet": [33, 176, 183, 196, 197, 199, 200, 201, 202, 204, 207, 209, 212, 213, 222], "tuner": [34, 89, 166, 217], "tool": [34, 37, 83, 89, 99, 140, 159, 166, 182, 183, 217, 274], "run": [34, 36, 89, 94, 166, 217, 225, 231, 244], "vacuum": [34, 89, 137, 166, 217], "quick": [35, 232], "start": [35, 231, 232], "work": 36, "packag": [36, 37, 91, 96, 99, 123, 141, 142, 144, 147, 148, 169, 232, 234, 242, 243, 244, 246, 270, 272], "command": [36, 94, 183, 228, 230, 231], "line": [36, 94, 183, 230], "interfac": [36, 230, 255], "main": [36, 39, 142, 147, 177], "python": [36, 37, 44, 91, 96, 97, 99, 167, 169, 175, 183, 222, 225, 230, 234, 243, 244, 245, 246, 272], "shapefil": [36, 152, 153, 159, 173], "download": [36, 143, 150, 152, 155, 156, 158, 162, 173, 181, 197, 198, 213, 218], "manipul": 37, "health": [37, 44], "cm": [37, 48, 76], "addit": 37, "detail": 37, "pars": [37, 40], "ft": [37, 40, 48, 85], "extens": 38, "us": [38, 43, 96, 144, 148, 150, 180, 183, 225, 230, 231, 268, 270], "feder": [38, 41, 83], "view": [38, 41, 68, 77, 78, 86, 216, 231], "differ": [38, 97], "gener": [38, 40, 48, 86, 93, 216, 270], "combin": [38, 41], "sourc": [38, 93, 97, 99], "option": [38, 94, 144, 148, 232], "column": [38, 39, 40, 41, 48, 93, 141], "exclud": 38, "cast": 38, "import": [39, 40], "medicaid": [39, 40, 42, 44, 48, 61, 73, 79, 87, 88], "process": [39, 40, 41, 79, 80, 81, 82, 87, 88, 152, 154, 201, 203, 206, 208, 210, 270, 273], "legaci": [39, 40], "statu": 39, "thi": [39, 268], "link": [39, 93], "describ": [39, 48, 99], "demograph": 39, "path": 39, "name": 39, "vm": 39, "rce": 39, "enrol": [39, 40, 41], "admiss": [39, 40, 41, 81], "yearli": 39, "elig": [39, 40], "monthli": [39, 141], "handl": [40, 41, 98], "raw": [40, 41, 76, 83], "schema": [40, 41, 93], "beneficiari": [40, 41, 82], "bene_id": 40, "dedupl": 40, "cleans": [40, 41], "inpati": [40, 41, 81], "sampl": [40, 94, 131, 141, 163, 164], "user": [40, 70, 71, 98, 99, 225, 230, 231], "request": [40, 91, 98, 99, 107], "medicar": [41, 44, 48, 62, 76, 80, 81, 82, 83, 84], "refer": 41, "overview": [41, 44, 94, 169, 246, 270], "1999": 41, "2010": 41, "2011": 41, "later": 41, "eventu": 41, "patient": [41, 42, 75], "summari": [41, 75, 267], "first": 41, "initi": [41, 68, 74, 86, 216], "condit": 41, "second": 41, "map": [41, 97, 111, 119, 232, 234], "counti": [41, 159], "fip": [41, 109, 111, 139], "code": [41, 97], "primari": 41, "uniqu": 41, "identifi": 41, "qc": [41, 84], "approach": 41, "dimens": 41, "measur": 41, "diagnos": 42, "list": [42, 225, 245], "problem": 42, "wildcard": 42, "calcul": 42, "number": 42, "hyperloglog": 43, "hll": 43, "hash": 43, "count": 43, "approxim": 43, "project": [44, 94, 99, 225, 230, 232, 241], "sql": [44, 95, 97, 99, 119, 139], "aggreg": [45, 141, 171, 184, 219, 220, 221], "create_schema_config": 46, "duplic": 47, "parser": [48, 85], "accompani": 48, "resdac": 48, "content": [48, 141, 177, 178, 271, 272], "abstract": [48, 117, 144, 148, 180], "class": [48, 106, 142, 144, 147, 148, 174, 177, 180], "concret": 48, "subclass": 48, "present": 48, "origin": 48, "should": 48, "helper": [48, 84, 139], "function": [48, 49, 97, 136, 139], "init_cms_db": 50, "mcr_combine_t": 51, "mcr_create_test_data": 52, "mcr_data_load": 53, "mcr_file": 54, "mcr_fts2csv": 55, "mcr_fts2db": 56, "mcr_registri": 57, "mcr_sa": 58, "mcr_sas2db": 59, "mcr_sas2yaml": 60, "yaml": [61, 62, 99, 215], "medpar_convert": 63, "procedur": [64, 129], "random_selector": 65, "registri": [66, 151, 191], "table_popul": 67, "resourc": [69, 99, 130, 157], "loader": [69, 75, 76, 91, 92, 99, 117, 157], "grant": [70, 71], "read": [70, 71], "select": [70, 71, 225], "privileg": [70, 71], "all": [70, 71, 222, 231, 232], "admin": [70, 71, 225], "role": [70, 71], "load": [73, 94], "materi": [77, 78, 86, 216], "creator": [77, 78], "full": [79, 87, 88, 152, 153, 154, 225], "insid": [81, 232], "core": [91, 99, 123, 270], "platform": [91, 93, 99, 229, 232, 269, 270, 271, 272, 274], "compon": [91, 167, 222], "data_model": 91, "usag": [92, 94, 104, 168], "statement": [93, 119], "invalid": 93, "record": 93, "comput": [93, 181, 183], "transpos": 93, "multi": 93, "ddl": [93, 111], "polici": 93, "nomenclatur": 93, "u": 93, "state": [93, 141], "directori": 94, "configur": [94, 104, 144, 148, 180, 225], "dry": 94, "onli": 94, "setup": [96, 260], "virtual": 96, "connect": [96, 99, 105], "execut": [96, 225], "explain": 96, "optim": 96, "between": 97, "territori": 97, "preliminari": 98, "consider": 98, "softwar": 99, "subpackag": 99, "wrapper": 99, "implement": 99, "incomplet": 99, "miscellan": 99, "adi": 100, "common": [101, 140], "cwl_collect_output": 103, "data_load": 104, "specif": 104, "executor": 108, "hdf5_export": 110, "hud": 111, "zip": [111, 139, 159], "index_build": 112, "init_core_db": 113, "insert": 114, "introspector": [115, 162], "link_gi": 116, "base": [117, 225], "loader_config": 118, "anoth": 119, "monitor": 121, "net": 122, "wide": 123, "pg_json_dump": 124, "pg_keyword": 125, "project_load": 126, "psql": 127, "A": [129, 174], "renam": 129, "sas_explor": 132, "shape": [133, 171, 192, 223], "ssa2fip": 134, "zip2fip": 138, "direct": 139, "lookup": 139, "epa": [141, 142, 144, 147, 148, 152, 154, 161, 168], "airnow": [141, 142, 143, 144, 152, 155, 163, 165, 168, 198], "date": 141, "aq": [141, 147, 148, 154, 156, 158, 164, 168], "annual": [141, 164], "daili": [141, 164], "intern": [144, 148, 150, 180, 269], "context": [144, 148, 180, 251], "argument": [144, 148, 163, 164, 180], "airnow_setup": 145, "airnow_shap": 146, "cardin": [148, 180], "enum": [148, 172, 178, 180], "aqs_expand": 149, "script": [150, 230, 240, 241, 243, 244], "task": [150, 181, 193], "includ": [152, 230, 272], "airnowprocess": 153, "local": [153, 228], "retriev": 159, "websit": 159, "For": 164, "no2": 164, "nitrogen": 164, "pm25": 164, "small": 164, "particl": 164, "prepar": [165, 230], "toolkit": 168, "gi": [169, 170, 172, 175, 270], "librari": [169, 225], "annot": 170, "observ": 171, "valu": 171, "over": [171, 219], "relat": [172, 225], "point": 174, "raster": [174, 224], "band": 176, "paramet": [178, 225], "type": [179, 223], "geographi": [179, 219], "object": [180, 181], "subtask": 181, "i": [183, 226, 227, 270], "config": [185, 233], "csv2hdf5": 186, "exclude_csv": 187, "geop": 188, "gridmet_tool": 189, "launcher": 190, "test": [194, 230, 232], "wustl_file_processor": 195, "init_t": [200, 205], "gridmet_dwnl_onli": 203, "gridmet_humid": [205, 206], "gridmet_increment": 208, "gridmet_local_shap": 210, "rearrang": 214, "writer": 215, "pollut": 218, "washu": 218, "box": 218, "netcdf": [219, 220, 221], "given": 219, "one": [220, 221], "format": 220, "strategi": 224, "guid": [225, 227], "can": [225, 274], "control": 225, "dure": 225, "manag": 225, "third": 225, "parti": 225, "requir": [225, 245], "r": [225, 230, 242], "enforc": 225, "order": 225, "git": 225, "submodul": 225, "overrid": 225, "base_url": 225, "airflow": [225, 226, 227, 228, 230, 231], "usernam": 225, "password": 225, "postgresql": [225, 226, 231, 236, 237, 238, 239], "when": [225, 228, 231], "need": [225, 274], "default": [225, 233], "server": 225, "authent": 225, "tell": 225, "network": 225, "note": 225, "mac": 225, "avail": 225, "env": 225, "readi": 225, "contain": [225, 228, 231, 232, 238, 239, 243, 244], "faq": 226, "docker": [226, 228, 232, 234, 235, 243, 244], "compos": [226, 234, 235], "deploy": [227, 228, 229, 232, 270], "howto": 228, "build": [228, 270], "rebuild": [228, 232, 243], "goe": 228, "wrong": 228, "copi": 228, "dag": 228, "folder": 228, "mode": [230, 274], "1": [230, 232], "basic": 230, "hello": 230, "world": 230, "2": [230, 232], "3": [230, 232], "altern": 230, "wai": 230, "ui": 230, "some": 231, "To": 231, "log": 231, "attach": 231, "bash": 231, "doe": [231, 274], "stop": 231, "your": 231, "delet": 231, "imag": 231, "volum": 231, "upgrad": 231, "prerequisit": 232, "host": 232, "without": [237, 239], "latest": 243, "refresh": 244, "current": 246, "todo": 246, "dataset": 247, "collector": 249, "conf": 250, "copy_sect": 252, "cwl2md": 253, "fwf": 254, "interpolate_ma": 256, "io_util": 257, "md_creator": 258, "pyfst": 259, "test_cli_context": 261, "test_interpol": 262, "test_qc": 263, "tester": 264, "subject": 266, "area": 266, "transfer": 267, "term": [268, 270], "acronym": [268, 270], "home": 270, "deploi": [270, 274], "repositori": 270, "why": 274, "do": 274, "we": 274, "architectur": 274, "support": 274, "program": 274, "languag": 274, "where": 274}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.todo": 2, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"How to add data to the database": [[0, "how-to-add-data-to-the-database"]], "What data are you adding?": [[0, "what-data-are-you-adding"]], "Data modelling vs data introspection": [[0, "data-modelling-vs-data-introspection"]], "Adding new data domain": [[0, "adding-new-data-domain"]], "Adding data to existing table": [[0, "adding-data-to-existing-table"]], "Creating new single table": [[0, "creating-new-single-table"]], "Automatically ingesting multiple files from a file system": [[0, "automatically-ingesting-multiple-files-from-a-file-system"]], "Changelog": [[1, "changelog"]], "[Unreleased]": [[1, "unreleased"]], "Added": [[1, "added"]], "Changed": [[1, "changed"]], "Fixed": [[1, "fixed"]], "Removed": [[1, "removed"]], "About": [[2, "about"]], "Stored Data Files": [[3, "stored-data-files"]], "Census Variable File Structure": [[4, "census-variable-file-structure"]], "Field Definitions": [[4, "field-definitions"]], "Examples": [[4, "examples"]], "Skipping years for a Variable": [[4, "skipping-years-for-a-variable"]], "Census Variable Documentation": [[4, "census-variable-documentation"]], "Contant": [[5, "contant"]], "Contributing Checklist": [[6, "contributing-checklist"]], "Setting Up Environment": [[7, "setting-up-environment"]], "Setting up a new environment": [[7, "setting-up-a-new-environment"]], "Updating an existing environment": [[7, "updating-an-existing-environment"]], "Installing census": [[7, "installing-census"]], "Installing nsaph_utils": [[7, "installing-nsaph-utils"]], "Setting up Census API Key": [[7, "setting-up-census-api-key"]], "Registering the Conda Kernal": [[7, "registering-the-conda-kernal"]], "Updating the Environment Recipe": [[7, "updating-the-environment-recipe"]], "Frequently Asked Questions": [[8, "frequently-asked-questions"]], "Glossary": [[9, "glossary"]], "NSAPH Census Pipelines": [[10, "nsaph-census-pipelines"]], "Introduction": [[10, null], [40, "introduction"], [98, "introduction"]], "Researchers": [[10, null]], "Developers": [[10, null]], "Community": [[10, null]], "Old Doc": [[10, null]], "Indices and tables": [[10, "indices-and-tables"]], "The assemble_data Module": [[11, "module-census.assemble_data"]], "assemble_data.py": [[11, "assemble-data-py"], [23, "assemble-data-py"]], "The calculate_density Module": [[12, "module-census.calculate_density"]], "The census_info Module": [[13, "module-census.census_info"]], "census_info.py": [[13, "census-info-py"], [23, "census-info-py"]], "The cli Module": [[14, "module-census.cli"], [248, "module-nsaph_utils.utils.cli"]], "cli.py": [[14, "cli-py"], [23, "cli-py"]], "The do_qc Module": [[15, "module-census.do_qc"]], "The exceptions Module": [[16, "module-census.exceptions"]], "exceptions.py": [[16, "exceptions-py"], [23, "exceptions-py"]], "The interpolate_data Module": [[17, "module-census.interpolate_data"]], "The load_data Module": [[18, "module-census.data.load_data"]], "The query Module": [[19, "module-census.query"], [128, "module-nsaph.requests.query"]], "query.py": [[19, "query-py"], [23, "query-py"]], "The tigerweb Module": [[20, "module-census.tigerweb"]], "tigerweb.py": [[20, "tigerweb-py"], [23, "tigerweb-py"]], "The utils Module": [[21, "module-census.utils"], [135, "module-nsaph.data_model.utils"]], "utils.py": [[21, "utils-py"], [23, "utils-py"]], "The write_data Module": [[22, "module-census.write_data"]], "Modules": [[23, "modules"]], "census_assemble.cwl": [[24, "census-assemble-cwl"]], "Inputs": [[24, "inputs"], [25, "inputs"], [26, "inputs"], [27, "inputs"], [28, "inputs"], [29, "inputs"], [30, "inputs"], [31, "inputs"], [32, "inputs"], [33, "inputs"], [34, "inputs"], [68, "inputs"], [69, "inputs"], [70, "inputs"], [71, "inputs"], [72, "inputs"], [73, "inputs"], [74, "inputs"], [75, "inputs"], [76, "inputs"], [77, "inputs"], [78, "inputs"], [79, "inputs"], [80, "inputs"], [81, "inputs"], [82, "inputs"], [83, "inputs"], [84, "inputs"], [85, "inputs"], [86, "inputs"], [87, "inputs"], [88, "inputs"], [89, "inputs"], [90, "inputs"], [152, "inputs"], [153, "inputs"], [154, "inputs"], [155, "inputs"], [156, "inputs"], [157, "inputs"], [158, "inputs"], [159, "inputs"], [160, "inputs"], [161, "inputs"], [162, "inputs"], [165, "inputs"], [166, "inputs"], [196, "inputs"], [197, "inputs"], [198, "inputs"], [199, "inputs"], [200, "inputs"], [201, "inputs"], [202, "inputs"], [203, "inputs"], [204, "inputs"], [205, "inputs"], [206, "inputs"], [207, "inputs"], [208, "inputs"], [209, "inputs"], [210, "inputs"], [211, "inputs"], [212, "inputs"], [213, "inputs"], [214, "inputs"], [215, "inputs"], [216, "inputs"], [217, "inputs"], [218, "inputs"], [219, "inputs"], [220, "inputs"], [221, "inputs"]], "Outputs": [[24, "outputs"], [25, "outputs"], [26, "outputs"], [27, "outputs"], [28, "outputs"], [29, "outputs"], [30, "outputs"], [31, "outputs"], [32, "outputs"], [33, "outputs"], [34, "outputs"], [68, "outputs"], [69, "outputs"], [70, "outputs"], [71, "outputs"], [72, "outputs"], [73, "outputs"], [74, "outputs"], [75, "outputs"], [76, "outputs"], [77, "outputs"], [78, "outputs"], [79, "outputs"], [80, "outputs"], [81, "outputs"], [82, "outputs"], [83, "outputs"], [84, "outputs"], [85, "outputs"], [86, "outputs"], [87, "outputs"], [88, "outputs"], [89, "outputs"], [90, "outputs"], [152, "outputs"], [153, "outputs"], [154, "outputs"], [155, "outputs"], [156, "outputs"], [157, "outputs"], [158, "outputs"], [159, "outputs"], [160, "outputs"], [161, "outputs"], [162, "outputs"], [165, "outputs"], [166, "outputs"], [196, "outputs"], [197, "outputs"], [198, "outputs"], [199, "outputs"], [200, "outputs"], [201, "outputs"], [202, "outputs"], [203, "outputs"], [204, "outputs"], [205, "outputs"], [206, "outputs"], [207, "outputs"], [208, "outputs"], [209, "outputs"], [210, "outputs"], [211, "outputs"], [212, "outputs"], [213, "outputs"], [214, "outputs"], [215, "outputs"], [216, "outputs"], [217, "outputs"], [218, "outputs"], [219, "outputs"], [220, "outputs"], [221, "outputs"]], "census_density.cwl": [[25, "census-density-cwl"]], "census_ingest.cwl": [[26, "census-ingest-cwl"]], "Steps": [[26, "steps"], [27, "steps"], [30, "steps"], [70, "steps"], [73, "steps"], [77, "steps"], [78, "steps"], [79, "steps"], [80, "steps"], [81, "steps"], [82, "steps"], [84, "steps"], [87, "steps"], [88, "steps"], [152, "steps"], [153, "steps"], [154, "steps"], [199, "steps"], [200, "steps"], [201, "steps"], [202, "steps"], [203, "steps"], [204, "steps"], [205, "steps"], [206, "steps"], [207, "steps"], [208, "steps"], [209, "steps"], [210, "steps"], [218, "steps"], [220, "steps"], [221, "steps"]], "Sub-workflow store from census_ingest.cwl": [[27, "sub-workflow-store-from-census-ingest-cwl"]], "census_interpolate.cwl": [[28, "census-interpolate-cwl"]], "census_qc.cwl": [[29, "census-qc-cwl"]], "census_workflow.cwl": [[30, "census-workflow-cwl"]], "census_write.cwl": [[31, "census-write-cwl"]], "Index Builder": [[32, "index-builder"], [72, "index-builder"], [90, "index-builder"], [160, "index-builder"], [211, "index-builder"]], "Description": [[32, "description"], [33, "description"], [34, "description"], [68, "description"], [69, "description"], [70, "description"], [71, "description"], [72, "description"], [73, "description"], [74, "description"], [75, "description"], [76, "description"], [77, "description"], [78, "description"], [79, "description"], [80, "description"], [81, "description"], [82, "description"], [83, "description"], [84, "description"], [85, "description"], [86, "description"], [87, "description"], [88, "description"], [89, "description"], [90, "description"], [152, "description"], [153, "description"], [154, "description"], [155, "description"], [156, "description"], [157, "description"], [158, "description"], [159, "description"], [160, "description"], [161, "description"], [162, "description"], [165, "description"], [166, "description"], [196, "description"], [197, "description"], [198, "description"], [199, "description"], [202, "description"], [204, "description"], [207, "description"], [209, "description"], [211, "description"], [212, "description"], [213, "description"], [214, "description"], [215, "description"], [216, "description"], [217, "description"], [218, "description"], [219, "description"], [220, "description"], [221, "description"]], "Uploader of the gridMET Data to the database": [[33, "uploader-of-the-gridmet-data-to-the-database"], [196, "uploader-of-the-gridmet-data-to-the-database"], [212, "uploader-of-the-gridmet-data-to-the-database"]], "Table tuner tool (running VACUUM)": [[34, "table-tuner-tool-running-vacuum"], [89, "table-tuner-tool-running-vacuum"], [166, "table-tuner-tool-running-vacuum"], [217, "table-tuner-tool-running-vacuum"]], "Quick Start": [[35, "quick-start"]], "Working with the census Package": [[36, "working-with-the-census-package"]], "Running the Command Line Interface": [[36, "running-the-command-line-interface"]], "Main Python Workflow": [[36, "main-python-workflow"]], "Shapefile Downloads": [[36, "shapefile-downloads"]], "Python package to manipulate health (CMS) data": [[37, "python-package-to-manipulate-health-cms-data"]], "Package cms": [[37, "package-cms"]], "Package cms.tools": [[37, "package-cms-tools"]], "Additional details": [[37, "additional-details"]], "Parsing FTS": [[37, "parsing-fts"]], "Extensions used for creating federated view of different years": [[38, "extensions-used-for-creating-federated-view-of-different-years"]], "General": [[38, "general"]], "Combining multiple sources and optional columns": [[38, "combining-multiple-sources-and-optional-columns"]], "Exclude": [[38, "exclude"]], "Cast": [[38, "cast"]], "Importing Medicaid Data Processed by the Legacy Pipeline": [[39, "importing-medicaid-data-processed-by-the-legacy-pipeline"]], "Status of this Document": [[39, "status-of-this-document"]], "Links to Legacy Documentation": [[39, "links-to-legacy-documentation"]], "main document, describing the data model": [[39, "main-document-describing-the-data-model"]], "Demographics": [[39, "demographics"]], "Demographics Data Path": [[39, "demographics-data-path"]], "Demographics File name": [[39, "demographics-file-name"]], "Demographics data on NSAPH VM": [[39, "demographics-data-on-nsaph-vm"]], "Demographics data on RCE": [[39, "demographics-data-on-rce"]], "Demographics: Description of columns": [[39, "demographics-description-of-columns"]], "Medicaid Enrollments": [[39, "medicaid-enrollments"]], "Documentation": [[39, "documentation"]], "Medicaid Enrollments Data Path": [[39, "medicaid-enrollments-data-path"]], "Enrollments Files": [[39, "enrollments-files"]], "Enrollments data on NSAPH VM": [[39, "enrollments-data-on-nsaph-vm"]], "Enrollments data on RCE": [[39, "enrollments-data-on-rce"]], "Enrollments: Description of columns": [[39, "enrollments-description-of-columns"]], "Admissions": [[39, "admissions"]], "Admissions Data Path": [[39, "admissions-data-path"]], "Admissions Files": [[39, "admissions-files"]], "Admissions data on NSAPH VM": [[39, "admissions-data-on-nsaph-vm"]], "Admissions data on RCE": [[39, "admissions-data-on-rce"]], "Admissions: Description of columns": [[39, "admissions-description-of-columns"]], "Examples of ingestion of processed data:": [[39, "examples-of-ingestion-of-processed-data"]], "Ingest demographics:": [[39, "ingest-demographics"]], "Ingest enrollments (yearly) and eligibility (monthly)": [[39, "ingest-enrollments-yearly-and-eligibility-monthly"]], "Ingest admissions": [[39, "ingest-admissions"]], "Handling Medicaid data": [[40, "handling-medicaid-data"]], "Legacy Pipeline": [[40, "legacy-pipeline"]], "Importing raw data": [[40, "importing-raw-data"]], "Parsing FTS files to generate schema": [[40, "parsing-fts-files-to-generate-schema"]], "Processing data": [[40, "processing-data"]], "Data Model": [[40, "data-model"]], "Beneficiaries": [[40, "beneficiaries"]], "BENE_ID column": [[40, "bene-id-column"]], "Deduplication and data cleansing": [[40, "deduplication-and-data-cleansing"]], "Enrollments": [[40, "enrollments"]], "Eligibility": [[40, "eligibility"]], "Inpatient Admissions": [[40, "inpatient-admissions"]], "Pipeline": [[40, "pipeline"]], "Sample user request:": [[40, "sample-user-request"]], "Medicare Files Handling": [[41, "medicare-files-handling"]], "Processing pipeline": [[41, "processing-pipeline"]], "Medicare Pipeline Steps": [[41, "medicare-pipeline-steps"]], "Ingestion of raw data": [[41, "ingestion-of-raw-data"]], "Processing Data in the Database": [[41, "processing-data-in-the-database"]], "Medicare Pipeline References": [[41, "medicare-pipeline-references"]], "Ingesting Raw Files": [[41, "ingesting-raw-files"]], "Overview of Ingesting Raw Medicare Files": [[41, "overview-of-ingesting-raw-medicare-files"]], "Storing raw data in the Database": [[41, "storing-raw-data-in-the-database"]], "Files for 1999 to 2010": [[41, "files-for-1999-to-2010"]], "Files for Years 2011 and later": [[41, "files-for-years-2011-and-later"]], "Combining raw files into a single view": [[41, "combining-raw-files-into-a-single-view"]], "Eventual database schema": [[41, "eventual-database-schema"]], "CWL workflows": [[41, "cwl-workflows"]], "Creating Federated Patient Summary": [[41, "creating-federated-patient-summary"]], "First step: Initial in-database data conditioning": [[41, "first-step-initial-in-database-data-conditioning"]], "Second step: Mapping to county FIPS codes": [[41, "second-step-mapping-to-county-fips-codes"]], "Creating Beneficiaries table": [[41, "creating-beneficiaries-table"]], "Creating Enrollments table": [[41, "creating-enrollments-table"]], "Enrollments overview": [[41, "enrollments-overview"]], "Enrollments Primary key (unique identifier)": [[41, "enrollments-primary-key-unique-identifier"]], "Enrollments data cleansing": [[41, "enrollments-data-cleansing"]], "Enrollments columns definitions": [[41, "enrollments-columns-definitions"]], "Creating Federated Admissions view": [[41, "creating-federated-admissions-view"]], "Creating Inpatient Admissions table": [[41, "creating-inpatient-admissions-table"]], "Creating QC Tables": [[41, "creating-qc-tables"]], "Medicare QC approach": [[41, "medicare-qc-approach"]], "Enrollments QC Table": [[41, "enrollments-qc-table"]], "Enrollments QC Table Definition": [[41, "enrollments-qc-table-definition"]], "Enrollments QC Table Dimensions": [[41, "enrollments-qc-table-dimensions"]], "Enrollments QC Table Measures": [[41, "enrollments-qc-table-measures"]], "Admissions QC Table": [[41, "admissions-qc-table"]], "Admissions QC Table Definition": [[41, "admissions-qc-table-definition"]], "Admissions QC Table Dimensions": [[41, "admissions-qc-table-dimensions"]], "Admissions QC Table Measures": [[41, "admissions-qc-table-measures"]], "Querying Medicaid Data": [[42, "querying-medicaid-data"]], "Querying diagnoses": [[42, "querying-diagnoses"]], "Listing patients": [[42, "listing-patients"]], "Problem: no wildcarding": [[42, "problem-no-wildcarding"]], "Calculating numbers": [[42, "calculating-numbers"]], "Using HyperLogLog (HLL) hashes for count approximations": [[43, "using-hyperloglog-hll-hashes-for-count-approximations"]], "Health Data": [[44, "health-data"]], "Overview of health data (Medicare and Medicaid)": [[44, "overview-of-health-data-medicare-and-medicaid"]], "Project Structure": [[44, "project-structure"], [99, "project-structure"]], "CWL": [[44, "cwl"]], "Python": [[44, "python"]], "Data Model for health data": [[44, "data-model-for-health-data"]], "SQL": [[44, "sql"]], "Documentation Indices": [[44, "documentation-indices"], [99, "documentation-indices"], [246, "documentation-indices"], [271, "documentation-indices"]], "The aggregates Module": [[45, "module-cms.aggregates"]], "The create_schema_config Module": [[46, "module-cms.create_schema_config"]], "The duplicates Module": [[47, "module-cms.duplicates"]], "Parser for FTS files that accompany CMS data from ResDac": [[48, "parser-for-fts-files-that-accompany-cms-data-from-resdac"]], "Table of Contents": [[48, "table-of-contents"]], "Abstract class for CMS FTS file": [[48, "abstract-class-for-cms-fts-file"]], "Concrete subclass describing Medicare FTS file": [[48, "concrete-subclass-describing-medicare-fts-file"]], "Concrete subclass describing Medicaid FTS file": [[48, "concrete-subclass-describing-medicaid-fts-file"]], "Abstract class describing a column in a CMS data file": [[48, "abstract-class-describing-a-column-in-a-cms-data-file"]], "Concrete subclass describing a column in a Medicare data file": [[48, "concrete-subclass-describing-a-column-in-a-medicare-data-file"]], "Concrete subclass describing a column in a Medicaid data file": [[48, "concrete-subclass-describing-a-column-in-a-medicaid-data-file"]], "Concrete subclass describing a column not present in the original data but that should be generated in the database": [[48, "concrete-subclass-describing-a-column-not-present-in-the-original-data-but-that-should-be-generated-in-the-database"]], "Helper Classes": [[48, "helper-classes"]], "Helper Functions": [[48, "helper-functions"]], "Functions": [[49, "functions"], [97, "functions"]], "The init_cms_db Module": [[50, "module-cms.init_cms_db"]], "The mcr_combine_tables Module": [[51, "module-cms.tools.mcr_combine_tables"]], "The mcr_create_test_data Module": [[52, "module-cms.tools.mcr_create_test_data"]], "The mcr_data_loader Module": [[53, "module-cms.mcr_data_loader"]], "The mcr_file Module": [[54, "module-cms.tools.mcr_file"]], "The mcr_fts2csv Module": [[55, "module-cms.tools.mcr_fts2csv"]], "The mcr_fts2db Module": [[56, "module-cms.tools.mcr_fts2db"]], "The mcr_registry Module": [[57, "module-cms.tools.mcr_registry"]], "The mcr_sas Module": [[58, "module-cms.tools.mcr_sas"]], "The mcr_sas2db Module": [[59, "module-cms.tools.mcr_sas2db"]], "The mcr_sas2yaml Module": [[60, "module-cms.tools.mcr_sas2yaml"]], "Medicaid.yaml": [[61, "medicaid-yaml"]], "Medicare.yaml": [[62, "medicare-yaml"]], "The medpar_converter Module": [[63, "module-cms.tools.medpar_converter"]], "Procedures": [[64, "procedures"]], "The random_selector Module": [[65, "module-cms.random_selector"]], "The registry Module": [[66, "module-cms.registry"], [151, "module-epa.registry"], [191, "module-gridmet.registry"]], "The table_population Module": [[67, "module-cms.table_population"]], "Table/View Initializer": [[68, "table-view-initializer"]], "Resource Loader": [[69, "resource-loader"], [157, "resource-loader"]], "Workflow to grant read (SELECT) privilege to all users in NSAPH admin role": [[70, "workflow-to-grant-read-select-privilege-to-all-users-in-nsaph-admin-role"]], "Utility to grant read (SELECT) privilege to all users in NSAPH admin role": [[71, "utility-to-grant-read-select-privilege-to-all-users-in-nsaph-admin-role"]], "Workflow to load Medicaid data from files": [[73, "workflow-to-load-medicaid-data-from-files"]], "Database initializer": [[74, "database-initializer"]], "Patient Summary Loader": [[75, "patient-summary-loader"]], "Loader for raw CMS Medicare data": [[76, "loader-for-raw-cms-medicare-data"]], "Materialized View Creator": [[77, "materialized-view-creator"], [78, "materialized-view-creator"]], "Full Medicaid Processing Pipeline": [[79, "full-medicaid-processing-pipeline"], [87, "full-medicaid-processing-pipeline"], [88, "full-medicaid-processing-pipeline"]], "Medicare data ingestion and processing pipeline": [[80, "medicare-data-ingestion-and-processing-pipeline"]], "Process Medicare inpatient admissions data inside the database": [[81, "process-medicare-inpatient-admissions-data-inside-the-database"]], "Medicare Beneficiaries data in-database processing pipeline": [[82, "medicare-beneficiaries-data-in-database-processing-pipeline"]], "Medicare raw data federation tool": [[83, "medicare-raw-data-federation-tool"]], "Creates helper tables for Medicare QC": [[84, "creates-helper-tables-for-medicare-qc"]], "FTS Parser": [[85, "fts-parser"]], "Generic Table (View/Materialized View) Initializer": [[86, "generic-table-view-materialized-view-initializer"], [216, "generic-table-view-materialized-view-initializer"]], "Python Core Platform Components": [[91, "python-core-platform-components"]], "Package nsaph": [[91, "package-nsaph"]], "Package nsaph.data_model": [[91, "package-nsaph-data-model"]], "Package nsaph.loader": [[91, "package-nsaph-loader"]], "Package nsaph.requests": [[91, "package-nsaph-requests"]], "Package nsaph.utils": [[91, "package-nsaph-utils"]], "NSAPH Data Loader": [[92, "nsaph-data-loader"]], "Usage": [[92, "usage"], [104, null]], "Data Modelling for NSAPH Data Platform": [[93, "data-modelling-for-nsaph-data-platform"]], "Introduction to data modelling for NSAPH Data Platform": [[93, "introduction-to-data-modelling-for-nsaph-data-platform"]], "Domain": [[93, "domain"]], "Table": [[93, "table"]], "Create statement": [[93, "create-statement"]], "Invalid Record": [[93, "invalid-record"]], "Column": [[93, "column"]], "Source": [[93, "source"]], "Generated columns": [[93, "generated-columns"]], "Computed columns": [[93, "computed-columns"]], "File columns": [[93, "file-columns"]], "Record columns": [[93, "record-columns"]], "Transposing columns": [[93, "transposing-columns"]], "Multi-column indices": [[93, "multi-column-indices"]], "Generation of the database schema (DDL)": [[93, "generation-of-the-database-schema-ddl"]], "Indexing policies": [[93, "indexing-policies"]], "Linking with nomenclature": [[93, "linking-with-nomenclature"]], "US States": [[93, "us-states"]], "Ingesting data": [[93, "ingesting-data"]], "Project (Directory) Loading Utility": [[94, "project-directory-loading-utility"]], "Overview": [[94, "overview"]], "Configuration options": [[94, "configuration-options"]], "Usage from command line": [[94, "usage-from-command-line"]], "Sample command": [[94, "sample-command"]], "Dry runs (introspect only)": [[94, "dry-runs-introspect-only"]], "API Usage": [[94, "api-usage"]], "SQL Documentation": [[95, "sql-documentation"]], "How to query the database": [[96, "how-to-query-the-database"]], "Setup": [[96, "setup"]], "Create Python Virtual Environment": [[96, "create-python-virtual-environment"]], "Creating Conda environment": [[96, "creating-conda-environment"]], "Install NSAPH packages": [[96, "install-nsaph-packages"]], "Create connection definition file": [[96, "create-connection-definition-file"]], "Executing the query": [[96, "executing-the-query"]], "Using EXPLAIN to optimize queries": [[96, "using-explain-to-optimize-queries"]], "Mapping between different territorial codes": [[97, "mapping-between-different-territorial-codes"]], "Code systems": [[97, "code-systems"]], "Mapping sources": [[97, "mapping-sources"]], "Python and SQL Code": [[97, "python-and-sql-code"]], "Tables and Functions": [[97, "tables-and-functions"]], "Tables": [[97, "tables"]], "Preliminary Considerations for Handling User Requests": [[98, "preliminary-considerations-for-handling-user-requests"]], "Structure": [[98, "structure"]], "NSAPH Core Data Platform": [[99, "nsaph-core-data-platform"]], "Tool Examples": [[99, "tool-examples"]], "Software Sources": [[99, "software-sources"]], "Python packages": [[99, "python-packages"]], "NSAPH Package": [[99, "nsaph-package"]], "Subpackage for Data Modelling": [[99, "subpackage-for-data-modelling"]], "Module Database Connection Wrapper": [[99, "module-database-connection-wrapper"]], "Loader Subpackage": [[99, "loader-subpackage"]], "Subpackage to describe and implement user requests [Incomplete]": [[99, "subpackage-to-describe-and-implement-user-requests-incomplete"]], "Subpackage with miscellaneous utilities": [[99, "subpackage-with-miscellaneous-utilities"]], "YAML files": [[99, "yaml-files"]], "Resources": [[99, "resources"]], "SQL Utilities": [[99, "sql-utilities"]], "The adi Module": [[100, "module-nsaph.adi"]], "The common Module": [[101, "module-nsaph.loader.common"]], "The create Module": [[102, "module-nsaph.create"]], "The cwl_collect_outputs Module": [[103, "module-nsaph.util.cwl_collect_outputs"]], "The data_loader Module": [[104, "the-data-loader-module"]], "API": [[104, "module-nsaph.loader.data_loader"]], "Configuration": [[104, "module-nsaph.loader.common"]], "Models Specification": [[104, null]], "Database connection API": [[105, "database-connection-api"]], "The Domain Class": [[106, "module-nsaph.data_model.domain"]], "Example request": [[107, "example-request"]], "The executors Module": [[108, "module-nsaph.util.executors"]], "The fips Module": [[109, "module-nsaph.fips"]], "The hdf5_export Module": [[110, "module-nsaph.requests.hdf5_export"]], "DDL for HUD ZIP to FIPS mappings": [[111, "ddl-for-hud-zip-to-fips-mappings"]], "The index_builder Module": [[112, "module-nsaph.loader.index_builder"]], "The init_core_db Module": [[113, "module-nsaph.util.init_core_db"]], "The inserter Module": [[114, "module-nsaph.data_model.inserter"]], "The introspector Module": [[115, "module-nsaph.loader.introspector"]], "The link_gis Module": [[116, "module-nsaph.link_gis"]], "Data loader base abstract API": [[117, "module-nsaph.loader"]], "The loader_config Module": [[118, "module-nsaph.loader.loader_config"]], "Set of SQL statements to map tables from another database": [[119, "set-of-sql-statements-to-map-tables-from-another-database"]], "The model Module": [[120, "module-nsaph.data_model.model"]], "The monitor Module": [[121, "module-nsaph.loader.monitor"]], "The net Module": [[122, "module-nsaph.util.net"]], "NSAPH Core Package-wide utilities": [[123, "module-nsaph"]], "The pg_json_dump Module": [[124, "module-nsaph.util.pg_json_dump"]], "The pg_keywords Module": [[125, "module-nsaph.pg_keywords"]], "The project_loader Module": [[126, "module-nsaph.loader.project_loader"]], "The psql Module": [[127, "module-nsaph.util.psql"]], "A procedure to rename indices": [[129, "a-procedure-to-rename-indices"]], "The resources Module": [[130, "module-nsaph.util.resources"]], "Sample query": [[131, "sample-query"]], "The sas_explorer Module": [[132, "module-nsaph.util.sas_explorer"]], "The shapes Module": [[133, "module-nsaph.util.shapes"], [192, "module-gridmet.shapes"]], "The ssa2fips Module": [[134, "module-nsaph.util.ssa2fips"]], "Utility functions": [[136, "utility-functions"]], "The vacuum Module": [[137, "module-nsaph.loader.vacuum"]], "The zip2fips Module": [[138, "module-nsaph.util.zip2fips"]], "SQL to create direct ZIP => FIPS lookup table and helper functions": [[139, "sql-to-create-direct-zip-fips-lookup-table-and-helper-functions"]], "CWL Tools and Common Workflows": [[140, "cwl-tools-and-common-workflows"]], "NSAPH EPA Package Description": [[141, "nsaph-epa-package-description"]], "Package Contents": [[141, "package-contents"]], "Querying Data": [[141, "querying-data"]], "AirNow": [[141, "airnow"]], "Columns": [[141, "columns"]], "Sample AirNow query by date": [[141, "sample-airnow-query-by-date"]], "Sample AirNow query, aggregating monthly": [[141, "sample-airnow-query-aggregating-monthly"]], "Sample AirNow query, aggregating by State": [[141, "sample-airnow-query-aggregating-by-state"]], "AQS": [[141, "aqs"]], "Annual Columns": [[141, "annual-columns"]], "Daily columns": [[141, "daily-columns"]], "Main Class for EPA AirNow Package": [[142, "module-epa.airnow"]], "Downloader for AirNow": [[143, "module-epa.airnow_downloader"]], "Configuration Options for EPA AirNow Package": [[144, "module-epa.airnow_ds_def"]], "Classes used Internally": [[144, "classes-used-internally"], [148, "classes-used-internally"], [180, "classes-used-internally"]], "Abstract Context": [[144, "abstract-context"], [148, "abstract-context"], [180, "abstract-context"]], "Argument": [[144, "argument"], [148, "argument"], [180, "argument"]], "The airnow_setup Module": [[145, "module-epa.airnow_setup"]], "The airnow_shapes Module": [[146, "module-epa.airnow_shapes"]], "Main Class for EPA AQS Package": [[147, "module-epa.aqs"]], "Configuration Options for EPA AQS Package": [[148, "module-epa.aqs_ds_def"]], "Argument Cardinality Enum": [[148, "argument-cardinality-enum"], [180, "argument-cardinality-enum"]], "The aqs_expand Module": [[149, "module-epa.aqs_expand"]], "Internal scripts used for download tasks": [[150, "module-epa.aqs_tools"]], "Full EPA AirNow Processing Pipeline (including downloading shapefiles)": [[152, "full-epa-airnow-processing-pipeline-including-downloading-shapefiles"]], "Full AirNowProcessing Pipeline (with shapefiles on local file system)": [[153, "full-airnowprocessing-pipeline-with-shapefiles-on-local-file-system"]], "Full EPA AQS Processing Pipeline": [[154, "full-epa-aqs-processing-pipeline"]], "Downloader of AirNow Data": [[155, "downloader-of-airnow-data"], [198, "downloader-of-airnow-data"]], "Downloader of AQS Data": [[156, "downloader-of-aqs-data"], [158, "downloader-of-aqs-data"]], "Tool retrieving county or zip shapefiles from Census website": [[159, "tool-retrieving-county-or-zip-shapefiles-from-census-website"]], "Uploader of the EPA Data to the database": [[161, "uploader-of-the-epa-data-to-the-database"]], "Introspector for downloaded data file": [[162, "introspector-for-downloaded-data-file"]], "Sample arguments to AirNow pipeline": [[163, "sample-arguments-to-airnow-pipeline"]], "Sample arguments to AQS pipeline": [[164, "sample-arguments-to-aqs-pipeline"]], "For annual NO2 (nitrogen) data": [[164, "for-annual-no2-nitrogen-data"]], "For daily PM25 (small particles) data": [[164, "for-daily-pm25-small-particles-data"]], "Prepare environment for AirNow": [[165, "prepare-environment-for-airnow"]], "Python Components": [[167, "python-components"]], "EPA Toolkit Usage": [[168, "epa-toolkit-usage"]], "AQS Usage": [[168, "aqs-usage"]], "AirNow Usage": [[168, "airnow-usage"]], "NSAPH GIS python package": [[169, "nsaph-gis-python-package"]], "GIS Library Overview": [[169, "gis-library-overview"]], "Installation": [[169, "installation"], [232, "installation"]], "GIS Annotator": [[170, "module-nsaph_gis.annotator"]], "Observation values aggregation over shapes": [[171, "module-nsaph_gis.compute_shape"]], "GIS Related Enums": [[172, "module-nsaph_gis.constants"]], "Shapefiles downloader": [[173, "module-nsaph_gis.downloader"]], "A point in a raster class": [[174, "module-nsaph_gis.geometry"]], "GIS Python Modules": [[175, "gis-python-modules"]], "Bands (Gridmet Variables)": [[176, "bands-gridmet-variables"]], "Main Classes": [[177, "main-classes"]], "Contents:": [[177, null], [178, null]], "Parameters (Enums)": [[178, "parameters-enums"]], "Types of Geography": [[179, "types-of-geography"]], "Configuration Object": [[180, "configuration-object"]], "Task Object": [[181, "task-object"]], "Subtasks": [[181, "subtasks"]], "Downloading": [[181, "downloading"]], "Compute": [[181, "compute"]], "Tools and Utilities": [[182, "tools-and-utilities"]], "Gridmet Computational Utilities": [[183, "gridmet-computational-utilities"]], "What is gridMET?": [[183, "what-is-gridmet"]], "Using command line gridMET utility": [[183, "using-command-line-gridmet-utility"]], "Example": [[183, "example"]], "Python modules": [[183, "python-modules"]], "CWL pipelines and tools": [[183, "cwl-pipelines-and-tools"]], "The aggregator Module": [[184, "module-pollution.aggregator"]], "The config Module": [[185, "module-gridmet.config"]], "The csv2hdf5 Module": [[186, "the-csv2hdf5-module"]], "The exclude_csv Module": [[187, "the-exclude-csv-module"]], "The geop Module": [[188, "the-geop-module"]], "The gridmet_tools Module": [[189, "module-gridmet.gridmet_tools"]], "The launcher Module": [[190, "module-gridmet.launcher"]], "The task Module": [[193, "module-gridmet.task"]], "The test Module": [[194, "the-test-module"]], "The wustl_file_processor Module": [[195, "module-pollution.wustl_file_processor"]], "Downloader of gridMET Data": [[197, "downloader-of-gridmet-data"], [213, "downloader-of-gridmet-data"]], "gridMET Pipeline": [[199, "gridmet-pipeline"], [202, "gridmet-pipeline"], [204, "gridmet-pipeline"], [207, "gridmet-pipeline"], [209, "gridmet-pipeline"]], "Sub-workflow init_tables from gridmet.cwl": [[200, "sub-workflow-init-tables-from-gridmet-cwl"]], "Sub-workflow process from gridmet.cwl": [[201, "sub-workflow-process-from-gridmet-cwl"]], "Sub-workflow process from gridmet_dwnl_only.cwl": [[203, "sub-workflow-process-from-gridmet-dwnl-only-cwl"]], "Sub-workflow init_tables from gridmet_humidity.cwl": [[205, "sub-workflow-init-tables-from-gridmet-humidity-cwl"]], "Sub-workflow process from gridmet_humidity.cwl": [[206, "sub-workflow-process-from-gridmet-humidity-cwl"]], "Sub-workflow process from gridmet_incremental.cwl": [[208, "sub-workflow-process-from-gridmet-incremental-cwl"]], "Sub-workflow process from gridmet_local_shapes.cwl": [[210, "sub-workflow-process-from-gridmet-local-shapes-cwl"]], "File rearranger": [[214, "file-rearranger"]], "Model YAML Writer": [[215, "model-yaml-writer"]], "Pipeline to ingest Pollution downloaded from WashU Box": [[218, "pipeline-to-ingest-pollution-downloaded-from-washu-box"]], "Aggregates data in NetCDF file over given geographies": [[219, "aggregates-data-in-netcdf-file-over-given-geographies"]], "Workflow to aggregate and ingest one file in NetCDF format": [[220, "workflow-to-aggregate-and-ingest-one-file-in-netcdf-format"]], "Workflow to aggregate and ingest NetCDF files for one year": [[221, "workflow-to-aggregate-and-ingest-netcdf-files-for-one-year"]], "gridMET Python Modules": [[222, "gridmet-python-modules"]], "gridMET Python components": [[222, null]], "All gridMET Python modules": [[222, null]], "Types of Shape": [[223, "types-of-shape"]], "Rasterization Strategy": [[224, "rasterization-strategy"]], "Configuration Guide": [[225, "configuration-guide"]], "What can be configured": [[225, "what-can-be-configured"]], "Selecting base configuration.": [[225, "selecting-base-configuration"]], "Controlling Conda environments": [[225, "controlling-conda-environments"]], "Setting Conda environment used during workflow executions": [[225, "setting-conda-environment-used-during-workflow-executions"]], "Managing multiple Conda environments": [[225, "managing-multiple-conda-environments"]], "Configuring installation of third-party requirements": [[225, "configuring-installation-of-third-party-requirements"]], "Python requirements": [[225, "python-requirements"]], "R libraries": [[225, "r-libraries"]], "Configuring user projects": [[225, "configuring-user-projects"]], "Python Projects": [[225, "python-projects"]], "Enforcing order for installation of user Python Projects": [[225, "enforcing-order-for-installation-of-user-python-projects"]], "R Projects": [[225, "r-projects"]], "Configure Git submodules": [[225, "configure-git-submodules"]], "Overriding BASE_URL": [[225, "overriding-base-url"]], "Airflow admin username and password": [[225, "airflow-admin-username-and-password"]], "Configurations related to PostgreSQL": [[225, "configurations-related-to-postgresql"]], "When you need to change defaults": [[225, "when-you-need-to-change-defaults"]], "Configuring PostgreSQL Server": [[225, "configuring-postgresql-server"]], "Create database and user for Airflow": [[225, "create-database-and-user-for-airflow"]], "Configure PostgreSQL to authenticate Airflow user": [[225, "configure-postgresql-to-authenticate-airflow-user"]], "Tell Airflow how to authenticate with PostgreSQL": [[225, "tell-airflow-how-to-authenticate-with-postgresql"]], "Authentication": [[225, "authentication"]], "Networking": [[225, "networking"]], "Note for Mac": [[225, "note-for-mac"]], "Overriding default parameters": [[225, "overriding-default-parameters"]], "Full list of available environment variables": [[225, "full-list-of-available-environment-variables"]], "Example of .env file. Ready to run containers": [[225, "example-of-env-file-ready-to-run-containers"]], "Airflow/CWL Glossary and FAQ": [[226, "airflow-cwl-glossary-and-faq"]], "What is CWL?": [[226, "what-is-cwl"]], "What is Airflow": [[226, "what-is-airflow"]], "What is CWL-Airflow": [[226, "what-is-cwl-airflow"]], "What is Docker": [[226, "what-is-docker"]], "What is Docker-compose": [[226, "what-is-docker-compose"]], "What is Conda": [[226, "what-is-conda"]], "What is PostgreSQL": [[226, "what-is-postgresql"]], "CWL-Airflow Deployment Guide": [[227, "cwl-airflow-deployment-guide"]], "What is in": [[227, "what-is-in"]], "Howto": [[228, "howto"]], "Deployment Steps": [[228, "deployment-steps"]], "Building Containers": [[228, "building-containers"]], "Docker build command": [[228, "docker-build-command"]], "Rebuilding the Containers": [[228, "rebuilding-the-containers"]], "When building goes wrong": [[228, "when-building-goes-wrong"]], "Copying DAGs to Airflow folder": [[228, "copying-dags-to-airflow-folder"]], "Local development": [[228, "local-development"]], "Introduction to Deployment of NSAPH Data Platform": [[229, "introduction-to-deployment-of-nsaph-data-platform"]], "Testing the installation": [[230, "testing-the-installation"]], "Included examples": [[230, "included-examples"]], "Testing command line mode": [[230, "testing-command-line-mode"]], "Test 1: basic CWL (Hello World)": [[230, "test-1-basic-cwl-hello-world"]], "Test 2: CWL, using python project": [[230, "test-2-cwl-using-python-project"]], "Test 3: CWL, using R script": [[230, "test-3-cwl-using-r-script"]], "Alternative way to test command line": [[230, "alternative-way-to-test-command-line"]], "Testing Airflow User Interface": [[230, "testing-airflow-user-interface"]], "Preparation": [[230, "preparation"]], "UI Test 1: basic CWL (Hello World)": [[230, "ui-test-1-basic-cwl-hello-world"]], "UI Test 2: CWL, using python project": [[230, "ui-test-2-cwl-using-python-project"]], "UI Test 3: CWL, using R script": [[230, "ui-test-3-cwl-using-r-script"]], "Some useful commands": [[231, "some-useful-commands"]], "To view logs of the running containers": [[231, "to-view-logs-of-the-running-containers"]], "To attach to the started container (bash)": [[231, "to-attach-to-the-started-container-bash"]], "Attach to a container when it does not start": [[231, "attach-to-a-container-when-it-does-not-start"]], "To stop all your containers": [[231, "to-stop-all-your-containers"]], "To delete all images and containers": [[231, "to-delete-all-images-and-containers"]], "To delete PostgreSQL volumes": [[231, "to-delete-postgresql-volumes"]], "Upgrade Airflow Database": [[231, "upgrade-airflow-database"]], "Create Airflow user": [[231, "create-airflow-user"]], "NSAPH Data Platform Deployment": [[232, "nsaph-data-platform-deployment"]], "Prerequisites": [[232, "prerequisites"]], "Quick Start Deployment": [[232, "quick-start-deployment"]], "Testing": [[232, "testing"]], "Updating project packages": [[232, "updating-project-packages"]], "What are project packages?": [[232, "what-are-project-packages"]], "Option 1: Rebuild all docker containers": [[232, "option-1-rebuild-all-docker-containers"]], "Option 2: Install updates inside docker containers": [[232, "option-2-install-updates-inside-docker-containers"]], "Option 3: Map packages from host": [[232, "option-3-map-packages-from-host"]], "Default Conda config": [[233, "default-conda-config"]], "Docker-compose file with Python Package mapping": [[234, "docker-compose-file-with-python-package-mapping"]], "Docker-compose file": [[235, "docker-compose-file"]], "Environment example with conda and existing PostgreSQL": [[236, "environment-example-with-conda-and-existing-postgresql"]], "Environment example without conda and with existing PostgreSQL": [[237, "environment-example-without-conda-and-with-existing-postgresql"]], "Environment example with conda and with new container with PostgreSQL": [[238, "environment-example-with-conda-and-with-new-container-with-postgresql"]], "Environment example without conda and with new container with PostgreSQL": [[239, "environment-example-without-conda-and-with-new-container-with-postgresql"]], "Install Conda script": [[240, "install-conda-script"]], "Install projects script": [[241, "install-projects-script"]], "R packages": [[242, "r-packages"]], "Script to rebuild docker containers with latest Python packages": [[243, "script-to-rebuild-docker-containers-with-latest-python-packages"]], "Script to refresh Python packages in the running docker containers": [[244, "script-to-refresh-python-packages-in-the-running-docker-containers"]], "List of Python requirements": [[245, "list-of-python-requirements"]], "NSAPH Utils python package": [[246, "nsaph-utils-python-package"]], "Overview of Utilities": [[246, "overview-of-utilities"]], "Current Development": [[246, "current-development"]], "TODO": [[246, "todo"]], "The DataSet Module": [[247, "module-nsaph_utils.DataSet"]], "The collector Module": [[249, "module-nsaph_utils.docutils.collector"]], "The conf Module": [[250, "the-conf-module"]], "The context Module": [[251, "module-nsaph_utils.utils.context"]], "The copy_section Module": [[252, "module-nsaph_utils.docutils.copy_section"]], "The cwl2md Module": [[253, "module-nsaph_utils.docutils.cwl2md"]], "The fwf Module": [[254, "module-nsaph_utils.utils.fwf"]], "The interface Module": [[255, "module-nsaph_utils.interpolation.interface"]], "The interpolate_ma Module": [[256, "module-nsaph_utils.interpolation.interpolate_ma"]], "The io_utils Module": [[257, "module-nsaph_utils.utils.io_utils"]], "The md_creator Module": [[258, "module-nsaph_utils.docutils.md_creator"]], "The pyfst Module": [[259, "module-nsaph_utils.utils.pyfst"]], "The setup Module": [[260, "the-setup-module"]], "The test_cli_context Module": [[261, "module-tests.test_cli_context"]], "The test_interpolation Module": [[262, "module-tests.test_interpolation"]], "The test_qc Module": [[263, "module-tests.test_qc"]], "The tester Module": [[264, "module-nsaph_utils.qc.tester"]], "Indices": [[265, "indices"]], "Data Domains": [[266, "data-domains"]], "Data Domains (Subject areas)": [[266, null]], "File Transfer Summary": [[267, "file-transfer-summary"]], "Terms and acronyms used in this documentation": [[268, "terms-and-acronyms-used-in-this-documentation"]], "Data Platform Internals": [[269, "data-platform-internals"], [269, null]], "NSAPH Data Platform: Documentation Home": [[270, "nsaph-data-platform-documentation-home"]], "Introduction to Data Platform": [[270, "introduction-to-data-platform"]], "What is Data Platform?": [[270, "what-is-data-platform"]], "Using the Database": [[270, "using-the-database"]], "Terms and Acronyms": [[270, "terms-and-acronyms"]], "Deploying the Platform": [[270, "deploying-the-platform"]], "Building Platform documentation": [[270, "building-platform-documentation"]], "Repositories Overview": [[270, "repositories-overview"]], "Deployment": [[270, "deployment"]], "General Packages": [[270, "general-packages"]], "NSAPH Utilities": [[270, "nsaph-utilities"]], "Core Platform": [[270, "core-platform"]], "GIS Utilities": [[270, "gis-utilities"]], "Data Ingestion and Processing Packages and Pipelines": [[270, "data-ingestion-and-processing-packages-and-pipelines"]], "NSAPH Data Platform": [[271, "nsaph-data-platform"]], "Contents": [[271, null], [272, null]], "Python Packages Included in the Platform": [[272, "python-packages-included-in-the-platform"]], "Data Processing Pipelines": [[273, "data-processing-pipelines"], [273, null]], "Why Data Platform and what does it do?": [[274, "why-data-platform-and-what-does-it-do"]], "Why we need a Data Platform": [[274, "why-we-need-a-data-platform"]], "Architecture": [[274, "architecture"]], "Supported Programming Languages and Tools": [[274, "supported-programming-languages-and-tools"]], "Development Mode": [[274, "development-mode"]], "Where it can be deployed": [[274, "where-it-can-be-deployed"]]}, "indexentries": {"acs": [[9, "term-acs"]], "acs1": [[9, "term-acs1"]], "acs5": [[9, "term-acs5"]], "dec": [[9, "term-dec"]], "pums": [[9, "term-pums"]], "sf1": [[9, "term-sf1"]], "sf3": [[9, "term-sf3"]], "zcta": [[9, "term-zcta"]], "dataplan (class in census.assemble_data)": [[11, "census.assemble_data.DataPlan"], [23, "census.assemble_data.DataPlan"]], "variabledef (class in census.assemble_data)": [[11, "census.assemble_data.VariableDef"], [23, "census.assemble_data.VariableDef"]], "add_geoid() (dataplan method)": [[11, "census.assemble_data.DataPlan.add_geoid"], [23, "census.assemble_data.DataPlan.add_geoid"]], "adjust_geo_fields() (dataplan method)": [[11, "census.assemble_data.DataPlan.adjust_geo_fields"], [23, "census.assemble_data.DataPlan.adjust_geo_fields"]], "assemble_data() (dataplan method)": [[11, "census.assemble_data.DataPlan.assemble_data"], [23, "census.assemble_data.DataPlan.assemble_data"]], "calculate_densities() (dataplan method)": [[11, "census.assemble_data.DataPlan.calculate_densities"], [23, "census.assemble_data.DataPlan.calculate_densities"]], "calculate_var() (variabledef method)": [[11, "census.assemble_data.VariableDef.calculate_var"], [23, "census.assemble_data.VariableDef.calculate_var"]], "census.assemble_data": [[11, "module-census.assemble_data"], [23, "module-census.assemble_data"]], "create_missingness() (dataplan method)": [[11, "census.assemble_data.DataPlan.create_missingness"], [23, "census.assemble_data.DataPlan.create_missingness"]], "do_query() (variabledef method)": [[11, "census.assemble_data.VariableDef.do_query"], [23, "census.assemble_data.VariableDef.do_query"]], "get_var_names() (dataplan method)": [[11, "census.assemble_data.DataPlan.get_var_names"], [23, "census.assemble_data.DataPlan.get_var_names"]], "get_vars() (variabledef method)": [[11, "census.assemble_data.VariableDef.get_vars"], [23, "census.assemble_data.VariableDef.get_vars"]], "interpolate() (dataplan method)": [[11, "census.assemble_data.DataPlan.interpolate"], [23, "census.assemble_data.DataPlan.interpolate"]], "module": [[11, "module-census.assemble_data"], [12, "module-census.calculate_density"], [13, "module-census.census_info"], [14, "module-census.cli"], [15, "module-census.do_qc"], [16, "module-census.exceptions"], [17, "module-census.interpolate_data"], [18, "module-census.data.load_data"], [19, "module-census.query"], [20, "module-census.tigerweb"], [21, "module-census.utils"], [22, "module-census.write_data"], [23, "module-census.assemble_data"], [23, "module-census.census_info"], [23, "module-census.cli"], [23, "module-census.data.load_data"], [23, "module-census.exceptions"], [23, "module-census.query"], [23, "module-census.tigerweb"], [23, "module-census.utils"], [45, "module-cms.aggregates"], [46, "module-cms.create_schema_config"], [47, "module-cms.duplicates"], [50, "module-cms.init_cms_db"], [51, "module-cms.tools.mcr_combine_tables"], [52, "module-cms.tools.mcr_create_test_data"], [53, "module-cms.mcr_data_loader"], [54, "module-cms.tools.mcr_file"], [55, "module-cms.tools.mcr_fts2csv"], [56, "module-cms.tools.mcr_fts2db"], [57, "module-cms.tools.mcr_registry"], [58, "module-cms.tools.mcr_sas"], [59, "module-cms.tools.mcr_sas2db"], [60, "module-cms.tools.mcr_sas2yaml"], [63, "module-cms.tools.medpar_converter"], [65, "module-cms.random_selector"], [66, "module-cms.registry"], [67, "module-cms.table_population"], [100, "module-nsaph.adi"], [101, "module-nsaph.loader.common"], [102, "module-nsaph.create"], [103, "module-nsaph.util.cwl_collect_outputs"], [104, "module-nsaph.loader.common"], [104, "module-nsaph.loader.data_loader"], [104, "module-nsaph.loader.loader_config"], [105, "module-nsaph.db"], [106, "module-nsaph.data_model.domain"], [108, "module-nsaph.util.executors"], [109, "module-nsaph.fips"], [110, "module-nsaph.requests.hdf5_export"], [112, "module-nsaph.loader.index_builder"], [113, "module-nsaph.util.init_core_db"], [114, "module-nsaph.data_model.inserter"], [115, "module-nsaph.loader.introspector"], [116, "module-nsaph.link_gis"], [117, "module-nsaph.loader"], [118, "module-nsaph.loader.loader_config"], [120, "module-nsaph.data_model.model"], [121, "module-nsaph.loader.monitor"], [122, "module-nsaph.util.net"], [123, "module-nsaph"], [124, "module-nsaph.util.pg_json_dump"], [125, "module-nsaph.pg_keywords"], [126, "module-nsaph.loader.project_loader"], [127, "module-nsaph.util.psql"], [128, "module-nsaph.requests.query"], [130, "module-nsaph.util.resources"], [132, "module-nsaph.util.sas_explorer"], [133, "module-nsaph.util.shapes"], [134, "module-nsaph.util.ssa2fips"], [135, "module-nsaph.data_model.utils"], [137, "module-nsaph.loader.vacuum"], [138, "module-nsaph.util.zip2fips"], [142, "module-epa.airnow"], [143, "module-epa.airnow_downloader"], [144, "module-epa.airnow_ds_def"], [145, "module-epa.airnow_setup"], [146, "module-epa.airnow_shapes"], [147, "module-epa.aqs"], [148, "module-epa.aqs_ds_def"], [149, "module-epa.aqs_expand"], [150, "module-epa.aqs_tools"], [150, "module-nsaph_utils.utils.io_utils"], [151, "module-epa.registry"], [170, "module-nsaph_gis.annotator"], [171, "module-nsaph_gis.compute_shape"], [172, "module-nsaph_gis.constants"], [173, "module-nsaph_gis.downloader"], [174, "module-nsaph_gis.geometry"], [182, "module-gridmet.gridmet_tools"], [184, "module-pollution.aggregator"], [185, "module-gridmet.config"], [189, "module-gridmet.gridmet_tools"], [190, "module-gridmet.launcher"], [191, "module-gridmet.registry"], [192, "module-gridmet.shapes"], [193, "module-gridmet.task"], [195, "module-pollution.wustl_file_processor"], [247, "module-nsaph_utils.DataSet"], [248, "module-nsaph_utils.utils.cli"], [249, "module-nsaph_utils.docutils.collector"], [251, "module-nsaph_utils.utils.context"], [252, "module-nsaph_utils.docutils.copy_section"], [253, "module-nsaph_utils.docutils.cwl2md"], [254, "module-nsaph_utils.utils.fwf"], [255, "module-nsaph_utils.interpolation.interface"], [256, "module-nsaph_utils.interpolation.interpolate_ma"], [257, "module-nsaph_utils.utils.io_utils"], [258, "module-nsaph_utils.docutils.md_creator"], [259, "module-nsaph_utils.utils.pyfst"], [261, "module-tests.test_cli_context"], [262, "module-tests.test_interpolation"], [263, "module-tests.test_qc"], [264, "module-nsaph_utils.qc.tester"]], "quality_check() (dataplan method)": [[11, "census.assemble_data.DataPlan.quality_check"], [23, "census.assemble_data.DataPlan.quality_check"]], "supported_out_formats (dataplan attribute)": [[11, "census.assemble_data.DataPlan.supported_out_formats"]], "write_data() (dataplan method)": [[11, "census.assemble_data.DataPlan.write_data"], [23, "census.assemble_data.DataPlan.write_data"]], "write_schema() (dataplan method)": [[11, "census.assemble_data.DataPlan.write_schema"], [23, "census.assemble_data.DataPlan.write_schema"]], "censusdensitycontext (class in census.calculate_density)": [[12, "census.calculate_density.CensusDensityContext"]], "census.calculate_density": [[12, "module-census.calculate_density"]], "initialize_logging() (in module census.calculate_density)": [[12, "census.calculate_density.initialize_logging"]], "census.census_info": [[13, "module-census.census_info"], [23, "module-census.census_info"]], "census_years() (in module census.census_info)": [[13, "census.census_info.census_years"], [23, "census.census_info.census_years"]], "get_endpoint() (in module census.census_info)": [[13, "census.census_info.get_endpoint"], [23, "census.census_info.get_endpoint"]], "get_varlist() (in module census.census_info)": [[13, "census.census_info.get_varlist"], [23, "census.census_info.get_varlist"]], "set_api_key() (in module census.census_info)": [[13, "census.census_info.set_api_key"], [23, "census.census_info.set_api_key"]], "censuscontext (class in census.cli)": [[14, "census.cli.CensusContext"], [23, "census.cli.CensusContext"]], "census.cli": [[14, "module-census.cli"], [23, "module-census.cli"]], "census_cli() (in module census.cli)": [[14, "census.cli.census_cli"]], "validate() (censuscontext method)": [[14, "census.cli.CensusContext.validate"], [23, "census.cli.CensusContext.validate"]], "censusqccontext (class in census.do_qc)": [[15, "census.do_qc.CensusQCContext"]], "census.do_qc": [[15, "module-census.do_qc"]], "initialize_logging() (in module census.do_qc)": [[15, "census.do_qc.initialize_logging"]], "censusexception": [[16, "census.exceptions.CensusException"], [23, "census.exceptions.CensusException"]], "census.exceptions": [[16, "module-census.exceptions"], [23, "module-census.exceptions"]], "censusinterpolatecontext (class in census.interpolate_data)": [[17, "census.interpolate_data.CensusInterpolateContext"]], "census.interpolate_data": [[17, "module-census.interpolate_data"]], "initialize_logging() (in module census.interpolate_data)": [[17, "census.interpolate_data.initialize_logging"]], "validate() (censusinterpolatecontext method)": [[17, "census.interpolate_data.CensusInterpolateContext.validate"]], "census.data.load_data": [[18, "module-census.data.load_data"], [23, "module-census.data.load_data"]], "load_county_codes() (in module census.data.load_data)": [[18, "census.data.load_data.load_county_codes"], [23, "census.data.load_data.load_county_codes"]], "load_state_codes() (in module census.data.load_data)": [[18, "census.data.load_data.load_state_codes"], [23, "census.data.load_data.load_state_codes"]], "api_geography() (in module census.query)": [[19, "census.query.api_geography"], [23, "census.query.api_geography"]], "census.query": [[19, "module-census.query"], [23, "module-census.query"]], "get_census_data() (in module census.query)": [[19, "census.query.get_census_data"], [23, "census.query.get_census_data"]], "census.tigerweb": [[20, "module-census.tigerweb"], [23, "module-census.tigerweb"]], "download_geometry() (in module census.tigerweb)": [[20, "census.tigerweb.download_geometry"], [23, "census.tigerweb.download_geometry"]], "get_area() (in module census.tigerweb)": [[20, "census.tigerweb.get_area"], [23, "census.tigerweb.get_area"]], "census.utils": [[21, "module-census.utils"], [23, "module-census.utils"]], "show_api_keys() (in module census.utils)": [[21, "census.utils.show_api_keys"], [23, "census.utils.show_api_keys"]], "censuswritecontext (class in census.write_data)": [[22, "census.write_data.CensusWriteContext"]], "census.write_data": [[22, "module-census.write_data"]], "initialize_logging() (in module census.write_data)": [[22, "census.write_data.initialize_logging"]], "aggregator (class in cms.aggregates)": [[45, "cms.aggregates.Aggregator"]], "expecteddata (class in cms.aggregates)": [[45, "cms.aggregates.ExpectedData"]], "query (aggregator attribute)": [[45, "cms.aggregates.Aggregator.QUERY"]], "cms.aggregates": [[45, "module-cms.aggregates"]], "count() (aggregator method)": [[45, "cms.aggregates.Aggregator.count"]], "verify() (aggregator method)": [[45, "cms.aggregates.Aggregator.verify"]], "cmsschema (class in cms.create_schema_config)": [[46, "cms.create_schema_config.CMSSchema"]], "cms.create_schema_config": [[46, "module-cms.create_schema_config"]], "input (cmsschema attribute)": [[46, "cms.create_schema_config.CMSSchema.input"]], "output (cmsschema attribute)": [[46, "cms.create_schema_config.CMSSchema.output"]], "reset (cmsschema attribute)": [[46, "cms.create_schema_config.CMSSchema.reset"]], "type (cmsschema attribute)": [[46, "cms.create_schema_config.CMSSchema.type"]], "duplicatesexplorer (class in cms.duplicates)": [[47, "cms.duplicates.DuplicatesExplorer"]], "analyze_inconsistent_age() (duplicatesexplorer method)": [[47, "cms.duplicates.DuplicatesExplorer.analyze_inconsistent_age"]], "args() (in module cms.duplicates)": [[47, "cms.duplicates.args"]], "cms.duplicates": [[47, "module-cms.duplicates"]], "explore_all() (duplicatesexplorer method)": [[47, "cms.duplicates.DuplicatesExplorer.explore_all"]], "explore_one() (duplicatesexplorer method)": [[47, "cms.duplicates.DuplicatesExplorer.explore_one"]], "find_duplicate_dates() (duplicatesexplorer method)": [[47, "cms.duplicates.DuplicatesExplorer.find_duplicate_dates"]], "init() (duplicatesexplorer method)": [[47, "cms.duplicates.DuplicatesExplorer.init"]], "is_loaded() (duplicatesexplorer method)": [[47, "cms.duplicates.DuplicatesExplorer.is_loaded"]], "load() (duplicatesexplorer method)": [[47, "cms.duplicates.DuplicatesExplorer.load"]], "report() (duplicatesexplorer method)": [[47, "cms.duplicates.DuplicatesExplorer.report"]], "run() (in module cms.duplicates)": [[47, "cms.duplicates.run"]], "save() (duplicatesexplorer method)": [[47, "cms.duplicates.DuplicatesExplorer.save"]], "aliascolumn (class in cms.fts2yaml)": [[48, "cms.fts2yaml.AliasColumn"]], "columnattribute (class in cms.fts2yaml)": [[48, "cms.fts2yaml.ColumnAttribute"]], "columnreader (class in cms.fts2yaml)": [[48, "cms.fts2yaml.ColumnReader"]], "ftscolumn (class in cms.fts2yaml)": [[48, "cms.fts2yaml.FTSColumn"]], "medicaidfts (class in cms.fts2yaml)": [[48, "cms.fts2yaml.MedicaidFTS"]], "medicaidftscolumn (class in cms.fts2yaml)": [[48, "cms.fts2yaml.MedicaidFTSColumn"]], "medicarefts (class in cms.fts2yaml)": [[48, "cms.fts2yaml.MedicareFTS"]], "medicareftscolumn (class in cms.fts2yaml)": [[48, "cms.fts2yaml.MedicareFTSColumn"]], "add_indices() (medicarefts method)": [[48, "cms.fts2yaml.MedicareFTS.add_indices"]], "analyze_format() (ftscolumn method)": [[48, "cms.fts2yaml.FTSColumn.analyze_format"]], "arg() (columnattribute method)": [[48, "cms.fts2yaml.ColumnAttribute.arg"], [54, "cms.tools.mcr_file.ColumnAttribute.arg"]], "check_key_columns() (medicarefts method)": [[48, "cms.fts2yaml.MedicareFTS.check_key_columns"]], "conv() (ftscolumn class method)": [[48, "cms.fts2yaml.FTSColumn.conv"]], "conv() (medicareftscolumn class method)": [[48, "cms.fts2yaml.MedicareFTSColumn.conv"]], "init() (medicaidfts method)": [[48, "cms.fts2yaml.MedicaidFTS.init"]], "init() (medicarefts method)": [[48, "cms.fts2yaml.MedicareFTS.init"]], "mcr_type() (in module cms.fts2yaml)": [[48, "cms.fts2yaml.mcr_type"]], "medicaid_indices (medicaidfts attribute)": [[48, "cms.fts2yaml.MedicaidFTS.medicaid_indices"]], "nattrs (medicaidftscolumn attribute)": [[48, "cms.fts2yaml.MedicaidFTSColumn.nattrs"]], "nattrs (medicareftscolumn attribute)": [[48, "cms.fts2yaml.MedicareFTSColumn.nattrs"]], "on_after_read_file() (medicaidfts method)": [[48, "cms.fts2yaml.MedicaidFTS.on_after_read_file"]], "on_after_read_file() (medicarefts method)": [[48, "cms.fts2yaml.MedicareFTS.on_after_read_file"]], "read() (columnreader method)": [[48, "cms.fts2yaml.ColumnReader.read"]], "to_dict() (aliascolumn method)": [[48, "cms.fts2yaml.AliasColumn.to_dict"]], "to_dict() (ftscolumn method)": [[48, "cms.fts2yaml.FTSColumn.to_dict"]], "to_fwf_column() (ftscolumn method)": [[48, "cms.fts2yaml.FTSColumn.to_fwf_column"]], "to_sql_type() (ftscolumn method)": [[48, "cms.fts2yaml.FTSColumn.to_sql_type"]], "width() (in module cms.fts2yaml)": [[48, "cms.fts2yaml.width"]], "cms.init_cms_db": [[50, "module-cms.init_cms_db"]], "init_cms() (in module cms.init_cms_db)": [[50, "cms.init_cms_db.init_cms"]], "medicarecombinedview (class in cms.tools.mcr_combine_tables)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView"]], "cms.tools.mcr_combine_tables": [[51, "module-cms.tools.mcr_combine_tables"]], "execute() (medicarecombinedview method)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.execute"]], "find_column2arr() (medicarecombinedview class method)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.find_column2arr"]], "generate_sql() (medicarecombinedview method)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.generate_sql"]], "get_column() (medicarecombinedview class method)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.get_column"]], "get_columns() (medicarecombinedview method)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.get_columns"]], "get_simple_column() (medicarecombinedview class method)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.get_simple_column"]], "get_tables() (medicarecombinedview method)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.get_tables"]], "ip (medicarecombinedview attribute)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.ip"]], "print_sql() (medicarecombinedview method)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.print_sql"]], "ps (medicarecombinedview attribute)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.ps"]], "supported_tables (medicarecombinedview attribute)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.supported_tables"]], "table_sql() (medicarecombinedview method)": [[51, "cms.tools.mcr_combine_tables.MedicareCombinedView.table_sql"]], "ftstuple (class in cms.tools.mcr_create_test_data)": [[52, "cms.tools.mcr_create_test_data.FTSTuple"]], "args() (in module cms.tools.mcr_create_test_data)": [[52, "cms.tools.mcr_create_test_data.args"]], "cms.tools.mcr_create_test_data": [[52, "module-cms.tools.mcr_create_test_data"]], "dat_path() (ftstuple method)": [[52, "cms.tools.mcr_create_test_data.FTSTuple.dat_path"]], "find_fts_tuples() (in module cms.tools.mcr_create_test_data)": [[52, "cms.tools.mcr_create_test_data.find_fts_tuples"]], "fts_path() (ftstuple method)": [[52, "cms.tools.mcr_create_test_data.FTSTuple.fts_path"]], "select() (in module cms.tools.mcr_create_test_data)": [[52, "cms.tools.mcr_create_test_data.select"]], "medicaredataloader (class in cms.mcr_data_loader)": [[53, "cms.mcr_data_loader.MedicareDataLoader"]], "cms.mcr_data_loader": [[53, "module-cms.mcr_data_loader"]], "dat4fts() (medicaredataloader class method)": [[53, "cms.mcr_data_loader.MedicareDataLoader.dat4fts"]], "get_files() (medicaredataloader method)": [[53, "cms.mcr_data_loader.MedicareDataLoader.get_files"]], "open() (medicaredataloader class method)": [[53, "cms.mcr_data_loader.MedicareDataLoader.open"]], "column (class in cms.tools.mcr_file)": [[54, "cms.tools.mcr_file.Column"]], "columnattribute (class in cms.tools.mcr_file)": [[54, "cms.tools.mcr_file.ColumnAttribute"]], "columndef (class in cms.tools.mcr_file)": [[54, "cms.tools.mcr_file.ColumnDef"]], "medicarefile (class in cms.tools.mcr_file)": [[54, "cms.tools.mcr_file.MedicareFile"]], "medparparseexception": [[54, "cms.tools.mcr_file.MedparParseException"]], "cms.tools.mcr_file": [[54, "module-cms.tools.mcr_file"]], "count_lines_in_dest() (medicarefile method)": [[54, "cms.tools.mcr_file.MedicareFile.count_lines_in_dest"]], "count_lines_in_source() (medicarefile method)": [[54, "cms.tools.mcr_file.MedicareFile.count_lines_in_source"]], "export() (medicarefile method)": [[54, "cms.tools.mcr_file.MedicareFile.export"]], "info() (medicarefile method)": [[54, "cms.tools.mcr_file.MedicareFile.info"]], "init() (medicarefile method)": [[54, "cms.tools.mcr_file.MedicareFile.init"]], "log() (in module cms.tools.mcr_file)": [[54, "cms.tools.mcr_file.log"]], "read() (columndef method)": [[54, "cms.tools.mcr_file.ColumnDef.read"]], "read_record() (medicarefile method)": [[54, "cms.tools.mcr_file.MedicareFile.read_record"]], "status() (medicarefile method)": [[54, "cms.tools.mcr_file.MedicareFile.status"]], "status_message() (medicarefile method)": [[54, "cms.tools.mcr_file.MedicareFile.status_message"]], "validate() (medicarefile method)": [[54, "cms.tools.mcr_file.MedicareFile.validate"]], "width() (in module cms.tools.mcr_file)": [[54, "cms.tools.mcr_file.width"]], "cms.tools.mcr_fts2csv": [[55, "module-cms.tools.mcr_fts2csv"]], "convert() (in module cms.tools.mcr_fts2csv)": [[55, "cms.tools.mcr_fts2csv.convert"]], "medicareloader (class in cms.tools.mcr_fts2db)": [[56, "cms.tools.mcr_fts2db.MedicareLoader"]], "cms.tools.mcr_fts2db": [[56, "module-cms.tools.mcr_fts2db"]], "handle() (medicareloader method)": [[56, "cms.tools.mcr_fts2db.MedicareLoader.handle"]], "handle_empty() (medicareloader method)": [[56, "cms.tools.mcr_fts2db.MedicareLoader.handle_empty"]], "loader_for_csv() (medicareloader static method)": [[56, "cms.tools.mcr_fts2db.MedicareLoader.loader_for_csv"]], "loader_for_fwf() (medicareloader static method)": [[56, "cms.tools.mcr_fts2db.MedicareLoader.loader_for_fwf"]], "process() (medicareloader class method)": [[56, "cms.tools.mcr_fts2db.MedicareLoader.process"]], "traverse() (medicareloader method)": [[56, "cms.tools.mcr_fts2db.MedicareLoader.traverse"]], "medicareregistry (class in cms.tools.mcr_registry)": [[57, "cms.tools.mcr_registry.MedicareRegistry"]], "cms.tools.mcr_registry": [[57, "module-cms.tools.mcr_registry"]], "init_registry() (medicareregistry method)": [[57, "cms.tools.mcr_registry.MedicareRegistry.init_registry"]], "read_registry() (medicareregistry method)": [[57, "cms.tools.mcr_registry.MedicareRegistry.read_registry"]], "save() (medicareregistry method)": [[57, "cms.tools.mcr_registry.MedicareRegistry.save"]], "medicaresas (class in cms.tools.mcr_sas)": [[58, "cms.tools.mcr_sas.MedicareSAS"]], "cms.tools.mcr_sas": [[58, "module-cms.tools.mcr_sas"]], "handle() (medicaresas method)": [[58, "cms.tools.mcr_sas.MedicareSAS.handle"]], "handle_sas_file() (medicaresas method)": [[58, "cms.tools.mcr_sas.MedicareSAS.handle_sas_file"]], "traverse() (medicaresas method)": [[58, "cms.tools.mcr_sas.MedicareSAS.traverse"]], "sasloader (class in cms.tools.mcr_sas2db)": [[59, "cms.tools.mcr_sas2db.SASLoader"]], "cms.tools.mcr_sas2db": [[59, "module-cms.tools.mcr_sas2db"]], "handle() (sasloader method)": [[59, "cms.tools.mcr_sas2db.SASLoader.handle"]], "process() (sasloader class method)": [[59, "cms.tools.mcr_sas2db.SASLoader.process"]], "sasintrospector (class in cms.tools.mcr_sas2yaml)": [[60, "cms.tools.mcr_sas2yaml.SASIntrospector"]], "add_sas_table() (sasintrospector method)": [[60, "cms.tools.mcr_sas2yaml.SASIntrospector.add_sas_table"]], "cms.tools.mcr_sas2yaml": [[60, "module-cms.tools.mcr_sas2yaml"]], "handle() (sasintrospector method)": [[60, "cms.tools.mcr_sas2yaml.SASIntrospector.handle"]], "matches() (sasintrospector class method)": [[60, "cms.tools.mcr_sas2yaml.SASIntrospector.matches"]], "process() (sasintrospector class method)": [[60, "cms.tools.mcr_sas2yaml.SASIntrospector.process"]], "medparfileset (class in cms.tools.medpar_converter)": [[63, "cms.tools.medpar_converter.MedParFileSet"]], "medparconverter (class in cms.tools.medpar_converter)": [[63, "cms.tools.medpar_converter.MedparConverter"]], "args() (in module cms.tools.medpar_converter)": [[63, "cms.tools.medpar_converter.args"]], "cms.tools.medpar_converter": [[63, "module-cms.tools.medpar_converter"]], "convert() (medparconverter method)": [[63, "cms.tools.medpar_converter.MedparConverter.convert"]], "convert_dataset() (medparconverter static method)": [[63, "cms.tools.medpar_converter.MedparConverter.convert_dataset"]], "dataset() (medparconverter class method)": [[63, "cms.tools.medpar_converter.MedparConverter.dataset"]], "find() (medparconverter class method)": [[63, "cms.tools.medpar_converter.MedparConverter.find"]], "list() (medparconverter method)": [[63, "cms.tools.medpar_converter.MedparConverter.list"]], "status() (medparconverter method)": [[63, "cms.tools.medpar_converter.MedparConverter.status"]], "args() (in module cms.random_selector)": [[65, "cms.random_selector.args"]], "cms.random_selector": [[65, "module-cms.random_selector"]], "select() (in module cms.random_selector)": [[65, "cms.random_selector.select"]], "registry (class in cms.registry)": [[66, "cms.registry.Registry"]], "built_in_registry_path() (registry static method)": [[66, "cms.registry.Registry.built_in_registry_path"], [191, "gridmet.registry.Registry.built_in_registry_path"]], "cms.registry": [[66, "module-cms.registry"]], "init() (registry method)": [[66, "cms.registry.Registry.init"]], "update() (registry method)": [[66, "cms.registry.Registry.update"], [151, "epa.registry.Registry.update"], [191, "gridmet.registry.Registry.update"]], "update_medicaid() (registry method)": [[66, "cms.registry.Registry.update_medicaid"]], "update_medicare() (registry method)": [[66, "cms.registry.Registry.update_medicare"]], "populateconfig (class in cms.table_population)": [[67, "cms.table_population.PopulateConfig"]], "tablepopulator (class in cms.table_population)": [[67, "cms.table_population.TablePopulator"]], "cms.table_population": [[67, "module-cms.table_population"]], "init_cms() (in module cms.table_population)": [[67, "cms.table_population.init_cms"]], "add_gis_columns() (in module nsaph.adi)": [[100, "nsaph.adi.add_gis_columns"]], "nsaph.adi": [[100, "module-nsaph.adi"]], "commonconfig (class in nsaph.loader.common)": [[101, "nsaph.loader.common.CommonConfig"], [104, "nsaph.loader.common.CommonConfig"]], "dbconnectionconfig (class in nsaph.loader.common)": [[101, "nsaph.loader.common.DBConnectionConfig"], [104, "nsaph.loader.common.DBConnectionConfig"]], "dbtableconfig (class in nsaph.loader.common)": [[101, "nsaph.loader.common.DBTableConfig"], [104, "nsaph.loader.common.DBTableConfig"]], "autocommit (dbconnectionconfig attribute)": [[101, "nsaph.loader.common.DBConnectionConfig.autocommit"], [104, "nsaph.loader.common.DBConnectionConfig.autocommit"]], "connection (dbconnectionconfig attribute)": [[101, "nsaph.loader.common.DBConnectionConfig.connection"], [104, "nsaph.loader.common.DBConnectionConfig.connection"]], "db (dbconnectionconfig attribute)": [[101, "nsaph.loader.common.DBConnectionConfig.db"], [104, "nsaph.loader.common.DBConnectionConfig.db"]], "domain (commonconfig attribute)": [[101, "nsaph.loader.common.CommonConfig.domain"], [104, "nsaph.loader.common.CommonConfig.domain"]], "dryrun (dbconnectionconfig attribute)": [[101, "nsaph.loader.common.DBConnectionConfig.dryrun"], [104, "nsaph.loader.common.DBConnectionConfig.dryrun"]], "nsaph.loader.common": [[101, "module-nsaph.loader.common"], [104, "module-nsaph.loader.common"]], "registry (commonconfig attribute)": [[101, "nsaph.loader.common.CommonConfig.registry"], [104, "nsaph.loader.common.CommonConfig.registry"]], "table (dbtableconfig attribute)": [[101, "nsaph.loader.common.DBTableConfig.table"], [104, "nsaph.loader.common.DBTableConfig.table"]], "verbose (dbconnectionconfig attribute)": [[101, "nsaph.loader.common.DBConnectionConfig.verbose"], [104, "nsaph.loader.common.DBConnectionConfig.verbose"]], "create_table() (in module nsaph.create)": [[102, "nsaph.create.create_table"]], "nsaph.create": [[102, "module-nsaph.create"]], "collect() (in module nsaph.util.cwl_collect_outputs)": [[103, "nsaph.util.cwl_collect_outputs.collect"]], "encode() (in module nsaph.util.cwl_collect_outputs)": [[103, "nsaph.util.cwl_collect_outputs.encode"]], "nsaph.util.cwl_collect_outputs": [[103, "module-nsaph.util.cwl_collect_outputs"]], "parse_args() (in module nsaph.util.cwl_collect_outputs)": [[103, "nsaph.util.cwl_collect_outputs.parse_args"]], "dataloader (class in nsaph.loader.data_loader)": [[104, "nsaph.loader.data_loader.DataLoader"]], "dataloaderaction (class in nsaph.loader.loader_config)": [[104, "nsaph.loader.loader_config.DataLoaderAction"], [118, "nsaph.loader.loader_config.DataLoaderAction"]], "loaderconfig (class in nsaph.loader.loader_config)": [[104, "nsaph.loader.loader_config.LoaderConfig"], [118, "nsaph.loader.loader_config.LoaderConfig"]], "parallelization (class in nsaph.loader.loader_config)": [[104, "nsaph.loader.loader_config.Parallelization"], [118, "nsaph.loader.loader_config.Parallelization"]], "action (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.action"], [118, "nsaph.loader.loader_config.LoaderConfig.action"]], "buffer (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.buffer"], [118, "nsaph.loader.loader_config.LoaderConfig.buffer"]], "close() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.close"]], "commit() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.commit"]], "data (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.data"], [118, "nsaph.loader.loader_config.LoaderConfig.data"]], "drop() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.drop"]], "execute_sql() (dataloader static method)": [[104, "nsaph.loader.data_loader.DataLoader.execute_sql"]], "get_connection() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.get_connection"]], "get_connections() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.get_connections"]], "get_files() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.get_files"]], "has_been_ingested() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.has_been_ingested"]], "import_data_from_file() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.import_data_from_file"]], "incremental (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.incremental"], [118, "nsaph.loader.loader_config.LoaderConfig.incremental"]], "insert_from_select() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.insert_from_select"]], "is_parallel() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.is_parallel"]], "limit (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.limit"], [118, "nsaph.loader.loader_config.LoaderConfig.limit"]], "load() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.load"]], "log (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.log"], [118, "nsaph.loader.loader_config.LoaderConfig.log"]], "nsaph.loader.data_loader": [[104, "module-nsaph.loader.data_loader"]], "nsaph.loader.loader_config": [[104, "module-nsaph.loader.loader_config"], [118, "module-nsaph.loader.loader_config"]], "page (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.page"], [118, "nsaph.loader.loader_config.LoaderConfig.page"]], "parallelization (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.parallelization"], [118, "nsaph.loader.loader_config.LoaderConfig.parallelization"]], "pattern (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.pattern"], [118, "nsaph.loader.loader_config.LoaderConfig.pattern"]], "print_ddl() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.print_ddl"]], "print_table_ddl() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.print_table_ddl"]], "reset (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.reset"], [118, "nsaph.loader.loader_config.LoaderConfig.reset"]], "reset() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.reset"]], "rollback() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.rollback"]], "run() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.run"]], "set_table() (dataloader method)": [[104, "nsaph.loader.data_loader.DataLoader.set_table"]], "sloppy (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.sloppy"], [118, "nsaph.loader.loader_config.LoaderConfig.sloppy"]], "threads (loaderconfig attribute)": [[104, "nsaph.loader.loader_config.LoaderConfig.threads"], [118, "nsaph.loader.loader_config.LoaderConfig.threads"]], "validate() (loaderconfig method)": [[104, "nsaph.loader.loader_config.LoaderConfig.validate"], [118, "nsaph.loader.loader_config.LoaderConfig.validate"]], "connection (class in nsaph.db)": [[105, "nsaph.db.Connection"]], "resultsetdeprecated (class in nsaph.db)": [[105, "nsaph.db.ResultSetDeprecated"]], "size (resultsetdeprecated attribute)": [[105, "nsaph.db.ResultSetDeprecated.SIZE"]], "close() (connection method)": [[105, "nsaph.db.Connection.close"]], "connect() (connection method)": [[105, "nsaph.db.Connection.connect"]], "connect_to_database() (connection method)": [[105, "nsaph.db.Connection.connect_to_database"]], "connect_via_tunnel() (connection method)": [[105, "nsaph.db.Connection.connect_via_tunnel"]], "default_filename (connection attribute)": [[105, "nsaph.db.Connection.default_filename"]], "default_port() (connection static method)": [[105, "nsaph.db.Connection.default_port"]], "default_section (connection attribute)": [[105, "nsaph.db.Connection.default_section"]], "get_database_types() (connection method)": [[105, "nsaph.db.Connection.get_database_types"]], "host_name() (connection static method)": [[105, "nsaph.db.Connection.host_name"]], "nsaph.db": [[105, "module-nsaph.db"]], "read_config() (connection class method)": [[105, "nsaph.db.Connection.read_config"]], "resolve_host() (connection class method)": [[105, "nsaph.db.Connection.resolve_host"]], "test_connection() (in module nsaph.db)": [[105, "nsaph.db.test_connection"]], "create (domain attribute)": [[106, "nsaph.data_model.domain.Domain.CREATE"]], "domain (class in nsaph.data_model.domain)": [[106, "nsaph.data_model.domain.Domain"]], "add_fk_validation() (domain method)": [[106, "nsaph.data_model.domain.Domain.add_fk_validation"]], "add_index() (domain method)": [[106, "nsaph.data_model.domain.Domain.add_index"]], "add_index_by_ddl() (domain method)": [[106, "nsaph.data_model.domain.Domain.add_index_by_ddl"]], "append_ddl() (domain method)": [[106, "nsaph.data_model.domain.Domain.append_ddl"]], "column_spec() (domain method)": [[106, "nsaph.data_model.domain.Domain.column_spec"]], "create() (domain method)": [[106, "nsaph.data_model.domain.Domain.create"]], "create_object_from() (domain method)": [[106, "nsaph.data_model.domain.Domain.create_object_from"]], "create_table() (domain method)": [[106, "nsaph.data_model.domain.Domain.create_table"]], "create_true_table() (domain method)": [[106, "nsaph.data_model.domain.Domain.create_true_table"]], "ddl_for_node() (domain method)": [[106, "nsaph.data_model.domain.Domain.ddl_for_node"]], "drop() (domain method)": [[106, "nsaph.data_model.domain.Domain.drop"]], "extract_generation_code() (domain method)": [[106, "nsaph.data_model.domain.Domain.extract_generation_code"]], "find() (domain method)": [[106, "nsaph.data_model.domain.Domain.find"]], "find_dependent() (domain method)": [[106, "nsaph.data_model.domain.Domain.find_dependent"]], "find_mapped_column_name() (domain method)": [[106, "nsaph.data_model.domain.Domain.find_mapped_column_name"]], "fqn() (domain method)": [[106, "nsaph.data_model.domain.Domain.fqn"]], "generate_insert_from_select() (domain method)": [[106, "nsaph.data_model.domain.Domain.generate_insert_from_select"]], "get() (domain method)": [[106, "nsaph.data_model.domain.Domain.get"]], "get_column_type() (domain static method)": [[106, "nsaph.data_model.domain.Domain.get_column_type"]], "get_columns() (domain class method)": [[106, "nsaph.data_model.domain.Domain.get_columns"]], "get_columns_as_dict() (domain class method)": [[106, "nsaph.data_model.domain.Domain.get_columns_as_dict"]], "get_index_ddl() (domain method)": [[106, "nsaph.data_model.domain.Domain.get_index_ddl"]], "get_multi_column_index_ddl() (domain method)": [[106, "nsaph.data_model.domain.Domain.get_multi_column_index_ddl"]], "get_select_from() (domain static method)": [[106, "nsaph.data_model.domain.Domain.get_select_from"]], "has() (domain method)": [[106, "nsaph.data_model.domain.Domain.has"]], "has_column_spec() (domain static method)": [[106, "nsaph.data_model.domain.Domain.has_column_spec"]], "has_hard_linked_children() (domain method)": [[106, "nsaph.data_model.domain.Domain.has_hard_linked_children"]], "init() (domain method)": [[106, "nsaph.data_model.domain.Domain.init"]], "is_array() (domain static method)": [[106, "nsaph.data_model.domain.Domain.is_array"]], "is_column_wildcard() (domain class method)": [[106, "nsaph.data_model.domain.Domain.is_column_wildcard"]], "is_generated() (domain static method)": [[106, "nsaph.data_model.domain.Domain.is_generated"]], "list_columns() (domain method)": [[106, "nsaph.data_model.domain.Domain.list_columns"]], "list_identifiers() (domain static method)": [[106, "nsaph.data_model.domain.Domain.list_identifiers"]], "list_source_columns() (domain method)": [[106, "nsaph.data_model.domain.Domain.list_source_columns"]], "map_selected_columns() (domain method)": [[106, "nsaph.data_model.domain.Domain.map_selected_columns"]], "matches() (domain method)": [[106, "nsaph.data_model.domain.Domain.matches"]], "need_index() (domain method)": [[106, "nsaph.data_model.domain.Domain.need_index"]], "nsaph.data_model.domain": [[106, "module-nsaph.data_model.domain"]], "parse_wildcard_column_spec() (domain class method)": [[106, "nsaph.data_model.domain.Domain.parse_wildcard_column_spec"]], "set_sloppy() (domain method)": [[106, "nsaph.data_model.domain.Domain.set_sloppy"]], "skip() (domain method)": [[106, "nsaph.data_model.domain.Domain.skip"]], "spillover_table() (domain method)": [[106, "nsaph.data_model.domain.Domain.spillover_table"]], "ufqn() (domain method)": [[106, "nsaph.data_model.domain.Domain.ufqn"]], "view_column_joined() (domain method)": [[106, "nsaph.data_model.domain.Domain.view_column_joined"]], "view_column_spec() (domain method)": [[106, "nsaph.data_model.domain.Domain.view_column_spec"]], "blockingthreadpoolexecutor (class in nsaph.util.executors)": [[108, "nsaph.util.executors.BlockingThreadPoolExecutor"]], "nsaph.util.executors": [[108, "module-nsaph.util.executors"]], "submit() (blockingthreadpoolexecutor method)": [[108, "nsaph.util.executors.BlockingThreadPoolExecutor.submit"]], "thread_initializer() (in module nsaph.util.executors)": [[108, "nsaph.util.executors.thread_initializer"]], "wait() (blockingthreadpoolexecutor method)": [[108, "nsaph.util.executors.BlockingThreadPoolExecutor.wait"]], "wait_for_completion() (blockingthreadpoolexecutor method)": [[108, "nsaph.util.executors.BlockingThreadPoolExecutor.wait_for_completion"]], "nsaph.fips": [[109, "module-nsaph.fips"]], "dataset (class in nsaph.requests.hdf5_export)": [[110, "nsaph.requests.hdf5_export.Dataset"]], "add_index() (dataset method)": [[110, "nsaph.requests.hdf5_export.Dataset.add_index"]], "append() (dataset method)": [[110, "nsaph.requests.hdf5_export.Dataset.append"]], "append() (in module nsaph.requests.hdf5_export)": [[110, "nsaph.requests.hdf5_export.append"]], "clear() (dataset method)": [[110, "nsaph.requests.hdf5_export.Dataset.clear"]], "dtype() (in module nsaph.requests.hdf5_export)": [[110, "nsaph.requests.hdf5_export.dtype"]], "export() (in module nsaph.requests.hdf5_export)": [[110, "nsaph.requests.hdf5_export.export"]], "map2ds() (in module nsaph.requests.hdf5_export)": [[110, "nsaph.requests.hdf5_export.map2ds"]], "nsaph.requests.hdf5_export": [[110, "module-nsaph.requests.hdf5_export"]], "store() (in module nsaph.requests.hdf5_export)": [[110, "nsaph.requests.hdf5_export.store"]], "to_hdf5() (dataset method)": [[110, "nsaph.requests.hdf5_export.Dataset.to_hdf5"]], "type_name() (dataset method)": [[110, "nsaph.requests.hdf5_export.Dataset.type_name"]], "indexbuilder (class in nsaph.loader.index_builder)": [[112, "nsaph.loader.index_builder.IndexBuilder"]], "indexerconfig (class in nsaph.loader.index_builder)": [[112, "nsaph.loader.index_builder.IndexerConfig"]], "build() (indexbuilder method)": [[112, "nsaph.loader.index_builder.IndexBuilder.build"]], "drop() (indexbuilder method)": [[112, "nsaph.loader.index_builder.IndexBuilder.drop"]], "drop_all() (indexbuilder class method)": [[112, "nsaph.loader.index_builder.IndexBuilder.drop_all"]], "execute() (indexbuilder method)": [[112, "nsaph.loader.index_builder.IndexBuilder.execute"]], "find_name() (in module nsaph.loader.index_builder)": [[112, "nsaph.loader.index_builder.find_name"]], "nsaph.loader.index_builder": [[112, "module-nsaph.loader.index_builder"]], "print_stat() (indexbuilder method)": [[112, "nsaph.loader.index_builder.IndexBuilder.print_stat"]], "run() (indexbuilder method)": [[112, "nsaph.loader.index_builder.IndexBuilder.run"]], "execute() (in module nsaph.util.init_core_db)": [[113, "nsaph.util.init_core_db.execute"]], "get_sql_dir() (in module nsaph.util.init_core_db)": [[113, "nsaph.util.init_core_db.get_sql_dir"]], "init_core() (in module nsaph.util.init_core_db)": [[113, "nsaph.util.init_core_db.init_core"]], "load_data() (in module nsaph.util.init_core_db)": [[113, "nsaph.util.init_core_db.load_data"]], "nsaph.util.init_core_db": [[113, "module-nsaph.util.init_core_db"]], "parse_args() (in module nsaph.util.init_core_db)": [[113, "nsaph.util.init_core_db.parse_args"]], "batch() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.Batch"]], "inserter (class in nsaph.data_model.inserter)": [[114, "nsaph.data_model.inserter.Inserter"]], "table() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.Table"]], "compute() (in module nsaph.data_model.inserter)": [[114, "nsaph.data_model.inserter.compute"]], "drilldown() (inserter static method)": [[114, "nsaph.data_model.inserter.Inserter.drilldown"]], "get_autocommit() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.get_autocommit"]], "get_cumulative_timing() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.get_cumulative_timing"]], "get_thread_timing() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.get_thread_timing"]], "get_timestamp() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.get_timestamp"]], "get_timings() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.get_timings"]], "import_file() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.import_file"]], "log_progress() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.log_progress"]], "nsaph.data_model.inserter": [[114, "module-nsaph.data_model.inserter"]], "prepare() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.prepare"]], "push() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.push"]], "read_batch() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.read_batch"]], "reset_timer() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.reset_timer"]], "stamp_time() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.stamp_time"]], "timer() (inserter method)": [[114, "nsaph.data_model.inserter.Inserter.timer"]], "inconsistenttypes": [[115, "nsaph.loader.introspector.InconsistentTypes"]], "introspector (class in nsaph.loader.introspector)": [[115, "nsaph.loader.introspector.Introspector"]], "append_file_column() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.append_file_column"]], "append_record_column() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.append_record_column"]], "append_sql_column() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.append_sql_column"]], "classify() (introspector class method)": [[115, "nsaph.loader.introspector.Introspector.classify"]], "csv_reader() (introspector static method)": [[115, "nsaph.loader.introspector.Introspector.csv_reader"]], "db_type() (introspector static method)": [[115, "nsaph.loader.introspector.Introspector.db_type"]], "fopen() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.fopen"]], "get_columns() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.get_columns"]], "guess_str() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.guess_str"]], "guess_types() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.guess_types"]], "handle_csv() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.handle_csv"]], "handle_json() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.handle_json"]], "handle_sas() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.handle_sas"]], "introspect() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.introspect"]], "load_csv() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.load_csv"]], "load_fst() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.load_fst"]], "load_json() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.load_json"]], "load_range() (introspector static method)": [[115, "nsaph.loader.introspector.Introspector.load_range"]], "load_sas() (introspector method)": [[115, "nsaph.loader.introspector.Introspector.load_sas"]], "name() (introspector static method)": [[115, "nsaph.loader.introspector.Introspector.name"]], "nsaph.loader.introspector": [[115, "module-nsaph.loader.introspector"]], "reconcile() (introspector static method)": [[115, "nsaph.loader.introspector.Introspector.reconcile"]], "sas2db_type() (introspector class method)": [[115, "nsaph.loader.introspector.Introspector.sas2db_type"]], "test() (in module nsaph.loader.introspector)": [[115, "nsaph.loader.introspector.test"]], "unquote() (introspector static method)": [[115, "nsaph.loader.introspector.Introspector.unquote"]], "add_gis_columns() (in module nsaph.link_gis)": [[116, "nsaph.link_gis.add_gis_columns"]], "nsaph.link_gis": [[116, "module-nsaph.link_gis"]], "loaderbase (class in nsaph.loader)": [[117, "nsaph.loader.LoaderBase"]], "diff() (in module nsaph.loader)": [[117, "nsaph.loader.diff"]], "execute_with_monitor() (loaderbase method)": [[117, "nsaph.loader.LoaderBase.execute_with_monitor"]], "find_file_in_path() (loaderbase class method)": [[117, "nsaph.loader.LoaderBase.find_file_in_path"]], "get_domain() (loaderbase class method)": [[117, "nsaph.loader.LoaderBase.get_domain"]], "get_pid() (loaderbase method)": [[117, "nsaph.loader.LoaderBase.get_pid"]], "log_activity() (loaderbase method)": [[117, "nsaph.loader.LoaderBase.log_activity"]], "nsaph.loader": [[117, "module-nsaph.loader"]], "drop (dataloaderaction attribute)": [[118, "nsaph.loader.loader_config.DataLoaderAction.drop"]], "files (parallelization attribute)": [[118, "nsaph.loader.loader_config.Parallelization.files"]], "insert (dataloaderaction attribute)": [[118, "nsaph.loader.loader_config.DataLoaderAction.insert"]], "lines (parallelization attribute)": [[118, "nsaph.loader.loader_config.Parallelization.lines"]], "load (dataloaderaction attribute)": [[118, "nsaph.loader.loader_config.DataLoaderAction.load"]], "new() (dataloaderaction class method)": [[118, "nsaph.loader.loader_config.DataLoaderAction.new"]], "none (parallelization attribute)": [[118, "nsaph.loader.loader_config.Parallelization.none"]], "print (dataloaderaction attribute)": [[118, "nsaph.loader.loader_config.DataLoaderAction.print"]], "customcolumn (class in nsaph.data_model.model)": [[120, "nsaph.data_model.model.CustomColumn"]], "table (class in nsaph.data_model.model)": [[120, "nsaph.data_model.model.Table"]], "add_column() (table method)": [[120, "nsaph.data_model.model.Table.add_column"]], "add_data() (table method)": [[120, "nsaph.data_model.model.Table.add_data"]], "analyze() (table method)": [[120, "nsaph.data_model.model.Table.analyze"]], "build_indices() (table method)": [[120, "nsaph.data_model.model.Table.build_indices"]], "copy_data() (table method)": [[120, "nsaph.data_model.model.Table.copy_data"]], "create() (table method)": [[120, "nsaph.data_model.model.Table.create"]], "csv_reader() (in module nsaph.data_model.model)": [[120, "nsaph.data_model.model.csv_reader"]], "drop() (table method)": [[120, "nsaph.data_model.model.Table.drop"]], "extract_value() (customcolumn method)": [[120, "nsaph.data_model.model.CustomColumn.extract_value"]], "fopen() (table method)": [[120, "nsaph.data_model.model.Table.fopen"]], "get_index_ddl() (table method)": [[120, "nsaph.data_model.model.Table.get_index_ddl"]], "guess_types() (table method)": [[120, "nsaph.data_model.model.Table.guess_types"]], "index_method() (in module nsaph.data_model.model)": [[120, "nsaph.data_model.model.index_method"]], "load_range() (in module nsaph.data_model.model)": [[120, "nsaph.data_model.model.load_range"]], "log_progress() (table static method)": [[120, "nsaph.data_model.model.Table.log_progress"]], "make_column() (table method)": [[120, "nsaph.data_model.model.Table.make_column"]], "make_fips_column() (table method)": [[120, "nsaph.data_model.model.Table.make_fips_column"]], "make_int_column() (table method)": [[120, "nsaph.data_model.model.Table.make_int_column"]], "make_iso_column() (table method)": [[120, "nsaph.data_model.model.Table.make_iso_column"]], "nsaph.data_model.model": [[120, "module-nsaph.data_model.model"]], "parse_fips12() (table method)": [[120, "nsaph.data_model.model.Table.parse_fips12"]], "save() (table method)": [[120, "nsaph.data_model.model.Table.save"]], "type_from_metadata() (table method)": [[120, "nsaph.data_model.model.Table.type_from_metadata"]], "unquote() (in module nsaph.data_model.model)": [[120, "nsaph.data_model.model.unquote"]], "activity (class in nsaph.loader.monitor)": [[121, "nsaph.loader.monitor.Activity"]], "dbactivitymonitor (class in nsaph.loader.monitor)": [[121, "nsaph.loader.monitor.DBActivityMonitor"]], "dbmonitorconfig (class in nsaph.loader.monitor)": [[121, "nsaph.loader.monitor.DBMonitorConfig"]], "get_activity() (dbactivitymonitor method)": [[121, "nsaph.loader.monitor.DBActivityMonitor.get_activity"]], "get_indexing_progress() (dbactivitymonitor method)": [[121, "nsaph.loader.monitor.DBActivityMonitor.get_indexing_progress"]], "get_instance() (dbactivitymonitor class method)": [[121, "nsaph.loader.monitor.DBActivityMonitor.get_instance"]], "nsaph.loader.monitor": [[121, "module-nsaph.loader.monitor"]], "pid (dbmonitorconfig attribute)": [[121, "nsaph.loader.monitor.DBMonitorConfig.pid"]], "run() (dbactivitymonitor method)": [[121, "nsaph.loader.monitor.DBActivityMonitor.run"]], "state (dbmonitorconfig attribute)": [[121, "nsaph.loader.monitor.DBMonitorConfig.state"]], "get_hostname_as_localhost() (in module nsaph.util.net)": [[122, "nsaph.util.net.get_hostname_as_localhost"]], "nsaph.util.net": [[122, "module-nsaph.util.net"]], "app_name() (in module nsaph)": [[123, "nsaph.app_name"]], "init_logging() (in module nsaph)": [[123, "nsaph.init_logging"]], "nsaph": [[123, "module-nsaph"]], "add_state_fips() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.add_state_fips"]], "dump() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.dump"]], "ensure() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.ensure"]], "export() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.export"]], "flush() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.flush"]], "fqn() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.fqn"]], "import_table() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.import_table"]], "nsaph.util.pg_json_dump": [[124, "module-nsaph.util.pg_json_dump"]], "quote() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.quote"]], "result_set() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.result_set"]], "show() (in module nsaph.util.pg_json_dump)": [[124, "nsaph.util.pg_json_dump.show"]], "nsaph.pg_keywords": [[125, "module-nsaph.pg_keywords"]], "projectloader (class in nsaph.loader.project_loader)": [[126, "nsaph.loader.project_loader.ProjectLoader"]], "introspect() (projectloader method)": [[126, "nsaph.loader.project_loader.ProjectLoader.introspect"]], "is_relative_to() (in module nsaph.loader.project_loader)": [[126, "nsaph.loader.project_loader.is_relative_to"]], "new_domain() (projectloader class method)": [[126, "nsaph.loader.project_loader.ProjectLoader.new_domain"]], "nsaph.loader.project_loader": [[126, "module-nsaph.loader.project_loader"]], "remove_ext() (in module nsaph.loader.project_loader)": [[126, "nsaph.loader.project_loader.remove_ext"]], "run() (projectloader method)": [[126, "nsaph.loader.project_loader.ProjectLoader.run"]], "save_registry() (projectloader method)": [[126, "nsaph.loader.project_loader.ProjectLoader.save_registry"]], "execute() (in module nsaph.util.psql)": [[127, "nsaph.util.psql.execute"]], "nsaph.util.psql": [[127, "module-nsaph.util.psql"]], "parse_args() (in module nsaph.util.psql)": [[127, "nsaph.util.psql.parse_args"]], "query (class in nsaph.requests.query)": [[128, "nsaph.requests.query.Query"]], "all_tables() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.all_tables"]], "collect_tables() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.collect_tables"]], "execute() (query method)": [[128, "nsaph.requests.query.Query.execute"]], "find_tables() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.find_tables"]], "fqn() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.fqn"]], "generate() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.generate"]], "generate_from() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.generate_from"]], "generate_order_by() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.generate_order_by"]], "generate_select() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.generate_select"]], "generate_where() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.generate_where"]], "nsaph.requests.query": [[128, "module-nsaph.requests.query"]], "prepare() (query method)": [[128, "nsaph.requests.query.Query.prepare"]], "reduce_tables() (in module nsaph.requests.query)": [[128, "nsaph.requests.query.reduce_tables"]], "sql (query attribute)": [[128, "nsaph.requests.query.Query.sql"]], "get_resource_dir() (in module nsaph.util.resources)": [[130, "nsaph.util.resources.get_resource_dir"]], "get_resources() (in module nsaph.util.resources)": [[130, "nsaph.util.resources.get_resources"]], "name2path() (in module nsaph.util.resources)": [[130, "nsaph.util.resources.name2path"]], "nsaph.util.resources": [[130, "module-nsaph.util.resources"]], "info() (in module nsaph.util.sas_explorer)": [[132, "nsaph.util.sas_explorer.info"]], "nsaph.util.sas_explorer": [[132, "module-nsaph.util.sas_explorer"]], "simulate() (in module nsaph.util.sas_explorer)": [[132, "nsaph.util.sas_explorer.simulate"]], "install() (in module nsaph.util.shapes)": [[133, "nsaph.util.shapes.install"]], "nsaph.util.shapes": [[133, "module-nsaph.util.shapes"]], "ssa2fips (class in nsaph.util.ssa2fips)": [[134, "nsaph.util.ssa2fips.SSA2FIPS"]], "ssafile (class in nsaph.util.ssa2fips)": [[134, "nsaph.util.ssa2fips.SSAFile"]], "meta (ssa2fips attribute)": [[134, "nsaph.util.ssa2fips.SSA2FIPS.meta"]], "nsaph.util.ssa2fips": [[134, "module-nsaph.util.ssa2fips"]], "print() (ssa2fips method)": [[134, "nsaph.util.ssa2fips.SSA2FIPS.print"]], "read() (ssa2fips method)": [[134, "nsaph.util.ssa2fips.SSA2FIPS.read"]], "read() (ssafile method)": [[134, "nsaph.util.ssa2fips.SSAFile.read"]], "set_year() (ssafile method)": [[134, "nsaph.util.ssa2fips.SSAFile.set_year"]], "store() (ssa2fips method)": [[134, "nsaph.util.ssa2fips.SSA2FIPS.store"]], "values() (ssafile method)": [[134, "nsaph.util.ssa2fips.SSAFile.values"]], "y (ssa2fips attribute)": [[134, "nsaph.util.ssa2fips.SSA2FIPS.y"]], "years (ssa2fips attribute)": [[134, "nsaph.util.ssa2fips.SSA2FIPS.years"]], "csvlikejsonreader (class in nsaph.data_model.utils)": [[135, "nsaph.data_model.utils.CSVLikeJsonReader"]], "datareader (class in nsaph.data_model.utils)": [[135, "nsaph.data_model.utils.DataReader"]], "basename() (in module nsaph.data_model.utils)": [[135, "nsaph.data_model.utils.basename"]], "close() (csvlikejsonreader method)": [[135, "nsaph.data_model.utils.CSVLikeJsonReader.close"]], "entry_to_path() (in module nsaph.data_model.utils)": [[135, "nsaph.data_model.utils.entry_to_path"]], "get_path() (datareader method)": [[135, "nsaph.data_model.utils.DataReader.get_path"]], "nsaph.data_model.utils": [[135, "module-nsaph.data_model.utils"]], "open() (csvlikejsonreader method)": [[135, "nsaph.data_model.utils.CSVLikeJsonReader.open"]], "open_csv() (datareader method)": [[135, "nsaph.data_model.utils.DataReader.open_csv"]], "open_fst() (datareader method)": [[135, "nsaph.data_model.utils.DataReader.open_fst"]], "open_fwf() (datareader method)": [[135, "nsaph.data_model.utils.DataReader.open_fwf"]], "open_json() (datareader method)": [[135, "nsaph.data_model.utils.DataReader.open_json"]], "open_sas7bdat() (datareader method)": [[135, "nsaph.data_model.utils.DataReader.open_sas7bdat"]], "regex() (in module nsaph.data_model.utils)": [[135, "nsaph.data_model.utils.regex"]], "rows() (datareader method)": [[135, "nsaph.data_model.utils.DataReader.rows"]], "split() (in module nsaph.data_model.utils)": [[135, "nsaph.data_model.utils.split"]], "vacuum (class in nsaph.loader.vacuum)": [[137, "nsaph.loader.vacuum.Vacuum"]], "find_name() (in module nsaph.loader.vacuum)": [[137, "nsaph.loader.vacuum.find_name"]], "log_activity() (vacuum method)": [[137, "nsaph.loader.vacuum.Vacuum.log_activity"]], "nsaph.loader.vacuum": [[137, "module-nsaph.loader.vacuum"]], "run() (vacuum method)": [[137, "nsaph.loader.vacuum.Vacuum.run"]], "zip2fipscrosswalk (class in nsaph.util.zip2fips)": [[138, "nsaph.util.zip2fips.Zip2FipsCrossWalk"]], "download() (zip2fipscrosswalk method)": [[138, "nsaph.util.zip2fips.Zip2FipsCrossWalk.download"]], "m2q (zip2fipscrosswalk attribute)": [[138, "nsaph.util.zip2fips.Zip2FipsCrossWalk.m2q"]], "nsaph.util.zip2fips": [[138, "module-nsaph.util.zip2fips"]], "save() (zip2fipscrosswalk method)": [[138, "nsaph.util.zip2fips.Zip2FipsCrossWalk.save"]], "table (zip2fipscrosswalk attribute)": [[138, "nsaph.util.zip2fips.Zip2FipsCrossWalk.table"]], "url_pattern (zip2fipscrosswalk attribute)": [[138, "nsaph.util.zip2fips.Zip2FipsCrossWalk.url_pattern"]], "airnow (class in epa.airnow)": [[142, "epa.airnow.AirNow"]], "epa.airnow": [[142, "module-epa.airnow"]], "airnowdownloader (class in epa.airnow_downloader)": [[143, "epa.airnow_downloader.AirNowDownloader"]], "download() (airnowdownloader method)": [[143, "epa.airnow_downloader.AirNowDownloader.download"]], "download_range() (airnowdownloader method)": [[143, "epa.airnow_downloader.AirNowDownloader.download_range"]], "dump_csv() (airnowdownloader static method)": [[143, "epa.airnow_downloader.AirNowDownloader.dump_csv"]], "epa.airnow_downloader": [[143, "module-epa.airnow_downloader"]], "process() (airnowdownloader method)": [[143, "epa.airnow_downloader.AirNowDownloader.process"]], "write_csv_header() (airnowdownloader method)": [[143, "epa.airnow_downloader.AirNowDownloader.write_csv_header"]], "airnowcontext (class in epa.airnow_ds_def)": [[144, "epa.airnow_ds_def.AirNowContext"]], "argument (class in nsaph_utils.utils.context)": [[144, "nsaph_utils.utils.context.Argument"], [148, "nsaph_utils.utils.context.Argument"], [180, "nsaph_utils.utils.context.Argument"], [251, "nsaph_utils.utils.context.Argument"]], "co (parameter attribute)": [[144, "epa.airnow_ds_def.Parameter.CO"]], "context (class in nsaph_utils.utils.context)": [[144, "nsaph_utils.utils.context.Context"], [148, "nsaph_utils.utils.context.Context"], [180, "nsaph_utils.utils.context.Context"], [251, "nsaph_utils.utils.context.Context"]], "no2 (parameter attribute)": [[144, "epa.airnow_ds_def.Parameter.NO2"], [148, "epa.aqs_ds_def.Parameter.NO2"]], "ozone (parameter attribute)": [[144, "epa.airnow_ds_def.Parameter.OZONE"], [148, "epa.aqs_ds_def.Parameter.OZONE"]], "pm10 (parameter attribute)": [[144, "epa.airnow_ds_def.Parameter.PM10"]], "pm25 (parameter attribute)": [[144, "epa.airnow_ds_def.Parameter.PM25"], [148, "epa.aqs_ds_def.Parameter.PM25"]], "parameter (class in epa.airnow_ds_def)": [[144, "epa.airnow_ds_def.Parameter"]], "so2 (parameter attribute)": [[144, "epa.airnow_ds_def.Parameter.SO2"]], "api_key (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.api_key"]], "cfg (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.cfg"]], "compress (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.compress"]], "compress (context attribute)": [[144, "nsaph_utils.utils.context.Context.compress"], [148, "nsaph_utils.utils.context.Context.compress"], [180, "nsaph_utils.utils.context.Context.compress"], [251, "nsaph_utils.utils.context.Context.compress"]], "destination (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.destination"]], "end_date (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.end_date"]], "enum() (airnowcontext class method)": [[144, "epa.airnow_ds_def.AirNowContext.enum"]], "enum() (context class method)": [[144, "nsaph_utils.utils.context.Context.enum"], [148, "nsaph_utils.utils.context.Context.enum"], [180, "nsaph_utils.utils.context.Context.enum"], [251, "nsaph_utils.utils.context.Context.enum"]], "epa.airnow_ds_def": [[144, "module-epa.airnow_ds_def"]], "parameters (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.parameters"]], "proxy (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.proxy"]], "qc (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.qc"]], "reset (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.reset"]], "shapes (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.shapes"]], "start_date (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.start_date"]], "validate() (airnowcontext method)": [[144, "epa.airnow_ds_def.AirNowContext.validate"]], "validate() (context method)": [[144, "nsaph_utils.utils.context.Context.validate"], [148, "nsaph_utils.utils.context.Context.validate"], [180, "nsaph_utils.utils.context.Context.validate"], [251, "nsaph_utils.utils.context.Context.validate"]], "years (airnowcontext attribute)": [[144, "epa.airnow_ds_def.AirNowContext.years"]], "years (context attribute)": [[144, "nsaph_utils.utils.context.Context.years"], [148, "nsaph_utils.utils.context.Context.years"], [180, "nsaph_utils.utils.context.Context.years"], [251, "nsaph_utils.utils.context.Context.years"]], "epa.airnow_setup": [[145, "module-epa.airnow_setup"]], "setup() (in module epa.airnow_setup)": [[145, "epa.airnow_setup.setup"]], "download_shapes() (in module epa.airnow_shapes)": [[146, "epa.airnow_shapes.download_shapes"]], "epa.airnow_shapes": [[146, "module-epa.airnow_shapes"]], "aqs (class in epa.aqs)": [[147, "epa.aqs.AQS"]], "clear() (aqs method)": [[147, "epa.aqs.AQS.clear"]], "collect_downloads() (aqs method)": [[147, "epa.aqs.AQS.collect_downloads"]], "download() (aqs method)": [[147, "epa.aqs.AQS.download"]], "epa.aqs": [[147, "module-epa.aqs"]], "is_downloaded() (aqs method)": [[147, "epa.aqs.AQS.is_downloaded"]], "annual (aggregation attribute)": [[148, "epa.aqs_ds_def.Aggregation.ANNUAL"]], "aqscontext (class in epa.aqs_ds_def)": [[148, "epa.aqs_ds_def.AQSContext"]], "aggregation (class in epa.aqs_ds_def)": [[148, "epa.aqs_ds_def.Aggregation"]], "cardinality (class in nsaph_utils.utils.context)": [[148, "nsaph_utils.utils.context.Cardinality"], [180, "nsaph_utils.utils.context.Cardinality"], [251, "nsaph_utils.utils.context.Cardinality"]], "daily (aggregation attribute)": [[148, "epa.aqs_ds_def.Aggregation.DAILY"]], "max_temp (parameter attribute)": [[148, "epa.aqs_ds_def.Parameter.MAX_TEMP"]], "min_temp (parameter attribute)": [[148, "epa.aqs_ds_def.Parameter.MIN_TEMP"]], "parameter (class in epa.aqs_ds_def)": [[148, "epa.aqs_ds_def.Parameter"]], "aggregation (aqscontext attribute)": [[148, "epa.aqs_ds_def.AQSContext.aggregation"]], "compress (aqscontext attribute)": [[148, "epa.aqs_ds_def.AQSContext.compress"]], "destination (aqscontext attribute)": [[148, "epa.aqs_ds_def.AQSContext.destination"]], "enum() (aqscontext class method)": [[148, "epa.aqs_ds_def.AQSContext.enum"]], "epa.aqs_ds_def": [[148, "module-epa.aqs_ds_def"]], "merge_years (aqscontext attribute)": [[148, "epa.aqs_ds_def.AQSContext.merge_years"]], "parameters (aqscontext attribute)": [[148, "epa.aqs_ds_def.AQSContext.parameters"]], "validate() (aqscontext method)": [[148, "epa.aqs_ds_def.AQSContext.validate"]], "years (aqscontext attribute)": [[148, "epa.aqs_ds_def.AQSContext.years"]], "epa.aqs_expand": [[149, "module-epa.aqs_expand"]], "expand_data() (in module epa.aqs_expand)": [[149, "epa.aqs_expand.expand_data"]], "csvfilewrapper (class in nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.CSVFileWrapper"], [257, "nsaph_utils.utils.io_utils.CSVFileWrapper"]], "csvwriter (class in nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.CSVWriter"], [257, "nsaph_utils.utils.io_utils.CSVWriter"]], "collector (class in nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.Collector"], [257, "nsaph_utils.utils.io_utils.Collector"]], "listcollector (class in nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.ListCollector"], [257, "nsaph_utils.utils.io_utils.ListCollector"]], "add_monitor_key() (in module epa.aqs_tools)": [[150, "epa.aqs_tools.add_monitor_key"]], "as_content() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.as_content"], [257, "nsaph_utils.utils.io_utils.as_content"]], "as_csv_reader() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.as_csv_reader"], [257, "nsaph_utils.utils.io_utils.as_csv_reader"]], "as_stream() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.as_stream"], [257, "nsaph_utils.utils.io_utils.as_stream"]], "basename() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.basename"], [257, "nsaph_utils.utils.io_utils.basename"]], "check_http_response() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.check_http_response"], [257, "nsaph_utils.utils.io_utils.check_http_response"]], "collect_annual_downloads() (in module epa.aqs_tools)": [[150, "epa.aqs_tools.collect_annual_downloads"]], "collect_aqs_download_tasks() (in module epa.aqs_tools)": [[150, "epa.aqs_tools.collect_aqs_download_tasks"]], "collect_daily_downloads() (in module epa.aqs_tools)": [[150, "epa.aqs_tools.collect_daily_downloads"]], "destination_path() (in module epa.aqs_tools)": [[150, "epa.aqs_tools.destination_path"]], "download() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.download"], [257, "nsaph_utils.utils.io_utils.download"]], "download_data() (in module epa.aqs_tools)": [[150, "epa.aqs_tools.download_data"]], "epa.aqs_tools": [[150, "module-epa.aqs_tools"]], "file_as_csv_reader() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.file_as_csv_reader"], [257, "nsaph_utils.utils.io_utils.file_as_csv_reader"]], "file_as_stream() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.file_as_stream"], [257, "nsaph_utils.utils.io_utils.file_as_stream"]], "fopen() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.fopen"], [257, "nsaph_utils.utils.io_utils.fopen"]], "get_entries() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.get_entries"], [257, "nsaph_utils.utils.io_utils.get_entries"]], "get_readme() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.get_readme"], [257, "nsaph_utils.utils.io_utils.get_readme"]], "is_dir() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.is_dir"], [257, "nsaph_utils.utils.io_utils.is_dir"]], "is_downloaded() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.is_downloaded"], [257, "nsaph_utils.utils.io_utils.is_downloaded"]], "is_readme() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.is_readme"], [257, "nsaph_utils.utils.io_utils.is_readme"]], "nsaph_utils.utils.io_utils": [[150, "module-nsaph_utils.utils.io_utils"], [257, "module-nsaph_utils.utils.io_utils"]], "transfer() (in module epa.aqs_tools)": [[150, "epa.aqs_tools.transfer"]], "write_csv() (in module nsaph_utils.utils.io_utils)": [[150, "nsaph_utils.utils.io_utils.write_csv"], [257, "nsaph_utils.utils.io_utils.write_csv"]], "epaconfig (class in epa.registry)": [[151, "epa.registry.EPAConfig"]], "registry (class in epa.registry)": [[151, "epa.registry.Registry"]], "create_domain_yaml() (registry static method)": [[151, "epa.registry.Registry.create_domain_yaml"]], "create_table_yaml() (registry method)": [[151, "epa.registry.Registry.create_table_yaml"]], "data (epaconfig attribute)": [[151, "epa.registry.EPAConfig.data"]], "epa.registry": [[151, "module-epa.registry"]], "output (epaconfig attribute)": [[151, "epa.registry.EPAConfig.output"]], "table (epaconfig attribute)": [[151, "epa.registry.EPAConfig.table"]], "gisannotator (class in nsaph_gis.annotator)": [[170, "nsaph_gis.annotator.GISAnnotator"]], "join() (gisannotator method)": [[170, "nsaph_gis.annotator.GISAnnotator.join"]], "matches() (gisannotator static method)": [[170, "nsaph_gis.annotator.GISAnnotator.matches"]], "nsaph_gis.annotator": [[170, "module-nsaph_gis.annotator"]], "record (class in nsaph_gis.compute_shape)": [[171, "nsaph_gis.compute_shape.Record"]], "statscounter (class in nsaph_gis.compute_shape)": [[171, "nsaph_gis.compute_shape.StatsCounter"]], "mean (record attribute)": [[171, "nsaph_gis.compute_shape.Record.mean"]], "nsaph_gis.compute_shape": [[171, "module-nsaph_gis.compute_shape"]], "process() (statscounter class method)": [[171, "nsaph_gis.compute_shape.StatsCounter.process"]], "prop (record attribute)": [[171, "nsaph_gis.compute_shape.Record.prop"]], "geography (class in nsaph_gis.constants)": [[172, "nsaph_gis.constants.Geography"], [179, "nsaph_gis.constants.Geography"]], "rasterizationstrategy (class in nsaph_gis.constants)": [[172, "nsaph_gis.constants.RasterizationStrategy"], [224, "nsaph_gis.constants.RasterizationStrategy"]], "all_touched (rasterizationstrategy attribute)": [[172, "nsaph_gis.constants.RasterizationStrategy.all_touched"], [224, "nsaph_gis.constants.RasterizationStrategy.all_touched"]], "combined (rasterizationstrategy attribute)": [[172, "nsaph_gis.constants.RasterizationStrategy.combined"], [224, "nsaph_gis.constants.RasterizationStrategy.combined"]], "county (geography attribute)": [[172, "nsaph_gis.constants.Geography.county"]], "custom (geography attribute)": [[172, "nsaph_gis.constants.Geography.custom"]], "default (rasterizationstrategy attribute)": [[172, "nsaph_gis.constants.RasterizationStrategy.default"], [224, "nsaph_gis.constants.RasterizationStrategy.default"]], "downscale (rasterizationstrategy attribute)": [[172, "nsaph_gis.constants.RasterizationStrategy.downscale"], [224, "nsaph_gis.constants.RasterizationStrategy.downscale"]], "nsaph_gis.constants": [[172, "module-nsaph_gis.constants"]], "zip (geography attribute)": [[172, "nsaph_gis.constants.Geography.zip"]], "county_template (gisdownloader attribute)": [[173, "nsaph_gis.downloader.GISDownloader.COUNTY_TEMPLATE"]], "gisdownloader (class in nsaph_gis.downloader)": [[173, "nsaph_gis.downloader.GISDownloader"]], "zip_template (gisdownloader attribute)": [[173, "nsaph_gis.downloader.GISDownloader.ZIP_TEMPLATE"]], "download_county() (gisdownloader class method)": [[173, "nsaph_gis.downloader.GISDownloader.download_county"]], "download_shapes() (gisdownloader class method)": [[173, "nsaph_gis.downloader.GISDownloader.download_shapes"]], "download_zip() (gisdownloader class method)": [[173, "nsaph_gis.downloader.GISDownloader.download_zip"]], "nsaph_gis.downloader": [[173, "module-nsaph_gis.downloader"]], "completely_masked (pointinraster attribute)": [[174, "nsaph_gis.geometry.PointInRaster.COMPLETELY_MASKED"]], "partially_masked (pointinraster attribute)": [[174, "nsaph_gis.geometry.PointInRaster.PARTIALLY_MASKED"]], "pointinraster (class in nsaph_gis.geometry)": [[174, "nsaph_gis.geometry.PointInRaster"]], "array() (pointinraster method)": [[174, "nsaph_gis.geometry.PointInRaster.array"]], "bilinear() (pointinraster method)": [[174, "nsaph_gis.geometry.PointInRaster.bilinear"]], "is_masked() (pointinraster method)": [[174, "nsaph_gis.geometry.PointInRaster.is_masked"]], "nsaph_gis.geometry": [[174, "module-nsaph_gis.geometry"]], "window (pointinraster attribute)": [[174, "nsaph_gis.geometry.PointInRaster.window"]], "x (pointinraster attribute)": [[174, "nsaph_gis.geometry.PointInRaster.x"]], "y (pointinraster attribute)": [[174, "nsaph_gis.geometry.PointInRaster.y"]], "gridmetvariable (class in gridmet.config)": [[176, "gridmet.config.GridmetVariable"], [185, "gridmet.config.GridmetVariable"]], "bi (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.bi"], [185, "gridmet.config.GridmetVariable.bi"]], "erc (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.erc"], [185, "gridmet.config.GridmetVariable.erc"]], "etr (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.etr"], [185, "gridmet.config.GridmetVariable.etr"]], "fm100 (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.fm100"], [185, "gridmet.config.GridmetVariable.fm100"]], "fm1000 (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.fm1000"], [185, "gridmet.config.GridmetVariable.fm1000"]], "pet (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.pet"], [185, "gridmet.config.GridmetVariable.pet"]], "pr (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.pr"], [185, "gridmet.config.GridmetVariable.pr"]], "rmax (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.rmax"], [185, "gridmet.config.GridmetVariable.rmax"]], "rmin (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.rmin"], [185, "gridmet.config.GridmetVariable.rmin"]], "sph (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.sph"], [185, "gridmet.config.GridmetVariable.sph"]], "srad (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.srad"], [185, "gridmet.config.GridmetVariable.srad"]], "th (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.th"], [185, "gridmet.config.GridmetVariable.th"]], "tmmn (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.tmmn"], [185, "gridmet.config.GridmetVariable.tmmn"]], "tmmx (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.tmmx"], [185, "gridmet.config.GridmetVariable.tmmx"]], "vpd (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.vpd"], [185, "gridmet.config.GridmetVariable.vpd"]], "vs (gridmetvariable attribute)": [[176, "gridmet.config.GridmetVariable.vs"], [185, "gridmet.config.GridmetVariable.vs"]], "gridmetcontext (class in gridmet.config)": [[180, "gridmet.config.GridmetContext"], [185, "gridmet.config.GridmetContext"]], "compress (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.compress"]], "coordinates (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.coordinates"], [185, "gridmet.config.GridmetContext.coordinates"]], "dates (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.dates"], [185, "gridmet.config.GridmetContext.dates"]], "destination (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.destination"], [185, "gridmet.config.GridmetContext.destination"]], "enum() (gridmetcontext class method)": [[180, "gridmet.config.GridmetContext.enum"]], "geography (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.geography"], [185, "gridmet.config.GridmetContext.geography"]], "metadata (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.metadata"], [185, "gridmet.config.GridmetContext.metadata"]], "points (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.points"], [185, "gridmet.config.GridmetContext.points"]], "raw_downloads (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.raw_downloads"], [185, "gridmet.config.GridmetContext.raw_downloads"]], "shapes (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.shapes"], [185, "gridmet.config.GridmetContext.shapes"]], "shapes_dir (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.shapes_dir"], [185, "gridmet.config.GridmetContext.shapes_dir"]], "strategy (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.strategy"], [185, "gridmet.config.GridmetContext.strategy"]], "variables (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.variables"], [185, "gridmet.config.GridmetContext.variables"]], "years (gridmetcontext attribute)": [[180, "gridmet.config.GridmetContext.years"]], "computegridmettask (class in gridmet.task)": [[181, "gridmet.task.ComputeGridmetTask"], [193, "gridmet.task.ComputeGridmetTask"]], "computepointstask (class in gridmet.task)": [[181, "gridmet.task.ComputePointsTask"], [193, "gridmet.task.ComputePointsTask"]], "computeshapestask (class in gridmet.task)": [[181, "gridmet.task.ComputeShapesTask"], [193, "gridmet.task.ComputeShapesTask"]], "downloadgridmettask (class in gridmet.task)": [[181, "gridmet.task.DownloadGridmetTask"], [193, "gridmet.task.DownloadGridmetTask"]], "gridmettask (class in gridmet.task)": [[181, "gridmet.task.GridmetTask"], [193, "gridmet.task.GridmetTask"]], "compute_one_day() (computegridmettask method)": [[181, "gridmet.task.ComputeGridmetTask.compute_one_day"], [193, "gridmet.task.ComputeGridmetTask.compute_one_day"]], "compute_one_day() (computepointstask method)": [[181, "gridmet.task.ComputePointsTask.compute_one_day"], [193, "gridmet.task.ComputePointsTask.compute_one_day"]], "compute_one_day() (computeshapestask method)": [[181, "gridmet.task.ComputeShapesTask.compute_one_day"], [193, "gridmet.task.ComputeShapesTask.compute_one_day"]], "destination_file_name() (gridmettask class method)": [[181, "gridmet.task.GridmetTask.destination_file_name"], [193, "gridmet.task.GridmetTask.destination_file_name"]], "execute() (computegridmettask method)": [[181, "gridmet.task.ComputeGridmetTask.execute"], [193, "gridmet.task.ComputeGridmetTask.execute"]], "execute() (computepointstask method)": [[181, "gridmet.task.ComputePointsTask.execute"], [193, "gridmet.task.ComputePointsTask.execute"]], "execute() (downloadgridmettask method)": [[181, "gridmet.task.DownloadGridmetTask.execute"], [193, "gridmet.task.DownloadGridmetTask.execute"]], "execute() (gridmettask method)": [[181, "gridmet.task.GridmetTask.execute"], [193, "gridmet.task.GridmetTask.execute"]], "find_shape_file() (gridmettask class method)": [[181, "gridmet.task.GridmetTask.find_shape_file"], [193, "gridmet.task.GridmetTask.find_shape_file"]], "get_url() (downloadgridmettask class method)": [[181, "gridmet.task.DownloadGridmetTask.get_url"], [193, "gridmet.task.DownloadGridmetTask.get_url"]], "target() (downloadgridmettask method)": [[181, "gridmet.task.DownloadGridmetTask.target"], [193, "gridmet.task.DownloadGridmetTask.target"]], "disaggregate() (in module gridmet.gridmet_tools)": [[182, "gridmet.gridmet_tools.disaggregate"], [189, "gridmet.gridmet_tools.disaggregate"]], "find_shape_file() (in module gridmet.gridmet_tools)": [[182, "gridmet.gridmet_tools.find_shape_file"], [189, "gridmet.gridmet_tools.find_shape_file"]], "get_affine_transform() (in module gridmet.gridmet_tools)": [[182, "gridmet.gridmet_tools.get_affine_transform"], [189, "gridmet.gridmet_tools.get_affine_transform"]], "get_atmos_url() (in module gridmet.gridmet_tools)": [[182, "gridmet.gridmet_tools.get_atmos_url"], [189, "gridmet.gridmet_tools.get_atmos_url"]], "get_days() (in module gridmet.gridmet_tools)": [[182, "gridmet.gridmet_tools.get_days"], [189, "gridmet.gridmet_tools.get_days"]], "get_nkn_url() (in module gridmet.gridmet_tools)": [[182, "gridmet.gridmet_tools.get_nkn_url"], [189, "gridmet.gridmet_tools.get_nkn_url"]], "get_variable() (in module gridmet.gridmet_tools)": [[182, "gridmet.gridmet_tools.get_variable"], [189, "gridmet.gridmet_tools.get_variable"]], "gridmet.gridmet_tools": [[182, "module-gridmet.gridmet_tools"], [189, "module-gridmet.gridmet_tools"]], "aggregator (class in pollution.aggregator)": [[184, "pollution.aggregator.Aggregator"]], "collect_data() (aggregator method)": [[184, "pollution.aggregator.Aggregator.collect_data"]], "compute() (aggregator method)": [[184, "pollution.aggregator.Aggregator.compute"]], "execute() (aggregator method)": [[184, "pollution.aggregator.Aggregator.execute"]], "pollution.aggregator": [[184, "module-pollution.aggregator"]], "prepare() (aggregator method)": [[184, "pollution.aggregator.Aggregator.prepare"]], "write_header() (aggregator method)": [[184, "pollution.aggregator.Aggregator.write_header"]], "datefilter (class in gridmet.config)": [[185, "gridmet.config.DateFilter"]], "shape (class in gridmet.config)": [[185, "gridmet.config.Shape"], [223, "gridmet.config.Shape"]], "accept() (datefilter method)": [[185, "gridmet.config.DateFilter.accept"]], "gridmet.config": [[185, "module-gridmet.config"]], "point (shape attribute)": [[185, "gridmet.config.Shape.point"], [223, "gridmet.config.Shape.point"]], "polygon (shape attribute)": [[185, "gridmet.config.Shape.polygon"], [223, "gridmet.config.Shape.polygon"]], "validate() (gridmetcontext method)": [[185, "gridmet.config.GridmetContext.validate"]], "check_shape_file() (in module gridmet.gridmet_tools)": [[189, "gridmet.gridmet_tools.check_shape_file"]], "get_address() (in module gridmet.gridmet_tools)": [[189, "gridmet.gridmet_tools.get_address"]], "gridmet (class in gridmet.launcher)": [[190, "gridmet.launcher.Gridmet"]], "collect_tasks() (gridmet method)": [[190, "gridmet.launcher.Gridmet.collect_tasks"]], "execute_sequentially() (gridmet method)": [[190, "gridmet.launcher.Gridmet.execute_sequentially"]], "gridmet.launcher": [[190, "module-gridmet.launcher"]], "registry (class in gridmet.registry)": [[191, "gridmet.registry.Registry"]], "create_yaml() (registry method)": [[191, "gridmet.registry.Registry.create_yaml"]], "gridmet.registry": [[191, "module-gridmet.registry"]], "download_shapes() (in module gridmet.shapes)": [[192, "gridmet.shapes.download_shapes"]], "gridmet.shapes": [[192, "module-gridmet.shapes"]], "block_size (downloadgridmettask attribute)": [[193, "gridmet.task.DownloadGridmetTask.BLOCK_SIZE"]], "csvwriter (class in gridmet.task)": [[193, "gridmet.task.CSVWriter"]], "collector (class in gridmet.task)": [[193, "gridmet.task.Collector"]], "listcollector (class in gridmet.task)": [[193, "gridmet.task.ListCollector"]], "parallel (class in gridmet.task)": [[193, "gridmet.task.Parallel"]], "bands (parallel attribute)": [[193, "gridmet.task.Parallel.bands"]], "collect_data() (computegridmettask method)": [[193, "gridmet.task.ComputeGridmetTask.collect_data"]], "count_lines() (in module gridmet.task)": [[193, "gridmet.task.count_lines"]], "days (parallel attribute)": [[193, "gridmet.task.Parallel.days"]], "flush() (csvwriter method)": [[193, "gridmet.task.CSVWriter.flush"], [257, "nsaph_utils.utils.io_utils.CSVWriter.flush"]], "flush() (collector method)": [[193, "gridmet.task.Collector.flush"], [257, "nsaph_utils.utils.io_utils.Collector.flush"]], "force_standard_api (computepointstask attribute)": [[193, "gridmet.task.ComputePointsTask.force_standard_api"]], "get_days() (computegridmettask method)": [[193, "gridmet.task.ComputeGridmetTask.get_days"]], "get_key() (computegridmettask method)": [[193, "gridmet.task.ComputeGridmetTask.get_key"]], "get_key() (computepointstask method)": [[193, "gridmet.task.ComputePointsTask.get_key"]], "get_key() (computeshapestask method)": [[193, "gridmet.task.ComputeShapesTask.get_key"]], "get_result() (listcollector method)": [[193, "gridmet.task.ListCollector.get_result"], [257, "nsaph_utils.utils.io_utils.ListCollector.get_result"]], "get_variable() (computegridmettask class method)": [[193, "gridmet.task.ComputeGridmetTask.get_variable"]], "gridmet.task": [[193, "module-gridmet.task"]], "make_point() (computepointstask method)": [[193, "gridmet.task.ComputePointsTask.make_point"]], "origin (computegridmettask attribute)": [[193, "gridmet.task.ComputeGridmetTask.origin"]], "points (parallel attribute)": [[193, "gridmet.task.Parallel.points"]], "prepare() (computegridmettask method)": [[193, "gridmet.task.ComputeGridmetTask.prepare"]], "prepare() (computepointstask method)": [[193, "gridmet.task.ComputePointsTask.prepare"]], "quote() (in module gridmet.task)": [[193, "gridmet.task.quote"]], "to_date() (computegridmettask method)": [[193, "gridmet.task.ComputeGridmetTask.to_date"]], "writerow() (csvwriter method)": [[193, "gridmet.task.CSVWriter.writerow"], [257, "nsaph_utils.utils.io_utils.CSVWriter.writerow"]], "writerow() (collector method)": [[193, "gridmet.task.Collector.writerow"], [257, "nsaph_utils.utils.io_utils.Collector.writerow"]], "writerow() (listcollector method)": [[193, "gridmet.task.ListCollector.writerow"], [257, "nsaph_utils.utils.io_utils.ListCollector.writerow"]], "wustlfile (class in pollution.wustl_file_processor)": [[195, "pollution.wustl_file_processor.WUSTLFile"]], "execute() (wustlfile method)": [[195, "pollution.wustl_file_processor.WUSTLFile.execute"]], "parse_file_name() (wustlfile method)": [[195, "pollution.wustl_file_processor.WUSTLFile.parse_file_name"]], "pollution.wustl_file_processor": [[195, "module-pollution.wustl_file_processor"]], "prepare() (wustlfile method)": [[195, "pollution.wustl_file_processor.WUSTLFile.prepare"]], "nsaph_utils.dataset": [[247, "module-nsaph_utils.DataSet"]], "nsaph_utils.utils.cli": [[248, "module-nsaph_utils.utils.cli"]], "modulecollector (class in nsaph_utils.docutils.collector)": [[249, "nsaph_utils.docutils.collector.ModuleCollector"]], "collect() (modulecollector method)": [[249, "nsaph_utils.docutils.collector.ModuleCollector.collect"]], "main() (in module nsaph_utils.docutils.collector)": [[249, "nsaph_utils.docutils.collector.main"]], "nsaph_utils.docutils.collector": [[249, "module-nsaph_utils.docutils.collector"]], "add_to() (argument method)": [[251, "nsaph_utils.utils.context.Argument.add_to"]], "default() (context method)": [[251, "nsaph_utils.utils.context.Context.default"]], "get_action() (argument method)": [[251, "nsaph_utils.utils.context.Argument.get_action"]], "get_help() (argument method)": [[251, "nsaph_utils.utils.context.Argument.get_help"]], "get_nargs() (argument method)": [[251, "nsaph_utils.utils.context.Argument.get_nargs"]], "instantiate() (context method)": [[251, "nsaph_utils.utils.context.Context.instantiate"]], "is_required() (argument method)": [[251, "nsaph_utils.utils.context.Argument.is_required"]], "multiple (cardinality attribute)": [[251, "nsaph_utils.utils.context.Cardinality.multiple"]], "nsaph_utils.utils.context": [[251, "module-nsaph_utils.utils.context"]], "set_empty_args() (context method)": [[251, "nsaph_utils.utils.context.Context.set_empty_args"]], "single (cardinality attribute)": [[251, "nsaph_utils.utils.context.Cardinality.single"]], "get_header_level() (in module nsaph_utils.docutils.copy_section)": [[252, "nsaph_utils.docutils.copy_section.get_header_level"]], "insert_section() (in module nsaph_utils.docutils.copy_section)": [[252, "nsaph_utils.docutils.copy_section.insert_section"]], "main() (in module nsaph_utils.docutils.copy_section)": [[252, "nsaph_utils.docutils.copy_section.main"]], "nsaph_utils.docutils.copy_section": [[252, "module-nsaph_utils.docutils.copy_section"]], "read_section() (in module nsaph_utils.docutils.copy_section)": [[252, "nsaph_utils.docutils.copy_section.read_section"]], "cwlparser (class in nsaph_utils.docutils.cwl2md)": [[253, "nsaph_utils.docutils.cwl2md.CWLParser"]], "main() (in module nsaph_utils.docutils.cwl2md)": [[253, "nsaph_utils.docutils.cwl2md.main"]], "nsaph_utils.docutils.cwl2md": [[253, "module-nsaph_utils.docutils.cwl2md"]], "parse() (cwlparser method)": [[253, "nsaph_utils.docutils.cwl2md.CWLParser.parse"]], "ftsparseexception": [[254, "nsaph_utils.utils.fwf.FTSParseException"]], "fwfcolumn (class in nsaph_utils.utils.fwf)": [[254, "nsaph_utils.utils.fwf.FWFColumn"]], "fwfmeta (class in nsaph_utils.utils.fwf)": [[254, "nsaph_utils.utils.fwf.FWFMeta"]], "fwfreader (class in nsaph_utils.utils.fwf)": [[254, "nsaph_utils.utils.fwf.FWFReader"]], "bad_lines (fwfreader attribute)": [[254, "nsaph_utils.utils.fwf.FWFReader.bad_lines"]], "close() (fwfreader method)": [[254, "nsaph_utils.utils.fwf.FWFReader.close"]], "column_names() (fwfreader method)": [[254, "nsaph_utils.utils.fwf.FWFReader.column_names"]], "columns (fwfmeta attribute)": [[254, "nsaph_utils.utils.fwf.FWFMeta.columns"]], "d (fwfcolumn attribute)": [[254, "nsaph_utils.utils.fwf.FWFColumn.d"]], "end (fwfcolumn attribute)": [[254, "nsaph_utils.utils.fwf.FWFColumn.end"]], "good_lines (fwfreader attribute)": [[254, "nsaph_utils.utils.fwf.FWFReader.good_lines"]], "length (fwfcolumn attribute)": [[254, "nsaph_utils.utils.fwf.FWFColumn.length"]], "name (fwfcolumn attribute)": [[254, "nsaph_utils.utils.fwf.FWFColumn.name"]], "ncol (fwfmeta attribute)": [[254, "nsaph_utils.utils.fwf.FWFMeta.ncol"]], "next() (fwfreader method)": [[254, "nsaph_utils.utils.fwf.FWFReader.next"]], "nrows (fwfmeta attribute)": [[254, "nsaph_utils.utils.fwf.FWFMeta.nrows"]], "nsaph_utils.utils.fwf": [[254, "module-nsaph_utils.utils.fwf"]], "on_parse_exception() (fwfreader method)": [[254, "nsaph_utils.utils.fwf.FWFReader.on_parse_exception"]], "open() (fwfreader method)": [[254, "nsaph_utils.utils.fwf.FWFReader.open"]], "ord (fwfcolumn attribute)": [[254, "nsaph_utils.utils.fwf.FWFColumn.ord"]], "path (fwfmeta attribute)": [[254, "nsaph_utils.utils.fwf.FWFMeta.path"]], "read_record() (fwfreader method)": [[254, "nsaph_utils.utils.fwf.FWFReader.read_record"]], "rlen (fwfmeta attribute)": [[254, "nsaph_utils.utils.fwf.FWFMeta.rlen"]], "size (fwfmeta attribute)": [[254, "nsaph_utils.utils.fwf.FWFMeta.size"]], "start (fwfcolumn attribute)": [[254, "nsaph_utils.utils.fwf.FWFColumn.start"]], "type (fwfcolumn attribute)": [[254, "nsaph_utils.utils.fwf.FWFColumn.type"]], "validate() (fwfreader method)": [[254, "nsaph_utils.utils.fwf.FWFReader.validate"]], "interpolate() (in module nsaph_utils.interpolation.interface)": [[255, "nsaph_utils.interpolation.interface.interpolate"]], "nsaph_utils.interpolation.interface": [[255, "module-nsaph_utils.interpolation.interface"]], "calc_weights() (in module nsaph_utils.interpolation.interpolate_ma)": [[256, "nsaph_utils.interpolation.interpolate_ma.calc_weights"]], "get_indices() (in module nsaph_utils.interpolation.interpolate_ma)": [[256, "nsaph_utils.interpolation.interpolate_ma.get_indices"]], "interpolate_ma() (in module nsaph_utils.interpolation.interpolate_ma)": [[256, "nsaph_utils.interpolation.interpolate_ma.interpolate_ma"]], "nsaph_utils.interpolation.interpolate_ma": [[256, "module-nsaph_utils.interpolation.interpolate_ma"]], "downloadtask (class in nsaph_utils.utils.io_utils)": [[257, "nsaph_utils.utils.io_utils.DownloadTask"]], "na (specialvalues attribute)": [[257, "nsaph_utils.utils.io_utils.SpecialValues.NA"]], "nan (specialvalues attribute)": [[257, "nsaph_utils.utils.io_utils.SpecialValues.NaN"]], "specialvalues (class in nsaph_utils.utils.io_utils)": [[257, "nsaph_utils.utils.io_utils.SpecialValues"]], "add_url() (downloadtask method)": [[257, "nsaph_utils.utils.io_utils.DownloadTask.add_url"]], "as_dict() (in module nsaph_utils.utils.io_utils)": [[257, "nsaph_utils.utils.io_utils.as_dict"]], "count_lines() (in module nsaph_utils.utils.io_utils)": [[257, "nsaph_utils.utils.io_utils.count_lines"]], "dataframe2csv() (in module nsaph_utils.utils.io_utils)": [[257, "nsaph_utils.utils.io_utils.dataframe2csv"]], "fst2csv() (in module nsaph_utils.utils.io_utils)": [[257, "nsaph_utils.utils.io_utils.fst2csv"]], "is_missing() (specialvalues class method)": [[257, "nsaph_utils.utils.io_utils.SpecialValues.is_missing"]], "is_untyped() (specialvalues class method)": [[257, "nsaph_utils.utils.io_utils.SpecialValues.is_untyped"]], "is_up_to_date() (downloadtask method)": [[257, "nsaph_utils.utils.io_utils.DownloadTask.is_up_to_date"]], "is_yaml_or_json() (in module nsaph_utils.utils.io_utils)": [[257, "nsaph_utils.utils.io_utils.is_yaml_or_json"]], "reset() (downloadtask method)": [[257, "nsaph_utils.utils.io_utils.DownloadTask.reset"]], "sizeof_fmt() (in module nsaph_utils.utils.io_utils)": [[257, "nsaph_utils.utils.io_utils.sizeof_fmt"]], "mdcreator (class in nsaph_utils.docutils.md_creator)": [[258, "nsaph_utils.docutils.md_creator.MDCreator"]], "add_header() (mdcreator method)": [[258, "nsaph_utils.docutils.md_creator.MDCreator.add_header"]], "add_image() (mdcreator method)": [[258, "nsaph_utils.docutils.md_creator.MDCreator.add_image"]], "add_table() (mdcreator method)": [[258, "nsaph_utils.docutils.md_creator.MDCreator.add_table"]], "add_text() (mdcreator method)": [[258, "nsaph_utils.docutils.md_creator.MDCreator.add_text"]], "nsaph_utils.docutils.md_creator": [[258, "module-nsaph_utils.docutils.md_creator"]], "save() (mdcreator method)": [[258, "nsaph_utils.docutils.md_creator.MDCreator.save"]], "fstreader (class in nsaph_utils.utils.pyfst)": [[259, "nsaph_utils.utils.pyfst.FSTReader"]], "choose_cran_mirror() (in module nsaph_utils.utils.pyfst)": [[259, "nsaph_utils.utils.pyfst.choose_cran_mirror"]], "close() (fstreader method)": [[259, "nsaph_utils.utils.pyfst.FSTReader.close"]], "current() (fstreader method)": [[259, "nsaph_utils.utils.pyfst.FSTReader.current"]], "current_mapping() (fstreader method)": [[259, "nsaph_utils.utils.pyfst.FSTReader.current_mapping"]], "current_row() (fstreader method)": [[259, "nsaph_utils.utils.pyfst.FSTReader.current_row"]], "ensure_packages() (in module nsaph_utils.utils.pyfst)": [[259, "nsaph_utils.utils.pyfst.ensure_packages"]], "nsaph_utils.utils.pyfst": [[259, "module-nsaph_utils.utils.pyfst"]], "open() (fstreader method)": [[259, "nsaph_utils.utils.pyfst.FSTReader.open"]], "read_fst() (in module nsaph_utils.utils.pyfst)": [[259, "nsaph_utils.utils.pyfst.read_fst"]], "read_next() (fstreader method)": [[259, "nsaph_utils.utils.pyfst.FSTReader.read_next"]], "rewind() (fstreader method)": [[259, "nsaph_utils.utils.pyfst.FSTReader.rewind"]], "vector2list() (in module nsaph_utils.utils.pyfst)": [[259, "nsaph_utils.utils.pyfst.vector2list"]], "madeupcontext (class in tests.test_cli_context)": [[261, "tests.test_cli_context.MadeUpContext"]], "mytestcase (class in tests.test_cli_context)": [[261, "tests.test_cli_context.MyTestCase"]], "test_custom_validate() (mytestcase method)": [[261, "tests.test_cli_context.MyTestCase.test_custom_validate"]], "test_default_context() (mytestcase method)": [[261, "tests.test_cli_context.MyTestCase.test_default_context"]], "tests.test_cli_context": [[261, "module-tests.test_cli_context"]], "validate() (madeupcontext method)": [[261, "tests.test_cli_context.MadeUpContext.validate"]], "interpolationtest (class in tests.test_interpolation)": [[262, "tests.test_interpolation.InterpolationTest"]], "test_ma_interpolation() (interpolationtest method)": [[262, "tests.test_interpolation.InterpolationTest.test_ma_interpolation"]], "tests.test_interpolation": [[262, "module-tests.test_interpolation"]], "qctests (class in tests.test_qc)": [[263, "tests.test_qc.QCTests"]], "test_tests() (qctests method)": [[263, "tests.test_qc.QCTests.test_tests"]], "tests.test_qc": [[263, "module-tests.test_qc"]], "condition (class in nsaph_utils.qc.tester)": [[264, "nsaph_utils.qc.tester.Condition"]], "expectationerror": [[264, "nsaph_utils.qc.tester.ExpectationError"]], "severity (class in nsaph_utils.qc.tester)": [[264, "nsaph_utils.qc.tester.Severity"]], "test (class in nsaph_utils.qc.tester)": [[264, "nsaph_utils.qc.tester.Test"]], "tester (class in nsaph_utils.qc.tester)": [[264, "nsaph_utils.qc.tester.Tester"]], "add() (tester method)": [[264, "nsaph_utils.qc.tester.Tester.add"]], "check() (test method)": [[264, "nsaph_utils.qc.tester.Test.check"]], "check() (tester method)": [[264, "nsaph_utils.qc.tester.Tester.check"]], "count_missing (condition attribute)": [[264, "nsaph_utils.qc.tester.Condition.count_missing"]], "critical (severity attribute)": [[264, "nsaph_utils.qc.tester.Severity.critical"]], "data_type (condition attribute)": [[264, "nsaph_utils.qc.tester.Condition.data_type"]], "debug (severity attribute)": [[264, "nsaph_utils.qc.tester.Severity.debug"]], "error (severity attribute)": [[264, "nsaph_utils.qc.tester.Severity.error"]], "greater_than (condition attribute)": [[264, "nsaph_utils.qc.tester.Condition.greater_than"]], "info (severity attribute)": [[264, "nsaph_utils.qc.tester.Severity.info"]], "less_than (condition attribute)": [[264, "nsaph_utils.qc.tester.Condition.less_than"]], "load_yaml() (tester method)": [[264, "nsaph_utils.qc.tester.Tester.load_yaml"]], "no_missing (condition attribute)": [[264, "nsaph_utils.qc.tester.Condition.no_missing"]], "nsaph_utils.qc.tester": [[264, "module-nsaph_utils.qc.tester"]], "val (test attribute)": [[264, "nsaph_utils.qc.tester.Test.val"]], "warning (severity attribute)": [[264, "nsaph_utils.qc.tester.Severity.warning"]]}})